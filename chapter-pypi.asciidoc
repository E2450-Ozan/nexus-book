[[pypi]]
== PyPi Repositories
{inall}

[[pypi-introduction]]
=== Introduction

The Python Package Index, or PyPI, is a repository of open-source Python packages. It contains a vast catalog of 
libraries supplied by the worldwide community of Python developers. The official PyPI is available for searches 
at https://pypi.python.org/pypi[https://pypi.python.org/pypi].

{pro} and {oss} support the Python Package Index (PyPI) repository format for proxy repositories. This 
allows the repository manager to take advantage of packages in the Python repository and other public registries 
without incurring repeated downloads of packages. The PyPI website, is maintained by 
https://www.python.org/psf/[Python Software Foundation].

////
In the first sentence above, include hosted (as in... {pro}, {oss} allows you to upload/publish index-available & 
your own packages & tools as hosted repository) Also, somewhere in the paragraph include how the repository 
manager supports PyPI packages as a repository group (as in... the repository group merges and exposes the 
contents of multiple repositories in one convenient URL)  
////

To reduce time and bandwidth the repository manager can access Python packages and tools from the index. The 
proxy repository for PyPI packages provides a nearby cache of files available on the index. This allows the local 
network client to access files from the Python Package Index more reliably.

Administrators who use the repository manager will download and run libraries to retrieve, facilitate, and manage 
Python projects. By design, Python installs to the root directory with the version number embedded so you can 
maintain multiple versions of Python without conflicts.

[[pypi-proxy]]
=== Proxying PyPI Repositories

You can set up a PyPI proxy repository to access a remote repository location, such as the PyPI repository at 
https://pypi.python.org/pypi[https://pypi.python.org/pypi]. The index is maintained as the default location for  
Python packages.

To proxy a PyPI package, you simply create a new 'pypi(proxy)' as documented in <<admin-repositories>>, in 
detail. Minimal configuration steps are:

* Define 'Name'
* Define URL for 'Remote storage' e.g. https://pypi.python.org/pypi[https://pypi.python.org/pypi]
* Select a 'Blob store' for 'Storage'

A user with sufficient privileges will be able to run pip search against a proxied repository.

////
[[pypi-hosted]]
=== Hosting PyPI Repositories

////

////

[[pypi-group]]
=== PyPI Repository Groups

TBD
////

[[pypi-installation]]
=== Installing Python and PyPI Client Tools

The latest versions of such Linux distributions as CentOS and Ubuntu, as well as El Capitan for Mac OS X, are 
already packaged with Python 2.7 and Pip, a tool for installing and managing Python packages from the index. 
However, if you run Microsoft Windows, download and install the up-to-date version of Python from
https://www.python.org/downloads/[https://www.python.org/downloads/]. Download the Pip installer from 
https://pip.pypa.io/en/stable/installing/[https://pip.pypa.io/en/stable/installing/].

Supported Python versions for the repository manager include 2.6, 2.7, 3.4, 3.5. From the command line verify the 
version on your system.

----
python --version
----

The repository manager supports version 7 and 8 of the PIP installer. Run the following to check the PIP version:

----
pip --version
----

If you do not have PIP, run the command to install version 7 or 8. For example, install version 8:

----
pip install pip==8
----

Use PIP to install +virtualenv+, a virtual enviroment tool for Python applications. Rather than installing PyPI 
packages globally, use +virtualenv+ to sandbox a specific running Python environment. +virtualenv+ will access a 
selected against different versions of the Python interpreter without modifying your main Python 
installation. Run the command as follows:

----
sudo pip install virtualenv
----

////
* use pip to install setup tools
////


[[pypi-configuration]]
=== Configuring PyPI Client Tools

Once you have installed all necessary packages from the Python Package Index, create and configure +pip.conf+. 
+pip.conf+ is a configuration file that allows you to set all command line option defaults in a standard ini 
style. In the example below, add the proxy package index url:

----
[global]
index = http://localhost:8081/repository/pypi-proxy/pypi
index-url = http://localhost:8081/repository/pypi-proxy/simple
----

////
* Create and active your +virtualenv+
* use pip to install easy_install 
////

////
for proxy
Now set up your setup.cfg file for easy_install:
nano setup.cfg
for hosted 
.pypirc
////

[[pypi-ssl]]
==== SSL Usage for PyPI Client Tools

TBD

////
If using SSL, perform the following steps. This assumes the repository manager has already been set up to use SSL. If not review SSL configuration at <<ssl>>.
////


[[pypi-browse-search]]
=== Browsing PyPI Repositories and Searching Packages

You can browse PyPI repositories in the user interface inspecting the components and assets and their details, as
described in <<search-components>>.

////
Add section here on using pip search from the command line. Use pip search install a wheel package.
e.g. From the command line you can search available packages with pip search. Run the command pip search [package name]. For example, if you want to install 
////

Searching for PyPI packages can be performed in the user interface, too. It finds all packages that are currently
stored in the repository manager, either because they have been pushed to a hosted repository or they have been
proxied from an upstream repository and cached in the repository manager.
