[[pypi]]
== PyPi Repositories
{inall}

[[pypi-introduction]]
=== Introduction

The Python Package Index, or PyPI, is a repository of open-source Python packages. It contains a vast catalog of 
libraries supplied by the worldwide community of Python developers. The official PyPI is available for searches 
at https://pypi.python.org/pypi[https://pypi.python.org/pypi].

{pro} and {oss} support the Python Package Index (PyPI) repository format for proxy repositories. This 
allows the repository manager to take advantage of packages in the Python repository and other public registries 
without incurring repeated downloads of packages. The PyPI website, is maintained by 
https://www.python.org/psf/[Python Software Foundation].

////
In the first sentence above, include hosted (as in... {pro}, {oss} allows you to upload/publish index-available & 
your own packages & tools as hosted repository) Also, somewhere in the paragraph include how the repository 
manager supports PyPI packages as a repository group (as in... the repository group merges and exposes the 
contents of multiple repositories in one convenient URL)  
////

To reduce time and bandwidth the repository manager can access Python packages and tools from the index. The 
proxy repository for PyPI packages provides a nearby cache of files available on the index. This allows the local 
network client to access components from the Python Package Index more reliably.

Administrators who use the repository manager will download and run libraries to retrieve, facilitate, and manage 
Python projects. By design, Python installs to the root directory with the version number embedded so you can 
maintain multiple versions of Python without conflicts.

[[pypi-proxy]]
=== Proxying PyPI Repositories

You can set up a PyPI proxy repository to access a remote repository location, such as the PyPI repository at 
https://pypi.python.org/pypi[https://pypi.python.org/pypi]. The index is maintained as the default location for  
Python packages.

To proxy a PyPI package, you simply create a new 'pypi(proxy)' as documented in <<admin-repositories>>, in 
detail. Minimal configuration steps are:

* Define 'Name'
* Define URL for 'Remote storage' e.g. https://pypi.python.org/pypi[https://pypi.python.org/pypi]
* Select a 'Blob store' for 'Storage'

The Proxy configuration for a PyPI proxy repository includes a configuration URL to access the index. The index 
is used for requests related to searches. A user with sufficient privileges will be able to run a search, from 
the user interface or command line, against a remote repository (e.g. https://pypi.python.org/pypi ), as 
referenced in <<pypi-browse-search>>.

////
[[pypi-hosted]]
=== Hosting PyPI Repositories

////

////

[[pypi-group]]
=== PyPI Repository Groups

TBD
////

[[pypi-installation]]
=== Installing Python and PyPI Client Tools

The latest versions of such Linux distributions as CentOS and Ubuntu, as well as El Capitan for Mac OS X, are 
already packaged with Python 2.7 and Pip, a tool for installing and managing Python packages from the index. 
However, if you run Microsoft Windows, download and install the up-to-date version of Python from
https://www.python.org/downloads/[https://www.python.org/downloads/]. Download the Pip installer from 
https://pip.pypa.io/en/stable/installing/[https://pip.pypa.io/en/stable/installing/].

Supported Python versions for the repository manager include 2.6, 2.7, 3.4, 3.5. From the command line verify the 
version on your system.

----
python --version
----

The repository manager supports version 7 and 8 of the PIP installer. Run the following to check the PIP version:

----
pip --version
----

If you do not have PIP, run the command to install version 7 or 8. For example, install version 8:

----
pip install pip==8
----

Use PIP to install +virtualenv+, a virtual enviroment tool for Python applications. Rather than installing PyPI 
packages globally, use +virtualenv+ to sandbox a specific running Python environment. +virtualenv+ will access a 
selected against different versions of the Python interpreter without modifying your main Python 
installation. Run the command as follows:

----
sudo pip install virtualenv
----

Next install Twine. Twine is a utility that provides secure authentication to PyPI over HTTPS. It is an 
alternative to `python setup.py upload` which is available to older version of Python. Twine's only function is 
to support <<pypi-upload-dist, uploading distributions>>. To install with PIP, run the command as follows:

----
sudo pip install twine
----

Now activate a +virtualenv+. Change the environment name and version number as required. In the example below, an 
environment for Python 2.6 is created, then activated:

----
virtualenv py26 --python=python2.6
cd py26
source ./bin/activate
----

[[pypi-configuration]]
=== Configuring PyPI Client Tools

Once you have installed all necessary packages from the Python Package Index and active your +virtualenv+, create 
and configure +pip.conf+. +pip.conf+ is a configuration file that allows you to set all command line option
defaults in a standard ini style. In the example below, reference the remote index package to be proxied:

----
[global]
index = http://localhost:8081/repository/pypi-proxy/pypi
index-url = http://localhost:8081/repository/pypi-proxy/simple
----

Next bootstrap your target environment with +setuptools+ using PIP. +easy_install+ is a module bundled with 
+setuptools+. +easy_install+ that gives you a quick way to install packages remotely. In the example, version 19 
is used.

----
pip install setuptools==19
----

Now, create a +setup.cfg+ for for +easy_install+. Add the following lines, then save:

----
[easy_install]
index-url = http://localhost:8081/repository/pypi-proxy/simple
----

////
for hosted add .pypirc configuration
////

[[pypi-create-dist]]
=== Packaging and Distributing Projects

To make your project installable from PyPI, you must create a source distribution, is a collection of components 
that you can package and send to users via the repository manager. A multi-platform installer called +setup.py+ 
is used to install Python packages. +setup.py+ is executed when you build a distribution. You can create a wheel 
or egg, formats that carry out distribution to the target environment. To create the distribution follow this 
syntax:

----
python setup.py sdist
----

*Build a wheel.*

Wheel is a built-package format that automatically recompiles your applications during every install. It uses the 
extension +bdist_wheel+, which detects the Python installation so that is usable with any Python instance of the 
same version.

In this example run the following command for a Python 2.7 environment:

----
python2.7 setup.py bdist_wheel
----

*Build an egg.*

Like Wheel, Egg is a cross-platform distribution format for pure Python packages. It uses the extension 
+bdist_egg+ to build individual Eggs. Run the following command for a Python 2.7 environment:

----
python2.7 setup.py bdist_egg
----

////
[[pypi-upload-dist]]
=== Uploading Distributions

----
twine upload dist/*
----
////

////
[[pypi-ssl]]
==== SSL Usage for PyPI Client Tools

You can secure inbound and outbound communication between the repository manager and the PyPI repository using 
SSL. This assumes the repository manager has already been set up to use SSL. If not review SSL configuration at 
<<ssl>>.

First, if you are running Python 2.7 or earlier, run the following to avoid +InsecurePlatformWarnings+ and 
related errors:

----
pip install pyopenssl ndg-httpsclient pyasn1
pip install --upgrade ndg-httpsclient
pip install setuptools==19
----

NOTE: The steps to avoid +InsecurePlatformWarnings+ may change your version of setuptools, so you need to 
reinstall your version of +setuptools+ after running the commands listed above.

Next, retrieve the PEM certificate information from the repository manager:

----
openssl s_client -tls1 -connect localhost:8443
----

Copy certificate and save it to +nexus.pem+. To ensure the configuration is correct. verifying the .pem:

----
openssl verify nexus.pem
----

Update your +pip.conf+ as follows:

----
[global]
index = https://localhost:8443/repository/pypi-proxy/pypi
index-url = https://localhost:8443/repository/pypi-proxy/simple
cert = nexus.pem
----
////

[[pypi-browse-search]]
=== Browsing PyPI Repositories and Searching Packages

You can browse PyPI repositories in the user interface inspecting the components and assets and their details, as
described in <<search-components>>.

Searching for PyPI packages can be performed in the user interface, too. It finds all packages that are currently
stored in the repository manager that have been proxied from an upstream repository and cached in the repository 
manager.

////
Second sentence edit for hosted docs
It finds all packages that are currently stored in the repository manager, either because they have been pushed 
to a hosted repository or they have been proxied from an upstream repository and cached in the repository manager.
////

From the command line you can search available PyPI packages. To search for a package, run:

----
pip search example-package
----

[[pypi-deactivate]]
==== Deactivating the Environment

To switch back to your default environment, run the following:

----
deactivate
----

You should see the command prompt change, and your original versions of Python and PIP should be available.