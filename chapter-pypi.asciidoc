[[pypi]]
== PyPI Repositories
{inall}

[[pypi-introduction]]
=== Introduction

The Python Package Index, or PyPI, is a vast repository of open-source Python packages supplied by the worldwide 
community of Python developers. The official PyPI is available for searches at 
https://pypi.python.org/pypi[https://pypi.python.org/pypi].

{pro} and {oss} support the Python Package Index (PyPI) repository format for proxy repositories. This 
allows the repository manager to take advantage of packages in the Python repository and other public registries 
without incurring repeated downloads of packages. The PyPI website, is maintained by the
https://www.python.org/psf/[Python Software Foundation].

////
In the first sentence above, include hosted (as in... {pro}, {oss} allows you to upload/publish index-available & 
your own packages & tools as hosted repository) Also, somewhere in the paragraph include how the repository 
manager supports PyPI packages as a repository group (as in... the repository group merges and exposes the 
contents of multiple repositories in one convenient URL)  
////

Repository manager user will download and run libraries to retrieve, facilitate, and manage Python projects. By 
design, Python installs to the root directory with the version number embedded so you can maintain multiple 
versions of Python without conflicts.

[[pypi-proxy]]
=== Proxying PyPI Repositories

You can set up a PyPI proxy repository to access a remote repository location, such as the PyPI repository at 
https://pypi.python.org/pypi[https://pypi.python.org/pypi]. The index is maintained as the default location for  
Python packages.

To proxy a PyPI package, you simply create a new 'pypi(proxy)' as documented in <<admin-repositories>>, in 
detail. Minimal configuration steps are:

* Define 'Name'
* Define URL for 'Remote storage' e.g. https://pypi.python.org/pypi[https://pypi.python.org/pypi]
* Select a 'Blob store' for 'Storage'

The repository manager can access Python packages and tools from the index. The proxy repository for PyPI 
packages provides a cache of files available on the index. This allows the local network client to access 
components from the Python Package Index more reliably.

The proxy configuration for a PyPI proxy repository includes a configuration URL to access the index. 
Users will be able to run a browse and search assets against a remote repository, as mentioned in 
<<pypi-browse-search>>.

////
[[pypi-hosted]]
=== Hosting PyPI Repositories

////

////

[[pypi-group]]
=== PyPI Repository Groups

TBD
////

[[pypi-installation]]
=== Installing PyPI Client Tools

The latest versions of such Linux distributions as CentOS and Ubuntu come packaged with Python 2.7 and 
https://pip.pypa.io/en/stable/[pip], a tool for installing and managing Python packages from the index. For Mac 
OS X and Microsoft Windows, download and install a Python version compatible with the repository manager from 
https://www.python.org/downloads/[https://www.python.org/downloads/]. Download the pip installer from 
https://pip.pypa.io/en/stable/installing/[https://pip.pypa.io/en/stable/installing/].

NOTE: {pro} and {oss} support specific versions of Python, pip, and setuptools. For Python the repository manager 
supports 2.6, 2.7, 3.4, 3.5. For pip versions 7 and 8 are supported. Versions 19 and 20 of setuptools, used to 
build and distribute Python dependencies, are compatible with the repository manager. 

////
Section for the hosted docs - re: since both twine and subsequently pip to install twine, would be hosted
Next install Twine. Twine is a utility that provides secure authentication to PyPI over HTTPS. Twine's only 
function is to upload distributions. If the user uses pip then here's a sample command:
----
sudo pip install twine
----
////

[[pypi-configuration]]
=== Configuring PyPI Client Tools

NOTE: Depending on your preference for either https://pypi.python.org/pypi/setuptools[setuptools] or pip your 
proxy configuration may vary.

Once you have installed all necessary client tools from the Python Package Index, create and configure your 
client-side files necessary to proxy index pages for PyPI. Depending on your Python configuration you can use 
+pip.conf+ or +setup.cfg+ to set all command line option defaults for your proxy repository.

In the example below, a +pip.conf+ is shown. The +index+ specifies the index for a proxied PyPI repository 
setup within the repository manager. +index-url+ is the base URL designated for the cached index pages within the 
proxy repository.

----
[global]
index = http://localhost:8081/repository/pypi-proxy/pypi
index-url = http://localhost:8081/repository/pypi-proxy/simple
----

////
note - the configuration of tools section will need to updated to mention how PyPI interacts with repoman hosted 
support, hint pypirc configuration. Sample .pypirc:

----
[distutils]
index-servers =
   nexus
 
[nexus]
repository = http://localhost:8081/repository/pypi-hosted/
username = admin
password = admin123
----
////

Alternately you can create a +setup.cfg+. Like the +pip.conf+ option, the +index-url+ is the tag created to 
specify the base URL for the PyPI proxy index.

----
[easy_install]
index-url = http://localhost:8081/repository/pypi-proxy/simple
----

////
add section on uploading distributions - see twine above
Uploading Distributions

add section on 
SSL Usage for PyPI Client Tools

You can secure inbound and outbound communication between the repository manager and the PyPI repository using 
SSL. This assumes the repository manager has already been set up to use SSL. If not review SSL configuration at 
<<ssl>>.

First, if you are running Python 2.7 or earlier, run the following to avoid +InsecurePlatformWarnings+ and 
related errors:

----
pip install pyopenssl ndg-httpsclient pyasn1
pip install --upgrade ndg-httpsclient
pip install setuptools==19
----

NOTE: The steps to avoid +InsecurePlatformWarnings+ may change your version of setuptools, so you need to 
reinstall your version of +setuptools+ after running the commands listed above.

Next, retrieve the PEM certificate information from the repository manager:

----
openssl s_client -tls1 -connect localhost:8443
----

Copy certificate and save it to +nexus.pem+. To ensure the configuration is correct. verifying the .pem:

----
openssl verify nexus.pem
----

Update your +pip.conf+ as follows:

----
[global]
index = https://localhost:8443/repository/pypi-proxy/pypi
index-url = https://localhost:8443/repository/pypi-proxy/simple
cert = nexus.pem
----
////

[[pypi-browse-search]]
=== Browsing PyPI Repositories and Searching Packages

You can browse PyPI repositories in the user interface inspecting the components and assets and their details, as
described in <<browse-browse>>.

Searching for PyPI packages can be performed in the user interface as described in <<search-components>>. It 
finds all packages that are currently stored in the repository manager that have been proxied from an upstream 
repository and cached in the repository manager.

////
Second sentence edit for hosted docs
It finds all packages that are currently stored in the repository manager, either because they have been pushed 
to a hosted repository or they have been proxied from an upstream repository and cached in the repository manager.
////

From the command line you can search available PyPI packages defined in your configuration. This method is 
limited to pip (+pip.conf+). To search, run:

----
pip search example-package
----