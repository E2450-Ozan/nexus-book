[[sites]]
== Raw Repositories, Maven Sites and More

Nexus includes support for hosting, proxying and grouping static
websites - the 'raw' format. Hosted repositories with this format can
be used to store and provide a Maven-generated website. Proxy
repositories can subsequently proxy them in other servers. The 'raw'
format can also be used for other resources than HTML files exposed by
straight HTTP like browsable directory structures.

This chapter details the process of configuring raw repositories, 
configuring a simple Maven project to publish a Maven-generated
project site and other use cases for raw repositories.

=== Creating a Hosted Raw Repository

To create a raw repository for hosting a static website, you simply
create a new repository using the 'raw (hosted)' recipe as documented
in <<admin-repositories>>.

For the Maven site example in <<maven-site>>, set the 'Name' to `site`
and change the 'Deployment policy' to 'Allow redeploy'.

After creating the new raw repository, it appears in the list of
repositories with the name 'site' provided earlier. The 'URL' in the
list can be used for deployment and access usage.

[[maven-site]]
=== Creating and Deploying a Maven Site

==== Creating a New Maven Project

In this section, you are be creating a simple Maven project with a
simple website that can be published to a hosted raw repository. 

The following steps can be used to create a new Maven project:

* Run the command +mvn archetype:generate+ in a command line interface
* Confirm the first prompt using the default selection (number will
  vary)
* Confirm the default selection for the archetype version
* Set the groupId to `org.sonatype.books.nexus`
* Set the artifactId to `sample-site`
* Confirm the default version of `1.0-SNAPSHOT`
* Confirm the preset package of `org.sonatype.books.nexus`
* Confirm the properties configuration

After running the +archetype:generate+ command, you
will have a new project in a `sample-site` directory.

==== Configuring Maven for Site Deployment

To deploy a site to a raw repository in Nexus, you need to configure
the project's `distributionManagement`, add site deployment
information, and then update your Maven settings to include the
appropriate credentials.

Add the following section to `sample-site/pom.xml` before the
dependencies element.  This section tells Maven where to publish
the Maven-generated project website:

[[ex-sites-dist-man]]
.Distribution Management for Site Deployment to Nexus
----
<distributionManagement>
  <site>
    <id>nexus</id>
    <url>dav:http://localhost:8081/repository/site/</url>
  </site>
</distributionManagement>
----

The URL in the distribution management is not parameterized, which
means that any redeployment overwrites old content and potentially
leaves old stale files behind. To have a new deployment directory for
each version, change the URL to a parameterized setup or change the
whole URL between deployments.

If you combine this approach with a redirector or a static page that
links to the different copies of your site, you can e.g., maintain
separate sites hosting your javadoc and other documentation for
different releases of your software.

The dav protocol used by for deployment to Nexus requires that you add
the implementing library as a dependency of the Maven site plugin in
your Maven project:

[[ex-sites-dav]]
.Dependency for the Maven Site Plugin for DAV Support
----

<build>
    <plugins>
      <plugin>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.4</version>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.wagon</groupId>
            <artifactId>wagon-webdav-jackrabbit</artifactId>
            <version>2.8</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>
----

==== Adding Credentials to Your Maven Settings

When the Maven site plugin deploys a site to Nexus, it needs to supply
the appropriate deployment credentials to Nexus. To configure this,
you need to add credentials to your Maven settings.  Edit your
`~/.m2/settings.xml` file and add the following server configuration
to the servers element. 

[[ex-sites-deploy-credentials]]
.Configuring Deployment Credentials for Nexus Site Deployment
----
<settings>
  <servers>
    <server>
      <id>nexus</id>
      <username>admin</username>
      <password>admin123</password>
    </server>
  </servers>
</settings>
----

NOTE: <<ex-sites-deploy-credentials>> uses the default `admin`
username and password. For real world usage you would use the username
and password of a user with the privilege to write to the target
repository. 

////
TBD 

reference security chapter once done and make sure use case below is
covered there in more generic terms

To successfully deploy a site to Nexus, make sure that the 
user has the appropriate role and permissions. To add the site
deployment role to the deployment user, click on 'Users' under the
'Security' section of the 'Nexus' menu, and click on the 'Add' button
in the 'Role Management' section. This will trigger the display of the
'Add Roles' dialog that will allow you to apply a filter value of
+site+ to locate the applicable roles as shown in
<<fig-sites-add-role>>.

Check the box beside the "Repo: All Site Repositories (Full Control)"
role in the list and press OK in the dialog. After the dialog closes,
you should see the new role in the 'Role Management' section. Click on
the 'Save' button to update the roles for the deployment user. The
deployment user now has the ability to publish sites to a Maven site
repository.
////

==== Publishing a Maven Site to Nexus

To publish the site to the hosted raw repository in Nexus, run `mvn
site-deploy` from the `sample-site` directory.  The Maven site plugin
will deploy this site to Nexus using the credentials stored in your
Maven settings:

.Sample Maven Log from Deploying a Site to Nexus
----
$ mvn site-deploy
[INFO] Scanning for projects...
[INFO] --------------------------
[INFO] Building sample-site 1.0-SNAPSHOT
...
[INFO] --- maven-site-plugin:3.4:site (default-site) @ sample-site ---
...
[INFO] Generating "About" report.
...
[INFO] --- maven-site-plugin:3.4:deploy (default-deploy) @ sample-site ---
http://localhost:8081/repository/site/ - Session: Opened
[INFO] Pushing /Users/manfred/training/sample-site/target/site
[INFO]    >>> to http://localhost:8081/repository/site/./
...
 Transfer error: java.io.IOException: Unable to create collection: http://localhost:8081/repository/; status code = 400
Uploading: .//project-summary.html to http://localhost:8081/repository/site/

##http://localhost:8081/repository/site/./project-summary.html - Status code: 201

Transfer finished. 5078 bytes copied in 0.075 seconds
http://localhost:8081/repository/site/ - Session: Disconnecting
http://localhost:8081/repository/site/ - Session: Disconnected
...
[INFO] BUILD SUCCESS
...
----

Once the site has been published, you can load the site in a browser
by going to http://localhost:8081/repository/site/site/index.html[http://localhost:8081/repository/site/index.html].

.Maven-Created Sample Site Hosted in Nexus Raw Repository
image::figs/web/sites-sample-site.png[scale=60]


TIP: A complete Maven project example can be found in the https://github.com/sonatype/nexus-book-examples/tree/nexus-3.0.x/maven/simple-project[Nexus book examples].

=== Proxying and Grouping Raw Repositories

Beside the common use case using hosted raw repositories for site
deployments, Nexus supports proxying as well as grouping of raw
repositories.

The creation follows the same process as documented in
<<admin-repositories>> using the 'raw (proxy)' and the 'raw (group)'
recipes.

A raw proxy repository can be used to proxy any static website. This
includes a Maven site hosted in a raw repository in another
Nexus server or a plain static website hosted on another webserver
like Apache httpd. It can also be used to proxy directory structures
exposed via a webserver to distribute archives such as
`https://nodejs.org/dist/`.

Grouping raw repositories is possible and can e.g., be used to
aggregate mutliple site repositories. However keep in mind that the
raw format does not contain any logic to resolve conflicts between the
different repositories in the group.

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
