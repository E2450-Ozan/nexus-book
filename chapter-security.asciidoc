[[security]]
== Security
{inall}

[[security-introduction]]
=== Introduction

{pro} and {oss} uses role-based access control that gives administrators very fine-grained control over user
rights to

* read from a repository or a subset of repositories,
* administer the repository manager or specific parts of the configuration,
* access specific parts of the user interface,
* deploy to repositories or even just specific sections of a repository.

The default configuration ships with roles and users with a standard set of permissions. As your security
requirements evolve, you will likely need to customize security settings to create protected repositories for
multiple departments or development groups. {pro} and {oss} provides a security model that can adapt to any
scenario.

TIP: The default administrator user give you full control and uses the username 'admin' and the password 'admin123'.

This chapter covers all aspects of security of the repository manager including

* user account and access right management related to user interface as well as to component access documented in
  <<privileges>>, <<roles>> and <<users>>,
* selection of security backend systems documented <<realms>> including the built-in system as well as <<ldap, LDAP>>,
////
, Atlassian Crowd and others
////
* management of SSL certificates from remote repositories, SMTP and LDAP servers documented in <<ssl>>.

////
TBD add more as applicable
////

Security-related configuration can be performed with the feature views available via the 'Security' section of the
'Administration' main menu. Many of the features shown in this section are only available to users with the
necessary privileges to access them.

The role-based access control system is backed by different authentication and authorizations systems as
documented in <<realms>> and designed around the following security concepts:

Privileges:: <<privileges, Privileges>> are rights to read, update, create, or manage resources and perform
operations related to the user interface as well as the components managed by the repository manager in the
various repositories. The repository manager ships with a set of core privileges that cannot be modified.
////
 and you can create new privileges to allow for fine-grained targeting of role and user permissions for specific
repositories.
////

Roles:: Privileges can be grouped into collections called <<roles, roles>> to make it easier to define privileges
common to certain classes of users. For example, administrative users will all have similar sets of permissions.
Instead of assigning individual privileges to individual users, you use roles to make it easier to manage users
with similar sets of privileges. A role has one or more privileges and/or one or more roles.

Users:: <<users, Users>> can be assigned one or more roles, and model the individuals who will be logging into the
user interface and read, deploy, or manage repositories as well as connect from client tools such at Apache Maven.

[[realms]]
=== Realms
{inall}

The feature view for security realms administration displayed in <<fig-realms>> allows you to activate and prioritize
security realms used for authentication and authorization by adding them to the 'Active' list on the right and placing
them higher or lower on the list.

[[fig-realms]]
.Security Realms Administration
image::figs/web/realms.png[scale=60]

Effectively, this configuration determines what authentication realm is used to grant a user access and the order the
realms are used.

Nexus Authenticating Realm and Nexus Authorizing Realm:: These are the built-in realms used by default. They allow
the repository manager to manage security setup without additional external systems.

LDAP Realm:: This realm identifies external storage in an LDAP system such as Microsoft ActiveDirectory,
ApacheDS, OpenLDAP and many others.

////
 with details documented in
<<ldap>>.
////

////
Crowd Realm:: This realm identifies external storage in an Atlassian Crowd system.

 with details documented in <<crowd>>.
////

Rut Auth Realm:: This realm uses an external authentication in any system with the user authorization passed to
the repository manager in a HTTP header field with details documented in <<remote-user-token>>.

////
The 'User Token Realm' is required for user token support documented in <<config-sect-usertoken>> and
////

NuGet API-Key Realm:: This realm is required for deployments to nuget-format repositories as documented in <<nuget>>.

WARNING: Removing all realms from the 'Active' section prevents access to the repository manager for any user
including any administrative access and has to be avoided.

[[privileges]]
=== Privileges
{inall}

You can access the configuration of privileges via the 'Privileges' menu item in the 'Security' submenu in the
'Administration' main menu.

The repository manager use a number of types of privileges:

application:: privileges related to the user interface and related functionality.
repository-admin:: privileges related to the administration and configuration of a specific repository separated
into access to '*' (all), 'add', 'browse', 'delete', 'edit' and 'read'.
repository-view:: privileges controlling access to the content of a specific repository separate into access to
'*' (all), 'add', 'browse', 'delete', 'edit' and 'read'.

Both 'repository-admin' as well as 'repository-view' privileges are automatically created and deleted by the
repository manager, when repositories are created or deleted.

The list of privileges displayed in <<fig-privileges-list>> displays an icon for the privilege 'type' as the first
column and then adds:

Name:: the internal identifier for the privilege

Description:: a human readable description of the purpose of the privilege

Type:: the aspect of the repository manager to which this privilege applies

Permission:: the internal permission definition as used by the embedded security framework

Further details are available after pressing on a specific row in the detail view.

[[fig-privileges-list]]
.List of Security Privileges
image::figs/web/privileges-list.png[scale=60]

[[roles]]
=== Roles
{inall}

Roles aggregate privileges into a related context and can, in turn, be grouped to create more complex roles.

The repository manager ships with a predefined 'admin' as well as an 'anonymous' role. These can be inspected in
the 'Roles' feature view accessible via the 'Roles' item in the 'Security' section of the 'Administration' main
menu. A simple example is shown in <<fig-roles-list>>. The list displays the 'Name' an 'Description' of the role
as well as the 'Source', which displays whether the role is internal ('Nexus') or a mapping to an external source
like LDAP.

[[fig-roles-list]]
.Viewing the List of Defined Roles
image::figs/web/roles-list.png[scale=60]

To create a new role, click on the 'Create role' button, select 'Nexus Role' and fill out the Role creation feature 
view shown in <<fig-roles-create>>.

[[fig-roles-create]]
.Creating a New Role
image::figs/web/roles-create.png[scale=60]

When creating a new role, you will need to supply a 'Role ID' and a 'Name' and optionally a 'Description'. Roles
are comprised of other roles and individual privileges. To assign a role or privilege to a role, drag and drop the
desired privileges from the 'Available' list to the 'Given' list under the 'Privileges' header. You can use the
'Filter' input to narrow down the list of displayed privileges and the arrow buttons to add or remove privileges.

The same functionality is available under the 'Roles' header to select among the 'Available' roles and add them to
the list of 'Contained' roles.

Finally press the 'Create Role' button to get the role created.

An existing role can be inspected and edited by clicking on the row in the list. This role-specific view allows
you to delete the role with the 'Delete role' button. The built-in roles are managed by the repository manager and
cannot be edited or deleted. The 'Settings' section displays the same section as the creation view as displayed in
<<fig-roles-create>>.

In addition to creating an internal role, the 'Create role' button allows you to create an 'External role mapping'
to an external authorization system configured in the repository manager such as 'LDAP'. This is something you
would do, if you want to grant every member of an externally managed group (such as an LDAP group) a number of
privileges and roles in the repository manager.

For example, assume that you have a group in LDAP named +scm+ and you want to make sure that everyone in the +scm+
group has administrative privileges.

Select 'External Role Mapping' and 'LDAP' to see a list of roles managed by that external realm in a dialog. Pick the
desired 'scm' group and confirm by pressing 'Create mapping'.

TIP: For faster access or if you cannot see your group name, you can also type in a portion or the whole name of the
group and it will limit the dropdown to the selected text.

Once the external role has been selected, it creates a linked role. You can then assign other roles and privileges to this new externally mapped role like you would do for any other role.

Any user that is part of the 'scm' group in LDAP, receives all the privileges defined in the created role allowing
you to adapt your generic role in LDAP to the repository manager-specific use cases you want these users to be
allowed to perform.

[[users]]
=== Users
{inall}

The repository manager ships with two users: 'admin' and 'anonymous'. The 'admin' user has all privileges and the
'anonymous' user has read-only privileges. The default password for the 'admin' user is 'admin123'.

The 'Users' feature view displayed in <<fig-users-list>> can be accessed via the 'Users' item in the 'Security' section
of the 'Administration' menu. The list shows the users 'User ID', 'First Name', 'Last Name' and 'Email' as well as what
security 'Realm' is used and if the accounts 'Status' is 'active' or 'disabled'.

[[fig-users-list]]
.Feature View with List of Users
image::figs/web/users-list.png[scale=50]

Clicking on a user in the list or clicking on the 'Create user' button displays the details view to edit or create the
account shown in <<fig-users-create>>. The 'ID' can be defined upon initial creation and remains fixed thereafter. In
addition you can specify the users 'First Name', 'Last Name' and 'Email' address. The 'Status' allows you to set an
account to be 'Disabled' or 'Active'.

The 'Roles' control allows you to add and remove defined <<roles, roles>> to the user and therefore control the
<<privileges,privileges>> assigned to the user. A user can be assigned one or more roles that in turn can include
references to other roles or to individual privileges.

[[fig-users-create]]
.Creating or Editing a User
image::figs/web/users-create.png[scale=60]

The 'More' button in the allows you to select the 'Change Password' item in the drop down. The password can be changed
in a dialog, provided the user is managed by the built-in security realm.

IMPORTANT: Ensure to change the password of the 'admin' user to avoid security issues. Alternatively create
other users with administrative rights and disable the default 'admin' user.

[[anonymous]]
=== Anonymous Access
{inall}

By default, the user interface as well as the repositories and the contained components are available to
unauthenticated users for read access. The 'Anonymous' feature view is available via the 'Anonymous' item in the
'Security' section of the 'Administration' main menu and shown in <<fig-anonymous>>.

The privileges available to these users are controlled by the roles assigned to the 'anonymous' user from the
'NexusAuthorizingRole'. By changing the privileges assigned to this user in the <<users, Users feature view>>.

[[fig-anonymous]]
.Configuring Anonymous Access
image::figs/web/anonymous.png[scale=60]

If you want to disable unauthenticated access to the repository manager entirely, you can uncheck the 'Allow
anonymous users to access the server' checkbox. The 'Username' and 'Realm' controls allow you to change the
details for the anonymous user. E.g. you might have a 'guest' account defined in your LDAP system and desire to
use that user for anonymous access.


[[ldap]]
=== LDAP
{inall}


[[ldap-introduction]]
==== Introduction 

{pro} and {oss} can use the Lightweight Directory Access Protocol (LDAP) for authentication via external systems
providing LDAP support such as Microsoft Exchange/Active Directory, http://www.openldap.org/[OpenLDAP],
https://directory.apache.org/apacheds/[ApacheDS] and others. The 'LDAP relam' provides the repository manager with
the capability to authenticate users against an LDAP server.  In addition to handling authentication, the
repository manager can be configured to map roles to LDAP user groups. If a user is a member of a LDAP group that
matches the ID of a role, the repository manager grants that user the matching role. In addition to this highly
configurable user and group mapping capability, the repository manager can augment LDAP group membership with
specific user-role mapping.

The repository manager can cache authentication information and supports multiple LDAP servers and user/group
mappings. Connection details to the LDAP server and the user/group mappings as well as specific account logins can
be tested directly from the user interface.

All these feature allow you to adapt to any specific LDAP usage scenario and take advantage of the central
authentication set up across your organization in all your repository managers.

[[ldap-sect-enabling]]
=== Enabling the LDAP Authentication Realm

In order to use LDAP authentication in the repository manager, you need to activate the 'LDAP realm':

- Navigate to the <<realms, Realms>> administration section
- Select the 'LDAP Realm' and add it to the list of 'Active' realms on the right
- Ensure that the 'LDAP Realm' is located beneath the 'Nexus Authenticating Realm' in the list
- Press 'Save'


TIP: We suggest to leave the 'Nexus Authenticating Realm' and the 'Nexus Authorizing Realm' activated so that the
repository manager can be used by 'anonymous', 'admin' and other users configured in this realm even with LDAP
authentication offline or unavailable. Any user account not found in the 'Nexus Authenticating Realm', will be
passed through to LDAP authentication.

[[ldap-sect-connecting]]
=== LDAP Connection and Authentication

In order to create and manage LDAP server configurations, press the 'Create connection' button to start a new 
entry. <<create-ldap-connection>> shows a simplified LDAP configuration for the repository manager 
configured to connect to an LDAP server running on localhost port 10389 using the search base of `ou=system`.

[[create-ldap-connection]]
.Create LDAP Connection Panel
image::figs/web/create-ldap-connection.png[scale=50]

The following parameters allow you to create an LDAP connection with the repository manager:

Name:: Enter a unique name for then new connection.

LDAP server address:: Create the format of your LDAP URL. Enter 'Protocol', 'Hostname', and 'Port'.

Protocol;; Valid values in this drop-down are +ldap+ and +ldaps+ that correspond to the Lightweight Directory 
Access Protocol and the Lightweight Directory Access Protocol over SSL.

Hostname;; The hostname or IP address of the LDAP.

Port;; The port on which the LDAP server is listening. Port 389 is the default port for the +ldap+ protocol, and 
port 636 is the default port for the +ldaps+.

Search base:: The search base is the Distinguished Name (DN) to be appended to the LDAP query. The search base usually corresponds to the domain name of an organization. For example, the search base on the Sonatype LDAP server could be +dc=sonatype,dc=com+.

Authentication Method:: The repository manager provides four distinct authentication methods to be used when connecting to the LDAP Server:

Simple Authentication;; Simple authentication is not recommended for production deployments not using the secure ldaps protocol as it sends a clear-text password over the network.

Anonymous Authentication;; Used when the repository manager only needs read-only access to non protected entries and attributes when binding to the LDAP.

Digest-MD5;; This is an improvement on the CRAM-MD5 authentication
method. For more information, see http://www.ietf.org/rfc/rfc2831.txt[http://www.ietf.org/rfc/rfc2831.txt].

CRAM-MD5;; The Challenge-Response Authentication Method (CRAM) is based on the HMAC-MD5 MAC algorithm. In this authentication method, the server sends a challenge string to the client. The client responds with a username followed by a Hex digest that the server compares to an expected value. For more information, see http://www.faqs.org/rfcs/rfc2195.html/[RFC-2195].

For a full discussion of LDAP authentication approaches, see
http://www.ietf.org/rfc/rfc2829.txt[http://www.ietf.org/rfc/rfc2829.txt] and
http://www.ietf.org/rfc/rfc2251.txt[http://www.ietf.org/rfc/rfc2251.txt].

SASL Realm:: The Simple Authentication and Security Layer (SASL) realm used to connect. It is only available if the authentication method is Digest-MD5 or CRAM-MD5.

Username:: Username of an LDAP user with which to connect (or bind). This is a Distinguished Name of a user who has read access to all users and groups.

Password:: Password for an administrative LDAP user

To test your connection to the external LDAP server click 'Verify Connection'. If set up is successful, click 'Next' to go the next steps.

[[ldap-sect-usergroup]]
=== User and Group Mapping

The LDAP connection panel in {oss} contains sections to manage user and group element mapping. This configuration 
section is the default next step after you create the LDAP connection. It is separate panel called 'Choose Users 
and Groups'. These configuration sections are located in a sub-section called 'Choose Users and Groups' in 
{pro}. This panel provided a 'Configuration template' drop-down displayed in 
<<security-ldap-user-group-temp-config>> that will adjust the rest of the user interface based on your 
template selection.

[[security-ldap-user-group-temp-config]]
.Configuration Template for Users and Groups
image::figs/web/security-ldap-user-group-temp-config[scale=50]

The following parameters allow you to configure your user and group elements with the repository manager:

Base DN:: Corresponds to the Base DN containing user entries. This DN is relative to the Search Base. For 
example, if your users are all contained in +ou=users,dc=sonatype,dc=com+ and you specified a Search Base of 
+dc=sonatype,dc=com+, you would use a value of +ou=users+.

User Subtree:: Check the box if 'True'. Uncheck if 'False'. Values are 'True' if there is a tree below the Base 
DN that can contain user entries and 'False' if all users are contain within the specified Base DN. For example, 
if all users are in ou=users,dc=sonatype,dc=com this field should be False. If users can appear in organizational 
units within organizational units such as +ou=development,ou=users,dc=sonatype,dc=com+, this field should be True.

Object Class:: This value defaults to inetOrgPerson which is a standard object class defined in 
http://www.faqs.org/rfcs/rfc2798.html/[RFC-2798]. This Object Class (inetOrgPerson) contains standard fields such 
as mail, uid. Other possible values are posixAccount or a custom class.

User ID Attribute:: This is the attribute of the Object class that supplies the User ID. The repository manager 
uses this attribute as the User ID.

Real Name Attribute:: This is the attribute of the Object class that supplies the real name of the user. The 
repository manager uses this attribute when it needs to display the real name of a user.

E-Mail Attribute:: This is the attribute of the Object class that supplies the email address of the user. The 
repository manager uses this attribute when it needs to send an email to a user.

Password Attribute:: This control is only available in {oss}. It can be used to configure the Object class, which 
supplies the password ("userPassword"). If this field is blank the user will be authenticated against a bind with 
the LDAP server.

To map your LDAP groups as roles, click the check box to continue.

The Group Type drop-down determines which fields are available in the user interface. Groups are generally one of 
two types in LDAP systems - static or dynamic. A static group contains a list of users. A dynamic group is a list 
of groups to which user belongs.

Static groups are configured with the following parameters:

Base DN:: This field is similar to the Base DN field described for 'User Element Mapping'. If your groups were 
defined under +ou=groups,dc=sonatype,dc=com+, this field would have a value of +ou=groups+.

Group Subtree:: This field is similar to the User Subtree field described for User Element Mapping. If all groups are defined under the entry defined in Base DN, this field should be false. If a group can be defined in a tree of organizational units under the Base DN, then the field should be true.

Object Class:: This value defaults to groupOfUniqueNames which is a standard object class defined in http://www.faqs.org/rfcs/rfc4519.html/[RFC-4519]. This default ('groupOfUniqueNames') is simply a collection of references to unique entries in an LDAP directory and can be used to associate user entries with a group. Other possible values are posixGroup or a custom class.

Group ID Attribute:: Specifies the attribute of the Object class that specifies the Group ID. If the value of this field corresponds to the ID of a role, members of this group will have the corresponding privileges. Defaults to common name (+cn+).

Group Member Attribute:: Specifies the attribute of the Object class which specifies a member of a group. A groupOfUniqueNames has multiple uniqueMember attributes for each member of a group. Defaults to uniqueMember.

Group Member Format:: This field captures the format of the Group Member Attribute, and is used by the repository manager to extract a username from this attribute. For example, if the Group Member Attribute has the format +uid=brian,ou=users,dc=sonatype,dc=com+, then the Group Member Format would be +uid=$username,ou=users,dc=sonatype,dc=com+. If the Group Member Attribute had the format +username+, then the Group Member Format would be +$username+.

If your installation does not use Static Groups, you can configure LDAP Integration to refer to an attribute on the User entry to derive group membership. To do this, select Dynamic Groups in the Group Type field in Group Element Mapping.

Once you have configured the User and Group Settings you can check the correctness of your user mapping by pressing the "Verify user mapping" at the end of page.

The repository manager provides you with the ability to test a user login directly. To test a user login, go to the User and Group Settings tab for a server listed in the Enterprise LDAP panel. Scroll to the bottom of the form, and you should see a button named "Verify login".

If you click on "Verify Login", you will then be presented with the login credentials dialog shown below. You can use this dialog to login as an LDAP user and test the user and group mapping configuration for a particular server. This feature allows you to test user and group mapping configuration directly and to quickly diagnose and address difficult authentication and access control issues via the administrative interface.

After your LDAP users and groups are verfied, go to roles to add external roles.

[[remote-user-token]]
=== Authentication via Remote User Token
{inall}

The repository manager allows integration with external security systems that can pass along authentication of a
user via the +Remote_User+ HTTP header field for all requests - Remote User Token 'Rut' authentication. This
typically affects all web application usage in a web browser.

These are either web-based container or server-level authentication systems like
http://shibboleth.net/[Shibboleth]. In many cases, this is achieved via a server like
http://httpd.apache.org/[Apache HTTPD] or http://nginx.org/[nginx] proxying the repository manager. These servers
can in turn defer to other authentication storage systems e.g., via the http://web.mit.edu/kerberos/[Kerberos]
network authentication protocol. These systems and setups can be described as Central Authentication Systems CAS
or Single Sign On SSO.

From the users perspective, he/she is required to login into the environment in a central login page that then
propagates the login status via HTTP headers. the repository manager simply receives the fact that a specific user
is logged in by receiving the username in a HTTP header field.

The HTTP header integration can be activated by adding and enabling the 'Rut Auth' capability as documented in
<<admin-system-capabilities>> and setting the 'HTTP Header name' to the header populated by your security
system. Typically, this value is `REMOTE_USER`, but any arbitrary value can be set. An enabled capability automatically
causes the 'Rut Auth Realm' to be added to the 'Active' realms in the 'Realms' configuration described in <<realms>>.

When an external system passes a value through the header, authentication will be granted and the value will be
used as the user name for configured authorization scheme. For example, on a default installation with the
internal authorization scheme enabled, a value of 'admin' would grant the user the access rights in the user
interface as the 'admin' user.

A seamless integration can be set up for users if the external security system is exposed via LDAP and configured
in the repository manager as LDAP authorization realm combined with external role mappings and in parallel the
sign-on is integrated with the operating system sign-on for the user.

[[ssl]]
=== Configuring SSL


Using Secure Socket Layer (SSL) communication with the repository manager is an important security feature and a
recommended best practice. Secure communication can be inbound or outbound.

Outbound client communication may include integration with

* a remote proxy repository over HTTPS - documented in <<admin-repositories>>)
* SSL/TLS secured servers - e.g. for SMTP/email integration documented in <<admin-system-emailserver>>
* LDAP servers configured to use LDAPS,
* specialized authentication realms such as the Crowd realm.

Inbound client communication includes

* web browser HTTPS access to the user interface,
* tool access to repository content,
* and manual or scripted usage of the REST APIs.

[[ssl-proxy-repo]]
==== Outbound SSL - Trusting SSL Certificates of Remote Repositories

{inall}

When the SSL certificate of a remote proxy repository is not trusted, the repository may be automatically blocked or
outbound requests fail with a message similar to 'PKIX path building failed'.

The 'Proxy' configuration for each proxy repository documented in <<admin-repository-repositories>> includes a section
titled 'Use the Nexus truststore'. It allows you to manage the SSL certificate of the remote repository and solves 
these problems. It is only displayed, if the remote storage uses a HTTPS URL.

The 'View certificate' button triggers the display of the SSL 'Certificate Details' dialog. An example is shown in
<<fig-ssl-certificate-details-dialog>>.

[[fig-ssl-certificate-details-dialog]]
.Certificate Details Dialog to Add an SSL to the Nexus Truststore
image::figs/web/ssl-certificate-details-dialog.png[scale=50]

Use the 'Certificate Details' dialog when the remote certificate is not issued by a well-known public certificate
authority included in the default Java trust store. This specifically also includes usage of self-signed certificates
used in your organization. To confirm trust of the remote certificate, click the 'Add certificate to truststore' button
in the dialog.  This feature is analogous to going to the <<fig-ssl-certificates-list, SSL Certificates>> user 
interface and using the 'Load certificate' button found there as described in <<ssl-certificates>>. If the certificate 
is already added, the button can undo this operation and will read 'Remove certificate from trust store'.

The checkbox labelled 'Use certificates stored in Nexus to connect to external systems' is used to confirm that
the repository manager should consult the internal truststore as well as the JVM truststore when confirming trust
of the remote repository certificate. Without adding the certificate to the private truststore and enabling the
checkbox, the repository will not trust the remote.

The default JVM truststore of the JVM installation used to run the repository manager and the private truststores
are merged. The result of this merge is used to decide about the trust of the remote server. The default Java
truststore already contains public certificate authority trust certificates. If the remote certificate is signed
by one of these authorities, then explicitly trusting the remote certificate will not be needed.

WARNING: When removing a remote trusted certificate from the truststore, a repository manager restart is required
before a repository may become untrusted.

[[ssl-certificates]]
==== Outbound SSL - Trusting SSL Certificates Globally

{inall}

The repository manager allows you to manage trust of all remote SSL certificates in a centralized user
interface. Use this interface when you wish to examine all the currently trusted certificates for remote
repositories, or manage certificates from secure remotes that are not repositories.

Access <<fig-ssl-certificates-list, the feature view for SSL Certificates administration>> by selecting the 'SSL
Certificates' menu items in the 'Security' submenu in the 'Administration' main menu.

[[fig-ssl-certificates-list]]
.SSL Certificates Administration
image::figs/web/ssl-certificates-list.png[scale=50]

The list shows any certificates that are already trusted. Clicking on an individual row allows you to inspect the
certificate.  This detail view shows further information about the certififcate including 'Subject', 'Issuer' and
'Certificate' details. The 'Delete certificate' button allows you to remove a certificate from the truststore.

The button 'Load certificate' above the list of certificates can be used to add a new certificate to the truststore by
loading it directly from a server or using a PEM file representing the certificate.

The common approach is to choose 'Load from server' and enter the full +https://+ URL of the remote site, e.g,
`https://repo1.maven.org`. The repository manager will connect using HTTPS and use the HTTP proxy server settings
if applicable. When the remote is not accessible using +https://+, only enter the host name or IP address,
optionally followed by colon and the port number. For example: +example.com:8443+ . In this case the repository
manager will attempt a direct SSL socket connection to the remote host at the specified port. This allows you to
load certificates from SMTP or LDAP servers, if you use the correct port.

Alternatively you can choose the 'Paste PEM' option to configure trust of a remote certificate. Copy and paste the
Base64 encoded X.509 DER certificate to trust. This text must be enclosed between lines containing `-----BEGIN
CERTIFICATE-----` and `-----END CERTIFICATE-----` .

Typically this file is supplied to you by the certificate owner. An example method to get the encoded X.509 certificate
into a file on the command line using +keytool+ is:

----
keytool -printcert -rfc -sslserver repo1.maven.org > repo1.pem
----

The resulting `repo1.pem` file contains the encoded certificate text that you can cut and paste into the dialog in
the user interface. An example of inserting such a certificate is shown in <<fig-ssl-pem>>.

[[fig-ssl-pem]]
.Providing a Certificate in PEM Format
image::figs/web/ssl-pem.png[scale=50]

If the repository manager can successfully retrieve the remote certificate or decode the pasted certificate, the
details will be shown allowing you to confirm details as shown in <<fig-ssl-add-server>>. Please review the
displayed information carefully before clicking 'Add Certificate' to establish the truststore addition.

[[fig-ssl-add-server]]
.Certificate Details Displayed after Successful Retrieval or Parsing
image::figs/web/ssl-add-server.png[scale=50]

In some organizations, all of the remote sites are accessed through a globally configured proxy server which rewrites
every SSL certificate. This single proxy server is acting as a private certificate authority. In this case, you can
https://support.sonatype.com/entries/83303437[follow special instructions for trusting the proxy server root
certificate], which can greatly simplify your certificate management duties.

==== Outbound SSL - Trusting SSL Certificates Using Keytool

{inall}

Managing trusted SSL certificates from the command line using
http://docs.oracle.com/javase/8/docs/technotes/tools/index.html#security[keytool] and system properties is an
alternative and more complex option than using the SSL certificate management features of the repository manager.

Before you begin the process of trusting a certificate from the command line you will need:

* a basic understanding of http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html[SSL
  certificate technology and how the Java VM implements this feature]

* command line access to the host operating system and the 'keytool' program

* network access to the remote SSL server you want to trust from the host running the repository manager. This
  must include any HTTP proxy server connection details.

If you are connecting to servers that have certificates which are not signed by a public CA, you will need to complete
these steps:

. Copy the default JVM truststore file (`$JAVA_HOME/jre/lib/security/cacerts`) to a specific location for editing.

. Import additional trusted certificates into the copied truststore file.

. Configure JSSE system properties for the repository manager process so that the custom truststore is consulted
  instead of the default file.

Some common commands to manually trust remote certificates can be found in our
https://sonatype.zendesk.com/entries/95353268-SSL-Certificate-Guide#common-keytool-commands[SSL Certificate Guide].

After you have imported your trusted certificates into a truststore file, you can add the JVM parameters configuring 
the truststore file location and password as separate configuration lines into the file `etc/system.properties`.
----
javax.net.ssl.trustStore=<truststore>
javax.net.ssl.trustStorePassword=<truststore_password>
----

Once you have added the properties shown above, restart the repository manager and attempt to proxy a remote
repository using the imported certificate. The repository manager will automatically register the certificates in
the truststore file as trusted.

[[ssl-inbound]]
==== Inbound SSL - Configuring to Serve Content via HTTPS

{inall}

Providing access to the user interface and content via HTTPS is a best practice.

You have two options:

* Using a separate reverse proxy server in front of the repository manager to manage HTTPS
* Configure the repository manager itself to serve HTTPS directly

===== Using A Reverse Proxy Server

A common approach is to access the repository manager through a dedicated server which answers HTTPS requests on
behalf of the repository manager - these servers are called reverse proxies or SSL/TLS terminators. Subsequently
requests are forwarded to the repository manager via HTTP and responses received via HTTP are then sent back to
the requestor via HTTPS.

There are a few advantages to using these which can be discussed with your networking team. For example, the
repository manager can be upgraded/installed without the need to work with a custom JVM keystore. The reverse
proxy could already be in place for other systems in your network. Common reverse proxy choices are Apache httpd,
nginx, Eclipse Jetty or even dedicated hardware appliances. All of them can be configured to serve SSL content,
and there is a large amount of reference material available online.

////
TBD - add link to reverse proxy setup doc once its done
////

.Serving SSL Directly

The second approach is to use the Eclipse Jetty instance that is distributed with the repository manager to accept
HTTPS connections.

[[enable-https]]
===== How to Enable the HTTPS Connector

. Create a Java keystore file at `$install-dir/etc/ssl/keystore.jks` which contains the Jetty SSL certificate
  to use.  Instructions are available on the
  http://www.eclipse.org/jetty/documentation/current/configuring-ssl.html[Eclipse Jetty documentation site].

. Edit `$install-dir/etc/org.sonatype.nexus.cfg`. Add a property on a new line `application-port-ssl=8443`. Change
  `8443` to be your preferred port on which to expose the HTTPS connector.

. Edit `$install-dir/etc/org.sonatype.nexus.cfg`. Change the `nexus-args` property comma delimited value to include
  `{karaf.etc}/etc/jetty-https.xml`. Save the file.

. Restart Nexus. Verify HTTPS connections can be established.

. Update the `Base URL` to use `https` in your repository manager configuration using the
<<admin-system-capabilities, Base URL capability>>.

TIP: This configuration process is available link:https://www.youtube.com/watch?v=YzcvU802Az8[as a video
demonstration].

[[enable-redirect-to-https]]
===== How to Redirect All Plain HTTP Requests to HTTPS

Some organizations need to remind their users that Nexus should only be used over HTTPS - redirecting HTTP
requests to HTTPS can help.

. Follow all the steps under <<enable-https,How to Enable the HTTPS Connector>>. Make sure the `nexus-args`
  property value still includes the reference to `{karaf.etc}/jetty-http.xml`

. Edit `$install-dir/etc/org.sonatype.nexus.cfg`. Change the `nexus-args` property comma delimited value to include
  `{karaf.etc}/jetty-http-redirect-to-https.xml`. Save the file.

. Restart Nexus. Verify all plain HTTP requests get redirected to the equivalent HTTPS url.

TIP: Redirecting HTTP requests is not recommended because it introduces implied security and creates increased
network latency. Clients which send Basic Authorization headers preemptively may unintentionally expose
credentials in plain text.

[[disable-http]]
===== How to Disable the HTTP Connector

. Edit `$install-dir/etc/org.sonatype.nexus.cfg`. Change the `nexus-args` property comma delimited value to not
  include `{karaf.etc}/jetty-http.xml`. Save the file.

. Restart Nexus. Verify plain HTTP requests are no longer serviced.


////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
