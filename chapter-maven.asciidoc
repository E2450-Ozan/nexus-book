[[maven]]
== Maven Repositories with Apache Maven and Other Tools
{inall}

[[maven-introduction]]
=== Introduction

Historically {pro} started as a repository manager supporting the Maven repository format. While it supports many
other repository formats now, the Maven repository format is still the most common and well supported format for
build and provisioning tools running on the JVM and beyond.

This chapter shows example configurations for using {pro} with a Maven and number of other tools. The setups take
advantage of the repository manager merging many repositories and exposing them via a repository
group. Configuring the repositories and the repository groups is documented in the chapter in addition to the
configuration used by specific tools.

=== Maven Repository Format

tbd

explain format and also talk about strict vs lax (Layout policy) as well as release vs snapshot (Versions policy).

=== Proxying Maven Repositories

A default installation of {pro} or {oss} includes a proxy repository configured to access the Central Repository.
To reduce duplicate downloads and improve download speeds for your developers and CI servers, you should proxy the
all other remote repositories as well.

To proxy an external Maven repository, you simply create a new repository using the recipe 'maven2 (proxy)' as documented in
<<admin-repositories>>. 

Minimal configuration steps are:

- Define 'Name'
- Define URL for 'Remote storage' e.g. `https://repo1.maven.org/maven2/`
- Select a 'Blob store' for 'Storage'

This creates a repository using the a 'Release' 'Version policy' and a 'Strict' 'Layout policy'. 


=== Hosting Maven Repositories


A hosted repository for NuGet can be used to upload your own packages as well as third-party packages. The
repository manager includes a hosted NuGet repository named 'maven2-hosted' by default.

////
TBD
 It is good practice to
create two separate hosted repositories for these purposes.
////

To create another NuGet hosted repository, simply create a new 'maven2 (hosted)' repository. An example
configuration from the default 'maven2-hosted' repository is displayed in
<<fig-nuget-hosted-releases-configuration>>.

[[fig-nuget-hosted-releases-configuration]]
.Example Configuration for a NuGet Hosted Repository
image::figs/web/nuget-hosted-releases-configuration.png[scale=50]

The NuGet feed is immediately updated as packages are deployed or deleted from the host repository.

A private npm registry can be used to upload your own packages as well as third-party packages. You can create a
private npm registry by setting up a hosted repository with the npm format in the repository manager. It is good
practice to create two separate hosted repositories for these purposes.

To create a hosted repository with npm format, simply create a new 'maven2 (hosted)' as documented in
<<admin-repositories>>.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blob store' for 'Storage'

The npm registry information is immediately updated as packages are deployed or deleted from the repository.


=== Grouping Maven Repositories

A repository group is the recommended way to expose all your npm registries repositories from the repository
manager to your users, without needing any further client side configuration. A repository group allows you to
expose the aggregated content of multiple proxy and hosted repositories with one URL to npm and other tools. This
is possible for npm repositories by creating a new 'npm (group)' as documented in <<admin-repositories>>.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blob store' for 'Storage'
- Add npm repositories to the 'Members' list in the desired order

A typical, useful example would be to group the proxy repository that: proxies the npm registry, a npm, hosted
repository with internal software packages and another npm, hosted repository with third-party packages.

Using the 'URL' of the repository group as your npm repository URL in your client tool will give you access to the
packages in all three repositories with one URL. Any new packages added as well as any new repositories added to
the group will automatically be available.


A repository group is the recommended way to expose all your NuGet repositories from the repository manager to
your users, without needing any further client side configuration. A repository group allows you to expose the
aggregated content of multiple proxy and hosted repositories with one URL to your tools.

{pro} and {oss} includes a 'nuget-group' repository group by default. This typical, useful example groups the
'nuget.org-proxy' proxy repository that proxies the NuGet Gallery and the 'nuget-hosted' hosted repository.

Using the 'URL' of the repository group can be used in your client tool and will give you access to the packages
in all repositories from the group with one URL. Any new packages added as well as any new repositories added to
the group will automatically be available.

=== Browsing and Searching Maven Repositories

You can browse Maven repositories in the user interface inspecting the components and assets and their details as
documented in <<browse-browse>>.

Searching can be performed in the user interface as described in <<search-components>>. This search finds all
components and assets that are currently stored in the repository manager, either because they have been deployed
to a hosted repository or they have been proxied from an upstream repository and cached in the repository manager.

TIP:: You can change the default column order in the search and browse user interfaces to the familiar order of
'Group' (groupId), 'Name' (artifactId) and 'Version'. Simple drag the 'Group' column from the middle to the left
using the header. This setting will be persisted as your preference in your web browser.

////
TBD

////
[[maven-sect-single-group]]
=== Configuring Apache Maven
f
To use repository manager with http://maven.apache.org/[Apache Maven], we configure Maven to check the repository
manager instead of the default, built-in connection to the Central Repository.

To do this, you add a +mirror+ configuration and override the default configuration for the +central+ repository
in your +~/.m2/settings.xml+ as shown in <<ex-maven-nexus-simple>>.

.Listing: Configuring Maven to Use a Single Repository Group
anchor:ex-maven-nexus-simple[Listing: Configuring Maven to Use a Single Repository Group]
----
<settings>
  <mirrors>
    <mirror>
      <!--This sends everything else to /public -->
      <id>nexus</id>
      <mirrorOf>*</mirrorOf>
      <url>http://localhost:8081/repository/maven-public/</url>
    </mirror>
  </mirrors>
  <profiles>
    <profile>
      <id>nexus</id>
      <!--Enable snapshots for the built in central repo to direct -->
      <!--all requests to nexus via the mirror -->
      <repositories>
        <repository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </repository>
      </repositories>
     <pluginRepositories>
        <pluginRepository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>
  <activeProfiles>
    <!--make the profile active all the time -->
    <activeProfile>nexus</activeProfile>
  </activeProfiles>
</settings>
----

In <<ex-maven-nexus-simple>>, we have defined a single profile called +nexus+. It configures a +repository+ and a
+pluginRepository+ with the id +central+ that overrides the same repositories in the super pom. The super pom is
internal to every Apache Maven install and establishes default values. These overrides are important since they
change the repositories by enabling snapshots and replacing the URL with a bogus URL. This URL is overridden by
the +mirror+ setting in the same settings.xml file to point to the URL of your single repository group. This
repository group can, therefore, contain release as well as snapshot components and Maven will pick them up.

The +mirrorOf+ pattern of +*+ causes any repository request to be redirected to this mirror and to your single
repository group, which in the example is the +public+ group.

It is possible to use other patterns in the mirrorOf field. A possible valuable setting is to use
+external:*+. This matches all repositories except those using +localhost+ or file based repositories. This is
used in conjunction with a repository manager when you want to exclude redirecting repositories that are defined
for integration testing. The integration test runs for Apache Maven itself require this setting.

More documentation about mirror settings can be found in the
http://maven.apache.org/guides/mini/guide-mirror-settings.html[mini guide on the Maven web site].

As a last configuration the +nexus+ profile is listed as an active profile in the +activeProfiles+ element.

////
TBD - add deploy docs
////


[[ant-ivy]]
=== Configuring Apache Ant and Apache Ivy

http://ant.apache.org/ivy/[Apache Ivy] is a dependency manager often used in Apache Ant builds. It supports the
Maven repository format and can be configured to download dependencies that can be declared in the +ivy.xml+
file. This configuration can be contained in the +ivysettings.xml+. A minimal example for resolving dependencies
from a repository manager running on +localhost+ is shown in <<ivysettings-minimal>>.

anchor:ivysettings-minimal[Listing: Minimal Ivy Configuration in an Ant file]
Listing: Minimal Ivy Configuration in an Ant file
----
<ivysettings>
  <settings defaultResolver="nexus"/>
  <property name="nexus-public" 
    value="http://localhost:8081/repository/maven-public/"/>
  <resolvers>
      <ibiblio name="nexus" m2compatible="true" root="${nexus-public}"/>
    </resolvers>
</ivysettings>
----

These minimal settings allow the +ivy:retrieve+ task to download the declared dependencies.

To deploy build outputs to a repository with the +ivy:publish+ task, user credentials and the URL of the target
repository have to be added to +ivysettings.xml+ and the makepom and publish tasks have to be configured and
invoked.

Full example projects can be found in the +ant-ivy+ folder of the
https://github.com/sonatype/nexus-book-examples[documentation examples project] in the +nexus-3.0.x+ branch. A
full build of the +simple-project+, including downloading the declared dependencies and uploading the build output
to the repository manager can be invoked with

----
cd ant-ivy/simple-project
ant deploy
----
////
tbd
Further details about using these example projects can be found in
<<eval>>.
////


[[ant-aether]]
=== Configuring Apache Ant and Eclipse Aether

http://www.eclipse.org/aether/[Eclipse Aether] is the dependency management component used in Apache Maven 3+. The
project provides Ant tasks that can be configured to download dependencies that can be declared in +pom.xml+ file
or in the Ant build fiel directly.

This configuration can be contained in your Ant +build.xml+ or a separate file that is imported. A minimal example
for resolving dependencies from a repository manager running on +localhost+ is shown in <<aether-minimal>>.

anchor:aether-minimal[Listing: Minimal Aether Configuration in an Ant file]
.Listing: Minimal Aether Configuration in an Ant file
----
<project xmlns:aether="antlib:org.eclipse.aether.ant" ....>
  <taskdef uri="antlib:org.eclipse.aether.ant" resource="org/eclipse/aether/ant/antlib.xml">
    <classpath>
      <fileset dir="${aether.basedir}" includes="aether-ant-tasks-*.jar" />
    </classpath>
  </taskdef>
  <aether:mirror id="mirror" url="http://localhost:8081/repository/maven-public/" mirrorOf="*"/>
...
</project>
----

These minimal settings allow the +aether:resolve+ task to download the declared dependencies.

To deploy build outputs to a repository with the +aether:deploy+ task, user authentication and details about the
target repositories have to be added .

Full example projects can be found in the +ant-aether+ folder of the
https://github.com/sonatype/nexus-book-examples[documentation examples project] in the +nexus-3.0.x+ branch. A
full build of the +simple-project+, including downloading the declared dependencies and uploading the build output
to the repository manager can be invoked with

----
cd ant-aether/simple-project
ant deploy
----

////
Further details about using these example projects can be found in <<eval>>.
////


[[gradle]]
=== Configuring Gradle

http://www.gradle.org/[Gradle] has a built in dependency management component that supports the Maven repository
format. In order to configure a Gradle project to resolve +dependencies+ declared in +build.gradle+ file, a +maven+
repository as shown in <<gradle-minimal>> has to be declared

anchor:gradle-minimal[Listing: Gradle Repositories Configuration]
Listing: Gradle Repositories Configuration
----
repositories {
    maven {
        url "http://localhost:8081/repository/maven-public/"
    }
}
----

These minimal settings allow Gradle to download the declared dependencies.

To deploy build outputs to a repository with the +uploadArchives+ task, user authentication can be declared in
e.g., +gradle.properties+:

----
nexusUrl=http://localhost:8081
nexusUsername=admin
nexusPassword=admin123
----

and then used in the uploadArchives task with a mavenDeployer configuration from the Maven plugin:

----
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${nexusUrl}/repository/maven-releases/") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
            snapshotRepository(url: "${nexusUrl}/repository/maven-snapshots") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
        }
    }
}
----


Full example projects can be found in the +gradle+ folder of the
https://github.com/sonatype/nexus-book-examples[documentation book examples project] in the +nexus-3.0.x+
branch. A full build of the +simple-project+, including downloading the declared dependencies and uploading the
build output to the repository manager can be invoked with

----
cd gradle/simple-project
gradle upload
----

////
Further details about using these example projects can be found in <<eval>>.
////

[[sbt]]
=== SBT

http://www.scala-sbt.org/[sbt] has a built in dependency management component and defaults to the Maven repository
format. In order to configure a sbt project to resolve dependencies declared in +build.sbt+ file, a +resolver+ as shown
below has to be declared


anchor:sbt-minimal[Listing: SBT Resolvers Configuration]
.Listing: SBT Resolvers Configuration
----
resolvers += "Nexus" at "http://localhost:8081/repository/maven-public/"
----

These minimal settings allow sbt to download the declared dependencies.

To deploy build outputs to a repository with the +publish+ task, user credentials can be declared in the
+build.sbt+ file:

----
credentials += Credentials("Nexus Repository Manager",
"nexus.scala-tools.org", "admin", "admin123")
----

and then used in the +publishTo+ configuration:

----
publishTo <<= version { v: String =>
  val nexus = "http://localhost:8081/" 
  if (v.trim.endsWith("SNAPSHOT"))
    Some("snapshots" at nexus + "repository/maven-snapshots")
  else
    Some("releases" at nexus + "repository/maven-releases")
----

Further documentation can be found in the http://www.scala-sbt.org/release/docs/Publishing.html[sbt documentation on
publishing].


[[leiningen]]
=== Leiningen

http://leiningen.org/[Leiningen] has a built in dependency management component and defaults to the Maven repository
format. As a build tool it is mostly used for projects using the Coljure language. Many libraries useful for these
projects are published to the Clojars repository. If you want to use these, you have to create two proxy repositories
with the remote URL +http://clojars.org/repo/+. This repository is mixed and you therefore have to create a release and
a snapshot proxy repository and then add both to the public group.

In order to configure a Leinigen project to resolve dependencies declared in the +project.clj+ file, a +mirrors+ section
overriding the built in +central+ and +clojars+ repositories as shown below has to be declared


anchor:leiningen-minima[Listing: Leiningen Configuration]
.Listing: Leiningen Configuration
----
  :mirrors {
    "central" {:name "Nexus"
                          :url "http://localhost:8081/repository/maven-public/"
                          :repo-manager true}
  #"clojars" {:name "Nexus"
                          :url ""http://localhost:8081/repository/maven-public/""
                          :repo-manager true}
                        }
----

These minimal settings allow Leiningen to download the declared dependencies.

To deploy build outputs to a repository with the +deploy+ command, the target repositories have to be add to
+project.clj+ as +deploy-repositories+. This avoids Leiningen checking for dependencies in these repositories,
which is not necessary, since they are already part of the +public+ repository group used in +mirrors+.

----
  :deploy-repositories [
    ["snapshots" "http://localhost:8081/repository/maven-snapshots"]
    ["releases" "http://localhost:8081/repository/maven-releases"]
  ]
----

User credentials can be declared in +~/.lein/credentials.clj.gpg+ or will be prompted for.

Further documentation can be found on the http://leiningen.org/[Leiningen website].

////
=== Plain HTTP Access

talk about simple download of stuff via HTTP Get with curl or wget or whatever

upload with POST as well maybe..


////

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
