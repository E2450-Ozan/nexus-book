[[nuget]]
== .NET Package Repositories with NuGet
{in} {oss-icon} {pro-icon} {proplus-icon}

With the creation of the http://nuget.org/[NuGet] project, a
package management solution for .NET developers has become
available. Similar to Apache Maven dependency management for Java developers,
NuGet makes it easy to add, remove, and update libraries and tools in
Visual Studio projects that use the .NET Framework. 

The project websites at http://www.nuget.org[www.nuget.org] and
http://nuget.codeplex.com[nuget.codeplex.com] host tool downloads and
detailed documentation as well as links to further resources and
provide a repository and features to upload your open source NuGet
packages. With the NuGet Gallery a repository of open source libraries
and tools is available and the need for repository management arises.

Nexus supports the NuGet repository format for hosted and proxy
repositories as well as exposing them to the client-side tools as a
repository group and has related repositories preconfigured.

Nexus and NuGet allow you to improve collaboration and control, while
speeding up .NET development, facilitating open source libraries and
sharing of internal component across teams. When you standardize on a
single repository for all your development and use it for internal
components as well, you will get all the benefits of Nexus when
working in the .NET architecture.

To share a library or tool with NuGet, you create a NuGet package and
store it in the Nexus-based NuGet repository. Similarly, you can use
packages others have created and made available in their NuGet
repositories by proxying them or downloading the packages and installing
them in your own hosted repository for third party packages.

The NuGet Visual Studio extension allows you to download the package
from the repository and install it in your Visual Studio project or
solution. NuGet copies everything and makes any required changes to
your project setup and configuration files. Removing a package will
clean up any changes as required.

[[nuget-nuget_proxy_repositories]]
=== NuGet Proxy Repositories

The NuGet Gallery is the common repository used by all package authors
and consumers. To reduce duplicate downloads and improve download
speeds for your developers and CI severs, you should proxy the NuGet
Gallery with Nexus. If you use other external repositories, you should
also proxy these. A default installation of Nexus has the NuGet
gallery set up as a proxy repository with the name 'nuget.org-proxy'.

To proxy another external NuGet repository, you simply create a new
'nuget (proxy)' as documented in <<admin-repositories>>. The 'Remote
Storage' has to be set to the URL of the remote repository you want to
proxy. 

The default configuration for proxying the NuGet Gallery is partially visible in
<<fig-nuget-proxy-org>>.

[[fig-nuget-proxy-org]]
.NuGet Proxy Repository Configuration for the NuGet Gallery
image::figs/web/nuget-proxy-org.png[scale=50]

By default, searches in NuGet proxy repositories in Nexus initiated by
a client like `nuget` or VisualStudio will be passed through to the
remote repositories. The search results are merged with internal
search results and included in an internally managed index. This
merging has to make some assumptions to generate component
counts. These counts should therefore be considered approximate
numbers.

[[nuget-nuget_hosted_repositories]]
=== NuGet Hosted Repositories

A hosted repository for NuGet can be used to upload your own
packages as well as third-party packages. Nexus includes a hosted
NuGet repository named 'nuget-hosted' by default.

////
TBD
 It is good practice to
create two separate hosted repositories for these purposes.
////

To create another NuGet hosted repository, simply create a new 'nuget
(hosted)' repository. An example configuration from the default
'nuget-hosted' repository is displayed in
<<fig-nuget-hosted-releases-configuration>>.

[[fig-nuget-hosted-releases-configuration]]
.Example Configuration for a NuGet Hosted Repository
image::figs/web/nuget-hosted-releases-configuration.png[scale=50]

The NuGet feed is immediately updated as packages are deployed or
deleted from the host repository. 

////
TBD
To rebuild the feed for a hosted 
NuGet repository you can manually schedule a 'Rebuild NuGet Feed'
task.
////

[[nuget-nuget_group_repositories]]
=== NuGet Repository Groups

A repository group is the recommended way to expose all your NuGet
repositories from Nexus to your users, without needing any further
client side configuration. A repository group allows you to expose the
aggregated content of multiple proxy and hosted repositories with one
URL to your tools. 

Nexus includes a 'nuget-group' repository group by default. This
typical, useful example groups the 'nuget.org-proxy' proxy repository
that proxies the NuGet Gallery and the 'nuget-hosted' hosted
repository. 

Using the 'URL' of the repository group can be used in your client
tool and will give you access to the packages in all repositories from
the group with one URL. Any new packages added as well as any new
repositories added to the group will automatically be available.

[[nuget-accessing_packages_in_repositories_and_groups]]
=== Accessing Packages in Repositories and Groups

You can access the repository group or individual repositories with
the +nuget+ tool on the command line using their 'URL' e.g.:

----
nuget sources add -name nuget-group -source http://localhost:8081/repository/nuget-group/
----

After this source was added, you can list the available packages with 
the command +nuget list+.

////
        TBD add links once linked sections are documented
////
Access to the packages is not restricted by default. If access
restrictions are desired, you can configure Nexus security directly
or via LDAP/Active Directory external role mappings combined with
repository targets for fine grained control. Authentication from NuGet is then handled via NuGet
API keys as documented in <<nuget-deploying_packages_to_nuget_hosted_repositories>>.


[[nuget-deploying_packages_to_nuget_hosted_repositories]]
=== Deploying Packages to NuGet Hosted Repositories

In order to authenticate a client against a NuGet repository, NuGet
uses an API key for deployment requests. The API key is acts as an
alias for the user account, so the same API key is used for all NuGet
repositories within Nexus. This user-specific key is generated
separately by a user and can be regenerated at any time. At
regeneration, all previous keys generated for that user are invalid.

==== Accessing your NuGet API Key

For usage with Nexus, NuGet API keys are only needed when packages are
going to be deployed. Users with the necessary 'apikey-all' security
privilege can access the 'NuGet API Key' feature view via the 'User'
menu by pressing on their username in the main toolbar.  

You can access your API key by pressing on the 'Access API Key' button
and providing your username and password again. The resulting dialog
as well as the surrounding user interface context is displayed in
<<fig-nuget-api-key>>. It shows the API key itself as well as the full
command line to register the key for usage with `nuget`.

The 'Reset API Key' button can be used to invalidate an existing API
key and create a new one.

[[fig-nuget-api-key]]
.Accessing your NuGet API Key
image::figs/web/nuget-api-key.png[scale=50]

Usage of the API key requires the 'NuGet API-Key Realm' to be
activated. To do this, simply add the realm to the active realms in
the 'Realms' feature of the 'Security' menu from the 'Administration'
menu.


==== Creating a Package for Deployment

Creating a package for deployment can be done with the +pack+ command
of the +nuget+ command line tool or within Visual Studio. Detailed
documentation can be found on the http://docs.nuget.org/[NuGet website].

////
TBD once upload is documented
also pending https://issues.sonatype.org/browse/NEXUS-7874

==== Deployment with the NuPkg Upload User Interface

Manual upload of one or multiple packages is done on the 'NuPkg Upload'
tab of the repository displayed in
<<fig-nuget-hosted-nupkg-upload>>. Press the 'Browse' button to access
the package you want to upload on the file system and press 'Add
Package'. Repeat this process for all  packages you want upload, and
press 'Upload Package(s)' to complete the upload.


Packages can be uploaded via your build script or by using the Nexus
user interface. Besides the 'NuGet' tab, the configuration for the repository has
a 'NuPkg Upload' tab as displayed in <<fig-nuget-hosted-nupkg-upload>>
that allows you to manually upload one or multiple packages.

[[fig-nuget-hosted-nupkg-upload]]
.The NuPkg Upload Panel for a Hosted NuGet Repository
image::figs/web/nuget-hosted-nupkg-upload.png[scale=40]
////

==== Command line based Deployment to a Nexus NuGet Hosted Repository

The +nuget+ command line tool allows you to deploy packages to a
repository with the +push+ command. The command requires you to use
the 'NuGet API Key' and the 'URL' of the target hosted repository.
Using the +delete+ command of +nuget+ allows you to remove packages in
a similar fashion.

Further information about the command line tool is available in the
http://docs.nuget.org/docs/reference/command-line-reference[on-line
help].

[[nuget-integration_of_nexus_nuget_repositories_in_visual_studio]]
=== Integration of Nexus NuGet Repositories in Visual Studio

In order to access a Nexus NuGet repository or preferably all Nexus
NuGet repositories exposed in a group, you provide the 'URL'
in the Visual Studio configuration for the 'Package Sources' of the
'Package Manager' as displayed in
<<fig-nuget-visualstudio-packageoptions>>.

[[fig-nuget-visualstudio-packageoptions]]
.Package Source Configuration for the Package Manager in Visual Studio
image::figs/web/nuget-visualstudio-packageoptions.png[scale=60]

With this configuration in place, all packages available in your Nexus
NuGet repository will be available in the 'Package Manager' in Visual
Studio.

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
