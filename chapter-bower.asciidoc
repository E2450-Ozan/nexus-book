[[bower]]
== Bower Repositories
{inall}

[[bower-introduction]]
=== Introduction

http://bower.io[Bower] is a package manager for front-end web development. Consumers of JavaScript packages who
routinely build projects need to keep track of and access remote packages. {pro} and {oss} support the Bower 
registry format for proxy repositories. This allows the repository manager to take advantage of the packages in 
the Bower registry and other public registries without incurring repeated downloads of packages, since they will 
be proxied in the repository manager. The proxy allows {pro} and {oss} to grab artifacts from Bower.

The Bower proxy is optimized for the front-end. It downloads a component (e.g. jQuery) just once when multiple 
packages depend on the proxy, reducing page load. To use the Bower proxy to access registries through Nexus 3, 
set up a custom URL resolver that plugs into the package manager and interacts with the repository manager. The 
resolver is an API introduced in Bower version 1.5. It fetches artifacts and version information through the 
Nexus 3 Repository Manager, then automatically searches and saves the artifacts in the 
repository.

[[bower-proxy]]
=== Proxying Bower Repositories

You can set up Bower proxy repository inside of the repository manager. This enables the system to proxy non-Nexus Bower registries. To reduce duplicate downloads and improve download speeds for your developers and CI servers, you should proxy the registry hosted at http://bower.herokuapp.com/[http://bower.herokuapp.com].

Enabling rewrite allows the Bower resolver to force itself through the Nexus to retrieve an artifact. This is enabled by default.

If deactivated, no rewrite of the URL occurs. As a result, original component URL is exposed. Turning off rewrite
capabilities proxies the information directly from the remote registry without redirecting to the repository 
manager to retrieve artifacts. The content will be as if navigating directly to the Bower registry in your 
browser.
 
Minimal configuration steps are:

- Define 'Name'
- Define URL for 'Remote storage' e.g. http://bower.herokuapp.com/[http://bower.herokuapp.com]
- Select a 'Blob store' for 'Storage'

////
[[bower-hosted]]
=== Hosting Bower Repositories

A hosted Bower repository can be used to deploy your own as well as third-party components.

To create another hosted Bower repository, add a new repository with the recipe 'bower (hosted)' as 
documented in <<admin-repositories>>.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blob store' for 'Storage'
////

////
[[bower-group]]
=== Grouping Bower Repositories

tbd

////

[[bower-installation]]
=== Installing the Bower Resolver

The resolver keeps track of these packages in a manifest file, +bower.json+. Bower provides hooks to facilitate 
using packages in your tools and workflows.

Before installing the package, make sure you have npm installed locally. See <<npm>> to review configuration if 
not yet installed. If not already, upgrade your Bower package to version 1.5 or higher before you proceed to the resolver download.

You can install the downloaded Bower resolver package using npm globally with the command:
----
npm install -g bower-nexus3-resolver-1.0.0-pre.tgz
----

You can also build as part of a build of the entire project by specifying the +-Pinclude-bower-resolver+ option.

[[bower-resolver-config]]
=== Configuring the Bower Resolver

You will need to create a +.bowerrc+ file, which you can build in JSON. The JSON in the project's +.bowerrc+ file
must reference the resolver you installed.

Configure your +.bowerrc+ file to reference the URL for the Bower registry in the repository 
manager:
----
{
    "registry"    : "http://localhost:8081/repository/your-bower-repo",
    "resolvers"   : ["bower-nexus3-resolver-1.0.0-pre"]
}
----

You may also install the resolver on a per-project basis instead by adding it as a +devDependency+ in your 
+package.json+:
----
"devDependencies" : {
  "bower-nexus3-resolver" : "*"
}
----


[[bower-browse-search]]
=== Browsing and Searching Bower Repositories

You can browse Bower repositories in the user interface inspecting the components and assets and their details as 
documented in <<browse-browse>>.

Components can be searched in the user interface as described in <<search-components>>. A search finds all 
components and assets that are currently stored in the repository manager, either because they have been deployed 
to a hosted repository or they have been proxied from an upstream repository and cached in the repository manager.


////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
