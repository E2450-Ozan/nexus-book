[[bower]]
== Bower Repositories
{inall}

[[bower-introduction]]
=== Introduction

http://bower.io[Bower] is a package manager for front-end web development. Consumers of JavaScript packages who
routinely build projects need to keep track of and access remote packages. {pro} and {oss} support the Bower 
registry format for proxy repositories. This allows the repository manager to take advantage of the packages in 
the Bower registry and other public registries without incurring repeated downloads of packages. The proxy allows {pro} and {oss} to grab artifacts from Bower.

Bower is optimized for the front-end. It downloads a component (e.g. jQuery) just once even when a 
single package depends on it, reducing page load. It uses a proxy to access remote registries with the help of a 
custom URL resolver, which is dedicated to allowing integration of Bower with {pro} and {oss}. The resolver 
is an API introduced in Bower version 1.5. Bower fetches artifacts and version information through the repository 
manager, then automatically searches and saves the artifacts in the repository.


[[bower-proxy]]
=== Proxying Bower Repositories

You can set up a Bower proxy repository within {pro} and {oss} to access a remote repository location. For 
example, you can configure your Bower proxy to access the public Bower registry at 
http://bower.herokuapp.com/[http://bower.herokuapp.com] or your own private registry.

Enabling rewrite allows the Bower resolver to force itself through the repository manager to retrieve an 
artifact. This is enabled by default.

If deactivated, no rewrite of the URL occurs. As a result, the original component URL is exposed. Turning off 
rewrite capabilities proxies the information directly from the remote registry without redirecting to the 
repository manager to retrieve artifacts. The content will be as if navigating directly to the Bower registry in 
your browser.
 
Minimal configuration steps are:

- Define 'Name'
- Define URL for 'Remote storage' e.g. http://bower.herokuapp.com/[http://bower.herokuapp.com]
- Select a 'Blob store' for 'Storage'


[[bower-hosted]]
=== Hosting Bower Repositories

Creating a Bower hosted repository allows you to register packages in the repository manager. The hosted 
repository acts as an authoritative location for these components. This effectively creates an asset that becomes 
a pointer to an external URL (such as a Git repository).

To add a hosted Bower repository, create a new repository with the recipe 'bower (hosted)' as 
documented in <<admin-repositories>>.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blob store' for 'Storage'


[[bower-group]]
=== Grouping Bower Repositories

A repository group is the recommended way to expose all your Bower repositories from the repository manager to 
your users, with minimal additional client side configuration. A repository group allows you to expose the 
aggregated content of multiple proxy and hosted repositories as well as other repository groups with one URL in 
tool configuration. This is possible for Bower repositories by creating a new repository with the 'bower (group)' 
recipe.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blob store' for 'Storage'
- Add Bower repositories to the 'Members' list in the desired order

Bower groups operate by order of selection. In other words, the first member in a given group is accessed; and 
each subsequent group is accessed, accordingly. If there are two components of the same name, the first will be 
grabbed.


[[bower-installation]]
=== Installing Bower

Installing Bower is done via npm. So, if you install npm first, you can run Bower. But to do a complete 
npm configuration for {oss} and {pro}, review <<_introduction>> to set up and configure the package manager. 
Also, be sure to update your Bower package to version 1.5 or higher.

In order to proxy downloads through the repository manager, install the Bower resolver with this command:
----
npm install -g bower-nexus3-resolver
----

[[bower-configuration]]
=== Configuring Bower

Once you have set up your hosted and proxy repositories for Bower packages, and created a repository group to 
merge them you can create a +.bowerrc+ JSON file in the command line to access registry URLs. Adding the 
"resolvers" variable to the file enables Bower to fetch artifacts for the repository manager.

Edit your +.bowerrc+ file for a read-only group search and resolver to retrieve artifacts.

----
{
	"registry" : "http://localhost:8081/repository/bower-group",
	"resolvers" : ["bower足-nexus3-足resolver"]
}
----

To maintain a private registry, edit the registy variable.

----
{
	"registry" : "http://localhost:8081/repository/private-repo",
	"resolvers" : ["bower足-nexus3-足resolver"]
}
----

To register a package with Bower edit the +.bowerrc+ with a register variable. It acts as a write operation since
it has to go out to the repository manager and associate the package with a particular URL. 

In this example edit your file with a registry object to search a repository group and host a registered 
package. 
----
{
    "registry" : {
        "search" : [ 
            "http://localhost:8081/repository/bower-group"
        ],
        "register" : "http://localhost:8081/repository/bower-hosted"
   },
   "resolvers" : [ "bower-nexus3-resolver" ]
}
----

If you desire to use a per-project +.bowerrc+, then in addition to the single hosted repository +.bowerrc+ you 
must have a project-specific +.bowerrc+ that contains the following:

----
"registry": {
   "register": "http://admin:admin123@localhost:8081/repository/bower-hosted"
   }
----

TIP: There is no default global +.bowerrc+. You can configure Bower to register in a unique directory with your 
own +.bowerrc+ and at the same time maintain a global one defined differently.

[[bower-browse-search]]
=== Browsing Bower Repositories and Searching Packages

You can browse Bower repositories in the user interface inspecting the components and assets and their details, 
as described in <<search-components>>.

Searching for Bower packages can be performed in the user interface, too. It finds all packages that are 
currently stored in the repository manager, either because they have been pushed to a hosted repository or they 
have been proxied from an upstream repository and cached in the repository manager.

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
