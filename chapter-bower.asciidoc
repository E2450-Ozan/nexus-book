[[bower]]
== Bower Repositories
{inall}

[[bower-introduction]]
=== Introduction

http://bower.io[Bower] is a package manager for front-end web development. Consumers of JavaScript packages who
routinely build projects need to keep track of and access remote packages. {pro} and {oss} support the Bower 
registry format for proxy repositories. This allows the repository manager to take advantage of the packages in 
the Bower registry and other public registries without incurring repeated downloads of packages, since they will 
be proxied in the repository manager. The proxy allows {pro} and {oss} to grab artifacts from Bower.

The Bower proxy is optimized for the front-end. It downloads a component (e.g. jQuery) just once when multiple 
packages depend on the proxy, reducing page load. To use the Bower proxy to access registries through Nexus, 
set up a custom URL resolver that plugs into the package manager and interacts with the repository manager. The 
resolver is an API introduced in Bower version 1.5. It fetches artifacts and version information through the 
repository manager, then automatically searches and saves the artifacts in the repository.

[[bower-resolver-config]]
=== Configuring the Bower Resolver

You need a +.bowerrc+ JSON file to use the Bower resolver. You can create a new or modify an existing global 
file. Include the registry URL in the file.

Create a +.bowerrc+ file that points to the URL of a Bower group that will merge your proxy and hosted 
repositories. The reference to the resolver will also be added, after installed. See the example, below.
----
{
    "registry"    : "http://localhost:8081/repository/bower-group",
	"resolvers"   : ["bower-nexus3-resolver"]
}
---- 

You may also install the resolver on a per-project basis by adding it as a +devDependency+ in your 
+package.json+:
----
"devDependencies" : {
  "bower-nexus3-resolver" : "*"
}
----

[[bower-installation]]
=== Installing the Bower Resolver

The Bower resolver keeps track of these packages in a manifest file, +bower.json+. Bower provides hooks to 
facilitate using packages in your tools and workflows.

Before installing resolver, make sure you have npm installed. Also, be sure to upgrade your Bower 
package to version 1.5 or higher.

You can install the downloaded Bower resolver package using npm globally with the command:
----
npm install -g bower-nexus3-resolver
----

[[bower-proxy]]
=== Proxying Bower Repositories

You can set up Bower proxy repository within Nexus to access a remote repository location. For example, you can 
configure your Bower proxy to access the public Bower registry at 
http://bower.herokuapp.com/[http://bower.herokuapp.com] or your own private registry.

Enabling rewrite allows the Bower resolver to force itself through Nexus to retrieve an artifact. This is enabled 
by default.

If deactivated, no rewrite of the URL occurs. As a result, the original component URL is exposed. Turning off 
rewrite capabilities proxies the information directly from the remote registry without redirecting to the 
repository manager to retrieve artifacts. The content will be as if navigating directly to the Bower registry in 
your browser.
 
Minimal configuration steps are:

- Define 'Name'
- Define URL for 'Remote storage' e.g. http://bower.herokuapp.com/[http://bower.herokuapp.com]
- Select a 'Blob store' for 'Storage'


[[bower-hosted]]
=== Hosting Bower Repositories

A hosted Bower repository can be used to map to private Bower registries. You can register a Bower package to 
install components (such as libraries or frameworks) against a hosted repository in Nexus.

To create the Bower package run the command +bower register <packagename> <giturl>+ against a hosted repository. 
Nexus will create an asset that point to the Git URL. A user will be able to browse Bower packages assets that are registered to a hosted repository.

To add another hosted Bower repository, start a new repository with the recipe 'bower (hosted)' as 
documented in <<admin-repositories>>.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blob store' for 'Storage'


[[bower-group]]
=== Grouping Bower Repositories

A repository group is the recommended way to expose all your Bower repositories from the repository manager to 
your users, with minimal additional client side configuration. A repository group allows you to expose the 
aggregated content of multiple proxy and hosted repositories as well as other repository groups with one URL in 
tool configuration. This is possible for Bower repositories by creating a new repository with the 'bower (group)' 
recipe as documented in <<admin-repositories>>.

Minimal configuration steps are:

- Define 'Name'
- Select 'Blob store' for 'Storage'
- Add Bower repositories to the 'Members' list in the desired order

Bower groups can contain hosted or proxy repositories. Groups operate by order of selection. In other words, the 
first member in a given group is accessed; and each subsequent group is accessed, accordingly. If there are two 
components of the same name, the first will be grabbed, and so on.


[[bower-browse-search]]
=== Browsing and Searching Bower Repositories

You can browse Bower repositories in the user interface inspecting the components and assets and their details as 
documented in <<browse-browse>>. Further searching can be done in the user interface as described in 
<<search-components>>. 

////
A search finds all 
components and assets that are currently stored in the repository manager, either because they have been deployed 
to a hosted repository or they have been proxied from an upstream repository and cached in the repository manager.
////

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
