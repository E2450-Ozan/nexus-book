[[intro]]
== Introducing Sonatype Nexus

[[intro-sect-intro]]
=== Introduction

Nexus manages software components required for development,
deployment, and provisioning. If you develop software, Nexus can help
you share those components with other developers and end users. Nexus
greatly simplifies the maintenance of your own internal repositories
and access to external repositories. With Nexus you can completely
control access to, and deployment of, every component in your
organization from a single location.

Nexus is available in three editions:

* Nexus Open Source - Nexus OSS
* Nexus Professional - Nexus PRO
* Nexus Professional CLM Edition - Nexus PRO CLM

The basis of all Nexus versions is formed by Nexus Open Source. It is
licensed under the Eclipse Public License version 1.0 and can be used
to get started with component and repository management. It provides a
plugin infrastructure for all its features and supports numerous
repository formats out of the box.

Nexus Professional builds on top of the numerous features of Nexus
Open Source and adds component information integration, improvements
for the release process, improved LDAP integration and other features
typically required by enterprises and advanced users.

Nexus Professional CLM Edition adds integration with Sonatype CLM to
Nexus Professional. This makes your component management policies and
rules configurable and actionable and provides further automation and
integration with numerous tools to advanced users.

Upgrades from Nexus Open Source can be easily performed. This makes
Nexus Open Source an easy, yet powerful solution to get started with
component and repository management. Nexus Professional adds further
features as well as full support by Sonatype.

TIP:: Check out <<repoman>> for more background on component lifecycle
management and repository management.

[[intro-sect-os]]
=== Nexus Open Source

Nexus Open Source provides you with an essential level of control over
the external repositories you use and the internal repositories
you create. It provides infrastructure and services for organizations
that use repository managers to obtain and deliver software. If you
create software libraries or applications for your end users, you can
use Nexus Open Source to distribute your software. If your software
depends on open source software components, you can cache software
components from remote repositories.

==== Nexus Open Source Features

Hosting Repositories:: When you <<hosted-repository,host a
repository>> with Nexus Open Source, you can upload artifacts using
the Nexus interface, or you can deploy artifacts to hosted
repositories using Maven. Nexus will also create the standard Nexus
Index for all of your hosted repositories, which will allow tools like
m2eclipse to rapidly locate software artifacts for your developers.

Proxy Remote Repositories:: When you <<proxy-repository,proxy a remote
repository>> with Nexus Open Source, you can control all aspects of
the connection to a remote repository, including security parameters,
HTTP proxy settings. You can configure from which mirrors Nexus will
download, how long Nexus will store artifacts, and how it will expire
artifacts which are no longer referenced by your build.

Repository Groups:: <<repository-groups,Grouping repositories>> allows
you to consolidate multiple repositories into a single URL. This makes
configuring your development environment very easy. All of your
developers can point to a single repository group URL, and if anyone
ever needs a custom remote repository added to the group, you can do
this in a central location without having to modify every developer’s
workstation.
  
Numerous Repository Formats:: The concepts of hosted repositories,
proxy repositories and repository groups are supported for a number of
repository formats such as <<config-maven,Maven 2>>, <<nuget,NuGet>>,
<<npm,NPM>>, <<rubygems,RubyGems>> or <<yum,YUM>>. This allows you to
facilitate one Nexus server to bring the same advantages to all
developers in a team relying on different technologies and build tools
tools including <<config-maven,Apache Maven>>, Apache Ant with
<<ant-ivy,Apache Ivy>> or <<ant-aether,Eclipse Aether>>,
<<gradle,Gradle>>, <<sbt,SBT>>, <<nuget,.Net>>, <<npm,Node.js>>,
<<rubygems,Ruby>> and many others.

Hosting Project Web Sites:: Nexus is a publishing destination for
<<sites,project web sites>>. While you very easily generate a project web site
with Maven, without Nexus, you will need to set up a WebDAV server and
configure both your web server and build with the appropriate security
credentials. With Nexus, you can deploy your project’s web site to the
same infrastructure that hosts the project’s build output. This single
destination for binaries and documentation helps to minimize the
number of moving parts in your development environment. 

Fine-grained Security Model:: Nexus Open Source ships with a very
<<security,capable and customizable security framework>> that can be
used to configure user interface as well as component access. Every
operation in Nexus is associated with a privilege, and privileges can
be combined into standard Nexus roles. Users can then be assigned both
individual privileges and roles that can be applied globally or at a
fine-grained level. You can create custom administrative roles that
limit certain repository actions, such as deployment to specific
groups of developers, and you can use these security roles to model
the structure of your organization.
  
Flexible LDAP Integration:: If your organization uses an LDAP server,
Nexus <<ldap,can integrate with an external authentication and access
control system>>. Nexus is smart enough to be able to automatically
map LDAP groups to the appropriate Nexus roles, and it also provides a
very flexible facility for mapping existing users and existing roles
to Nexus roles.
  
Component Search:: Nexus Open Source provides <<search-components,an intuitive
search feature>> which allows you to search for software components by
identifiers, such as groupId, artifactId, version, classifier, and
packaging, names of classes contained in Java archives, keywords, and
component sha1 checksums. In addition Nexus can automatically download
the index from remote repositories. This allows discovery of
components available in these remote repositories without prior
downloads.

Scheduled Tasks:: Nexus Open Source has the <<scheduled-tasks,concept
of scheduled tasks>>: periodic jobs which take care of various
repository management tasks, such as deleting old snapshots, evicting
unused items, and publishing repository indexes.

REST Services:: Nexus Open Source is based on <<confignx-sect-plugins,a series of REST>>
services, and when you are using the Nexus web front-end UI, you are
really just interacting with a set of REST services. Because of this
open architecture, you can leverage the REST service to create custom
interactions or to automate repository management with your own
scripts.
    
Integration with m2eclipse:: When you use Nexus as a repository
manager it creates indexes that support the
http://eclipse.org/m2e/[Maven integration for the Eclipse IDE
-M2Eclipse].  They are immediately available to the project creation
wizards and are included in search results in the IDE and other
operations with dependencies and plugins.

[[intro-sect-pro]]
=== Nexus Professional

Nexus Professional is designed to meet the needs of the enterprise and
builds upon solid foundation and features provided by Nexus Open
Source.  It is a central point of access to external repositories
which provides and a central distribution point with the intelligence
required to support the decision that go into making quality software.

==== Nexus Professional Features

Rich Component Information:: The Sonatype CLM data services provides
up-to-date and accurate information about known component security
vulnerabilities as well as license issues found by component source
inspection. This information is <<component-info,available in Nexus
Professional>> and helps your users with their component choice.

Nexus Staging Suite:: When was the last time you did a software
release to a production system? Did it involve a QA team that had to
sign off on a particular build? What was the process you used to
re-deploy a new build if QA found a problem with the system at the
last minute? The <<staging,Nexus Staging Suite>> provides workflow support for the
release process of binary software components. If you need to create a
release component and deploy it to a hosted repository, you can use the
Staging Suite to post a collection of related, staged components which
can be tested, promoted, or discarded as a unit. Nexus keeps track of
the individuals who are involved in a staged, managed release and can
be used to support the decisions that go into producing quality
software.
    
Support for OSGi Repositories:: Nexus Professional adds support for
<<osgi,OSGi Bundle repositories>> and <<p2,P2 repositories>> for those developers who
are targeting OSGi or the Eclipse platform. Just like you can proxy,
host, and group Maven 2, NuGet or NPM repositories with Nexus Open
Source, Nexus Professional allows you to do the same with OSGi
repositories.
  
Enterprise LDAP Support:: Nexus Professional offers <<ldap,LDAP support>>
features for enterprise LDAP deployments, including detailed
configuration of cache parameters, support for multiple LDAP servers
and backup mirrors, the ability to test user logins, support for
common user/group mapping templates, and the ability to support more
than one schema across multiple servers.
  
Support for Atlassian Crowd:: If your organization uses Atlassian
Crowd, Nexus Professional can <<crowd,delegate authentication and
access control to a Crowd server>> and map Crowd groups to the appropriate
Nexus roles.
  
Maven Settings Management:: Nexus Professional along with the Nexus
M2Settings Maven Plugin allows you to <<maven-settings,manage Maven
settings>>. Once you have developed a Maven Settings template,
developers can then connect to Nexus Professional using the Nexus
M2Settings Maven plugin which will take responsibility for downloading
a Maven settings file from Nexus and replacing the existing Maven
settings on a local workstation.
   
Custom Repository Metadata:: Nexus Professional provides a facility
for user-defined <<custom-metadata-plugin,custom metadata>>. If you
need to keep track of custom attributes to support approval workflow
or to associate custom identifiers with software artifacts, you can
use Nexus to define and manipulate custom attributes which can be
associated with artifacts in a Nexus repository.

=== Nexus Professional CLM Edition

The Nexus Professional CLM Edition includes a Sonatype CLM server that
can be used to define component usage policies and automate the
enforcement during the release process with the Nexus Staging Suite.


==== Nexus Professional CLM Edition Features

Component Usage Policies:: The Sonatype CLM server allows you to
define component usage policies in terms of security vulnerabilities,
license issues and many other characteristics of the used components.

Release Policy Enforcement:: The Nexus Staging Suite can be configured
to use <<staging-clm,application-specific policies for automated release validation>>.

Application Specific Component Information:: The
<<component-info,component information>> displayed in Nexus can take
the application-specific policies of your organization into account
and display the specific validation result to the users.

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////



