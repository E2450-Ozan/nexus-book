[[eval]]
== Evaluating Nexus Step by Step

=== Prerequisites and Preparation

The following evaluation of Sonatype Nexus is based on an assumption
of installing Nexus itself as well as the various technologies used in
the specific evaluation example all on one computer. A more extended
evaluation of Nexus in a team environment should follow the
instructions for a full installation.

Besides the installation of Nexus itself, various evaluations will need
different prerequisites installed on the machine you use for your
evaluation. The installation of these technologies is documented below

==== A Note about the Operating System

Nexus, Apache Maven and most other technologies used in this guide run
on top of the Java Runtime, which is available for most common
operating systems. 

Some of the tasks described are referencing command line calls. Where
that is the case this guide will use Unix typical commands and syntax
as used on a bash shell. This is the most common environment on Linux
and Mac OSX computers. On Windows machines a bash shell can be
installed as well using e.g. the cygwin system. However the typical
usage would use the Windows command prompt with slightly different
calls. <<tbl-command-line>> displays a number of examples for typical
tasks carried out in the evaluations with their bash as well as
Windows shell commands.

[[tbl-command-line]]
.Command line invocation examples
[frame="topbot",options="header"]
|======================
|Task | Bash Shell | Window Shell 
|Delete a file          | +rm filename+                 | +del filename+
|Delete a directory | +rm -rf directoryname+  | +rmdir directoryname+
| Delete a directory in users home directory | +rm -rf
  ~/.m2/repository+  | +rmdir %HOMEPATH%\.m2\repository+
| Change to the users home directory | +cd ~+ | +cd %HOMEPATH%+
|======================

==== Java Runtime

Nexus itself as well as some of the technologies used in the
evaluation require a Java runtime or development kit. We recommend to
install the latest Oracle Java 6 or Java 7 JDK available from the
http://www.oracle.com/technetwork/java/javase/downloads/index.html[download
web page] following the installation instructions on the same site.

After a successful installation, you can verify it by running the
command +java -version+, which should result in an output similar to

-----
java version "1.7.0_10"
Java(TM) SE Runtime Environment (build 1.7.0_10-b18)
Java HotSpot(TM) 64-Bit Server VM (build 23.6-b04, mixed mode)
----

[[eval-prereq-maven]]
==== Apache Maven

Apache Maven can be retrieved from the
 http://maven.apache.org/download.html[download page] and installed
following the instructions available there. We recommend the usage of
the latest available Maven 3 version. After a successful installation
you can verify it with running the command +mvn --version+, which
should result in an output similar to

----
Apache Maven 3.0.4 (r1232337; 2012-01-17 00:44:56-0800)
Maven home: /opt/tools/apache-maven-3.0.4
Java version: 1.7.0_10, vendor: Oracle Corporation
Java home: /Library/Java/JavaVirtualMachines/jdk1.7.0_10.jdk/Contents/Home/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "mac os x", version: "10.8.2", arch: "x86_64", family: "mac"
----

[[eval-prereq-nuget]]
==== Microsoft Visual Studio and NuGet

Microsoft Visual Studio and NuGet are needed to evaluate the .Net
support of Nexus Professional. There are a number of different Visual
Studio distributions.  Someone of these distributions, may have NuGet
already installed while others do not.  Even if your Visual Studio
installation is bundled with NuGet, you will want to make sure that
you have upgraded to the latest version of the tool.

http://nuget.org/[NuGet] is a fast-paced project, and you'll find that
new packages available on NuGet Gallery may not be compatible with
older versions of the NuGet package manager.

For detailed instructions on installing NuGet in Visual Studio, please
go to the http://docs.nuget.org/[NuGet project's documentation site]
and refer to the
http://docs.nuget.org/docs/start-here/installing-nuget[Installing
NuGet] instructions.

[[eval-getting-started]]
=== Getting Started

This guide is based on the usage of Nexus Professional. A lot of the
core features are available in Nexus Open Source as well and the
examples and evaluation guide are suitable to assess the open source
version as well.

* *Step 1:* Download the Nexus Professional Installer

* *Step 2:* Run the Nexus Professional Installer

* *Step 3:* Start Nexus from the Nexus Professional Installer

When Nexus has started just select to open the url in the wizard or go
to *http://localhost:8081/nexus[http://localhost:8081/nexus]* in a
browser window.

==== Activating Your Nexus Trial

You will see the trial activation form in which you provide your full
name, email address, organization, and location. Once you’ve supplied
this information, click on “Submit Activation Request”.

Alternatively you can request the trial license key at
https://licensing.sonatype.com/nexus/form/trial[https://licensing.sonatype.com/nexus/form/trial]

After you received an email from Sonatype with the subject “Your Nexus
Professional Trial License” which contains your trial license key, you
can paste this license key into the license field in the Nexus Professional 
user interface. Click Activate to activate your 14-day Nexus Professional
Trial. Once your trial is activated you will be presented with the
Nexus user interface.

==== Logging Into Nexus as an Administrator

After activating your Nexus install you can log into Nexus as an
Administrator. To do this, go to http://localhost:8081/nexus/ and
click on the Login button in the upper right-hand corner of the
interface. 

.Nexus User Interface with Log In 
image::figs/web/eval-login.png[scale=40]

The default username and password are:

Username:: admin
Password:: admin123

The Nexus Professional Trial evaluation guide assumes that you are
logged in as an administrator.

==== Getting Started with Nexus Professional Evaluation

To make it easier to evaluate Nexus, we’ve created a set of projects
to demonstrate the features of Nexus Open Source and Nexus
Professional. These example projects are bundled with the trial
installer for your convenience. In additiona they are available as the
nexus-book-examples project on GitHub at
https://github.com/sonatype/nexus-book-examples for you to download
and inspect separately, if desired. The latest version of all the
examples is available as a zip archive at
https://github.com/sonatype/nexus-book-examples/archive/master.zip.


When you downloaded the trial distribution of Nexus Professional, your
server is also preconfigured to demonstrate important features.

The Nexus trial distribution contains the following customizations:

* Nexus has been preconfigured to download the search index from
  Central.

* Nexus proxies NuGet Gallery so that you can quickly evaluate support
  for .NET development.

* A Staging profile has been configured to demonstrate release
  management.

* Procurement has been preconfigured so you can quickly define rules
  for the OSS components.

[[eval-proxy-publish]]
=== The Basics: Proxying and Publishing

[quote, Build Engineer, FInancial Industry]
____
After a few weeks the importance of having a repository manager is so
obvious no one on my team can believe we used to develop software
without one.
____

If you are new to repository management, the first step is to evaluate
the two basic benefits of running a repository manager: proxying and
publishing.

[[eval-maven-proxy]]
==== Proxying Components With Apache Maven

If you use a dependency in your software, your build downloads
artifacts from a remote repository, such as the
http://search.maven.org[Central Repository]. Your systems depend on
these components, so if one of these critical remote repositories
becomes unavailable your productivity can grind to a halt.

This is where Nexus can help. Nexus is pre-configured to proxy the
Central Repository and other remote repositories can be easily
added. Once set up, Nexus maintains a local cache of the needed
components from the remote repositories for you. Your build is more
reliable when your needed components are cached by Nexus. It is
providing you with dramatic efficiency and speed improvements across
your entire development effort.

*In this example, you will...*

* Configure Maven to download components from Nexus

* Pre-cache dependencies and build artifacts with an initial build

* Note organization-wide improvements in build reliability

*Let's get started:*

. Ensure that Apache Maven is installed as a prerequisite as
  documented in <<eval-prereq-maven>>.

. Go to the Nexus evaluation guide directory you configured during the
  Nexus Professional install and configure Maven to access Nexus
  with the provided 'settings.xml'.
+
----
$ cp maven/settings/setttings.xml ~/.m2/
----

. If you do not want to use the default local repository location of
  Maven in `~/.m2/repository`, change the localRepository settings in
  the settings.xml file to an absolute path.

.  Build the simple-project 
+
----
$ cd maven/simple-project/
$ mvn clean install
----

. As the project builds, you will notice that all components are downloaded
from your local Nexus instance installed with requests like
+
----
Downloading: http://localhost:8081/nexus/content/groups/public/org/freemarker/freemarker/2.3.10/freemarker-2.3.10.pom
Downloaded:
http://localhost:8081/nexus/content/groups/public/org/freemarker/freemarker/2.3.10/freemarker-2.3.10.pom
(1016 B at 3.8 KB/sec)
...
----

. After the build has successfully completed, delete the local Maven
  repository cache and re-run the build.
+
----
$ rm -rf ~/.m2/repository
$ mvn clean install
----

. Notice how the downloads are occuring much faster since they are no
  longer retrieved from the remote repositories before being served by
  Nexus, but rather are supplied straight from the cache in Nexus

. To verify that components are being cached in Nexus, open the
  Repositories panel by clicking on +Repositories+ in the left-hand
  navigation menu. Once the list of repositories is
  displayed, select Central. Click on the +Browse Storage+ tab shown
  in this illustration.

.Conclusion
****
Your builds will be faster and more reliable now that you are caching
components in Nexus. Once Nexus has cached a component locally, there
is no need to make another round-trip to the server.
****

==== Publishing Artifacts with Apache Maven

Nexus makes it easier to share components internally. How do you
distribute and deploy your own applications? Without Nexus, internal
code is often distributed and deployed using an SCM, a shared file
system, or some other inefficient method for sharing binary components.

With Nexus you create hosted repositories, giving you a place to
upload your own artifacts to Nexus. You can then feed your components
back into the same repositories referenced by all developers in your
organization.

*In this example, you will...*

* Publish a component to Nexus

* Watch another project download this component as a dependency from Nexus

*Let's get started*

. Follow the proxying evaluation example from <<eval-maven-proxy>>

. Go to the Nexus evaluation guide directory you configured during the
  Nexus Professional installer and publish the simple-project to Nexus
+
----
$ cd maven/simple-project/
$ mvn clean deploy
----

. The simple-project has been preconfigured to publish its build
  output in the form of a jar component to your local instance of
  Nexus Professional.

. Once this artifact has been published, return to the evaluation
  sample projects directory and publish the run a build of another-project:
+
----
$ cd maven/another-project
$ mvn clean install
----

. This second project has a Maven dependency on the first
  project:
+
----
<dependency>
  <groupId>com.example</groupId>
  <artifactId>simple-project</artifactId>
  <version>1.0-SNAPSHOT</version>
</dependency>
    
----
+
During the build, it is relying on Nexus when it attempts to retrieve
  the component from simple-project.

. To verify that the simple-project component was deployed to Nexus,
  click on Repositories and then select the Snapshots
  repository. Select the +Browse Storage+ tab as shown in this
  illustration.

.Successfully Deployed Components In the Snapshots Repository
image::figs/web/eval-publish.png[scale=40]


.Conclusion
**** 
Nexus Professional can serve as an important tool for collaboration
between different developers and different development groups. It
removes the need to store binaries in source control or shared
file-systems and makes collaboration more efficient.
****

=== Governance - Identify Insecure OSS Components in Nexus

The Repository Health Check in Nexus Professional turns your
repository manager into the first line of defense against security
vulnerabilities. Nexus Professional scans components and finds cached
components with known vulnerabilities from the Common Vulnerabilities
and Exposures (CVE) database. You can get an immediate view of your
exposure from the Repository Health Check summary report with
vulnerabilities grouped by severity according to the Common Vulnerability
Scoring System (CVSS).

As your developers download components, they may be unwittingly
downloading components with critical security vulnerabilities that
might expose your applications to known exploits. According to a joint
study by Aspect Security and Sonatype released in 2012, Global 500
corporations downloaded 2.8 million flawed components in one
year. Nexus becomes an effective way to discover flawed components in
your repositories so you can avoid falling victim to known exploits.

.Repository Heath Check Summary
image::figs/web/eval-rhc-overview.png[scale=50]

*In this example, you will...*

* Start an analysis of all components proxied from the Central
  Repository

* Inspect the number of security vulnerabilities found

*Let's get started*

. Follow the examples in <<eval-proxy-publish>> to seed the Central
  proxy repository of your Nexus instance. These examples include
  several components with security vulnerabilities and license issues
  as dependencies.

. Once your Nexus instance has cached the components,
open the Nexus interface and click on the green Analyze button next to
your Central proxy repository

. After the completion of the analysis, the button will change into an
  indicator of the number of security and license issues found

. Hover your mouse over the indicator and Nexus will show you a
summary report detailing the number and type of security
vulnerabilities present in you repository.

. Optionally build some of your own applications to get further
  components proxied and see if additional security issues appear.


.Security Vulnerability Summary Display from Repository Health Check
image::figs/web/eval-security.png[scale=60]

Nexus Professional users gain access to further details about all the
components with security vulnerabilities including their repository
coordinates to uniquely identify the component as well as links to the
vulnerability database records for further details.

.Conclusion
****
The Repository Heath Check of Nexus allows you to get an
 understanding of all the security vulnerabilities affecting the components
 you have proxied into your environment and which might potentially
 be part of the software you are creating.
****
=== Governance - Track Your Exposure to OSS Licenses

With Open Source Software (OSS) becoming the de-facto standard for
enterprise application development, the importance of tracking and
identifying your exposure to OSS licenses is becoming an essential
part of the software development lifecycle. Organizations need tools
that let them govern, track, and manage the adoption of open source
projects and the evaluation of the licenses and obligations that are
part of OSS development.

With Nexus Professional’s Repository Health Check, your repository
becomes more than just a place to file binary components. It becomes a
tool that you can use to implement policies and govern the open source
licenses used in development.


*In this example, you will...*

* Start an analysis of all components proxied from the Central
  Repository

* Inspect the number of license issues found

*Let's get started*

. Follow the examples in <<eval-proxy-publish>> to seed the Central
  proxy repository of your Nexus instance. These examples include
  several components with security vulnerabilities and license issues
  as dependencies.

. Once your Nexus instance has cached the components, open the Nexus
interface and click on the green Analyze button next to your Central
proxy repository

. After the completion of the analysis, the button will change into an
  indicator of the number of security and license issues found

. Hover your mouse over the indicator and Nexus will show you a
summary report detailing the number and type of license issues of
components present in you repository.

. Optionally build some of your own applications to get further
  components proxied and see if additional license issues appear.


.License Analysis Summary Display from Repository Health Check 
image::figs/web/eval-license.png[scale=50]

Nexus Professional customers can access a detailed report to identify
specific components with known security vulnerabilities or
unacceptable licenses. The component lists can be sorted by OSS license
or security vulnerabilities, and Nexus Professional provides specific
information about licenses and security vulnerabilities. A
detailed walkthrough of this report is available on the
http://www.sonatype.com/Products/Nexus-Professional/Features/Repository-Health-Check[Sonatype website].

.Repository Health Check Details with License Issues List
image::figs/web/eval-rhc-detail.png[scale=30]


.Conclusion
****
OSS License compliance and security assessments are not something you
 do when you have the time, it is something that should be a part of
 your everyday development cycle. With Nexus Professional’s Repository
 Health Check, it is.
****


[[eval-nuget-proxy]]
=== .NET Integration - Consume .NET Artifacts from NuGet Gallery

The NuGet project provides a package management solution for .NET
developers that is integrated directly into Visual Studio. NuGet makes
it easy to add, remove and update libraries and tools in Visual Studio
projects that use the .NET Framework, and Nexus can act as a proxy
between your developer’s Visual Studio instances and the public NuGet
Gallery.

When you configure Nexus Professional to act as a proxy for NuGet
Gallery you gain a more reliable build that depends on locally cached
copies of the components you depend on. If NuGet Gallery has
availability problems, your developers can continue to be
productive. Caching components locally will also result in a faster
response for developers downloading .NET dependencies.

*In this example, you will...*

* Configure your Visual Studio instance to download NuGet packages
  from your local Nexus server

* Consume components from NuGet Gallery via Nexus

*Let's get started*

Your Nexus Professional Trial instance has been preconfigured with the
following NuGet repositories:

* A Proxy Repository for NuGet Gallery

* A Hosted Repository for your internal .NET components

* A Group which combines both the NuGet Gallery Proxy and the Hosted
  NuGet Repository

.NuGet Repositories in Repository List
image::figs/web/eval-nuget.png[scale=50]


To consume .NET components from Nexus Professional you will need to
install the NuGet feature in Visual Studio as referenced in
<<eval-prereq-nuget>> and configure it appropriately:

. Open Nexus Professional, click on Repositories in the left-hand
   navigation menu and locate the 'NuGet Group' repository group. This
   is the aggregating group from which Visual Studio should download
   packages. Click on this repository group in the list of
   repositories.

. Select the NuGet tab below the list of repositories with the NuGet
    Group selected and copy the URL in the 'Package Source' field to
    your clipboard. The
    value should be
    http://localhost:8081/nexus/service/local/nuget/nuget-group/

. Now in Visual Studio, right-click on a Visual Studio project and
select 'Add Library Reference'

. In the 'Add Library Package Reference' click on the 'Settings'
button in the lower left-hand corner.

. This will bring up an 'Options' button.   Remove the initial NuGet
repository location and replace it with a reference to your Nexus
instance.  Clicking 'Add' to add the reference to your Nexus Instance.  

. Click on 'OK' to return to the 'Add Library Package Reference'
dialog.

. Select the 'Online' item in the left-hand side of the dialog, at this
point Visual Studio will interrogate your Nexus instance for a list of
NuGet packages.

. You can now locate the package you need and install it.  

. To verify that the NuGet package components are being served from
Nexus you can return to the Nexus web interface and browse the local
storage of your NuGet proxy repository.
 
NOTE: Watch http://www.youtube.com/v/HXksSdhoqbA?version=3[this video]
of the steps being performed in Visual Studio.

The above instructions were created using Visual Studio 10 Web
Developer Express. Your configuration steps may vary if you are using
a different version of Visual Studio. 

.Conclusion
****
When your developers are consuming OSS .NET artifacts through a Nexus
proxy of NuGet gal lery your builds will become more stable and
reliable over time. Every component will be only downloaded to Nexus
once and every following download will enjoy the performance and
reliability of a local download from the Nexus cache.
****


=== .NET Integration - Publish and Share .NET Artifacts with NuGet

Nexus Professional can improve collaboration and control while
speeding .NET development. NuGet defines a packaging standard that
organizations can use to share code.

If your organization needs to share .NET components you can publish
these components to a hosted NuGet repository on Nexus
Professional. This makes it easy for projects within your organization
to start publishing and consuming NuGet packages using Nexus as a
central hub for collaboration.

Once NuGet packages are published to your Nexus Professional instance
they are automatically be added to the NuGet repository group and your
internal packages will be as easy to consume as packages from NuGet
Gallery.

*In this example, you will...*

* Publish NuGet packages to a Hosted NuGet repository

* Distribute custom .NET components using Nexus Professional

*Let's get started:*

. Follow the example from <<eval-nuget-proxy>> to set up proxying of
NuGet packages from Nexus 

. Activate the NuGet API Security Realm ->
  https://support.sonatype.com/entries/21285298-activate-the-nuget-api-key-security-realm-in-nexus-professional[Read
  more...]

. Create a NuGet Package in Visual Studio ->
https://support.sonatype.com/entries/21281427-creating-a-nuget-package-to-publish-to-nexus-professional[Read
more...]

. Publish a NuGet Package to Nexus Professional -> https://support.sonatype.com/entries/21284166-publishing-a-nuget-package-to-nexus-professional[Read more...]


.Conclusion
****
Once NuGet packages are published to your Nexus Pro instance and are
 available via a NuGet repository group, your internal packages will
 be as easy to consume as packages from NuGet Gallery. 

This will greatly improve sharing of components and reuse of
 development efforts across your teams and allow you to modularize
 your software.
****


=== Process Improvement - Staging a Release with Nexus

When was the last time you did a software release to a production
system? Did it involve a QA sign-off? What was the process you used to
re-deploy if QA found a problem at the last minute? Developers often
find themselves limited by the amount of time it takes to respond and
create incremental builds during a release.

The Nexus Staging Suite changes this by providing workflow support for
binary software components. If you need to create a release component
and deploy it to a hosted repository, you can use the Staging Suite to
post a release which can be tested, promoted, or discarded before it
is committed to a release repository.

*In this example, you will...*

* Configure a project to publish its build output component to Nexus

* Deploy a release and view the deployed component in a temporary
  staging repository

* Promote or discard the contents of this temporary staging repository

*Let's get started:*

. This example assumes that you have successfully deployed the
  simple-project as documented in <<eval-maven-proxy>>. 

. Inspect the pre-configured 'Example Release Profile' staging profile
by selecting it from the list available after selecting 'Staging
Profiles' in the the 'Build Promotion' menu in the left hand
navigation

. Notice that the version of the simple-project in the pom.xml ends
with -SNAPSHOT. This means that it is in development.

. Change the version of the simple project to release version by
removing the -SNAPSHOT in a text editor or run the command
+
----
$ cd maven/simple-project
$ mvn versions:set -DnewVersion=1.0.0
----

. Publish the release to the Nexus Staging suite with
+
----
$ mvn clean deploy
----

. To view the staging repository, click on 'Staging Repositories' in
  the 'Build Promotion' menu and you should see a single staging
  repository as shown in this illustration.

. Click on 'Close' to close the repository and make it available via
  the public group.

. Experiment with Staging, at this point you can:

.. Click on 'Drop' to discard the contents of the repository and stag-
   ing another release.

.. Click on 'Release' to publish the contents of the repository to the
   Release repository.

. Once you release the staging repository, you will be able to find
the release components in the 'Releases' hosted repository

.Closing a Staging Repository in Nexus User Interface
image::figs/web/eval-staging.png[scale=50]

The individual transactions triggered by closing, dropping, promoting
or releasing a staging repository can be enriched with email
notifications as well as staging rule inspections of the components.

.Conclusion
**** 
Staging gives you a standard interface for controlling and managing
 releases. A collection of related release components can be staged for
 qualification and testing as a single atomic unit. These staged
 release repositories can be discarded or released pending testing and
 evaluation.
****

=== Governance - Component Procurement

Consider the default behavior of a proxy repository. Any developer can
reference any artifact stored in a remote reposi- tory and cause Nexus
to retrieve the artifact from the remote repository and serve it back
to a developer. Any developer, anywhere in your organization, can add
any dependency to your software regardless of the license or security
of that dependency.

If you want control over the artifacts used in a proxy repository, the
Nexus Procurement feature was designed to give organizations a
mechanism to limit the artifacts that can be served from Nexus. This
valuable governance tool can give you the certainty you need to
deliver reliable software.

*In this example, you will...*

* Configure access rules for which artifacts can be referenced in this Procured version

*To get started*

* Create Procurement Rules -> http://www.sonatype.com/books/nexus-book/reference/procure-sect-config-rule.html[Read more...]

* Execute Your Build Using Maven as a Procured Proxy


*To evaluate the Procurement feature:*

* Create a Hosted repository named “Procured Central”

* In the administrative interface, establish a relationship
between your Central proxy and this Procured Central Hosted
repository

* Configure access rules for which artifacts can be referenced in
this Procured version

*To get started:*

* Proxying a Remote Repository in Nexus -> http://bit.ly/HQZBI2[Read more...]

* Configuring Maven for Nexus -> http://bit.ly/IVjfSL[Read more...]

* Configure Procurement in Nexus -> http://bit.ly/HQdTJa[Read more...]

* Create Procurement Rules -> http://bit.ly/JympZs[Read more...]

* Execute Your Build Using Maven as a Procured Proxy


.Conclusion
**** 
Procurement is a useful tool if you are operating in an environment
 that needs to qualify every single dependency before it can be used
 in development. Using Procurement you can create ex- plicit white and
 blacklists of acceptable artifacts.
****


=== Developer Productivity - Support for Distributed Development

Avoid downtime by deploying Nexus in a highly available
configuration. An enhanced proxy keeps repos in sync without
sacrificing performance. With a Nexus Professional Smart Proxy two
distributed teams can work with local instances that will inform each
other of new artifacts as they are published.

A team in New York can use a Nexus instance in New York and a team in
Sydney can use an instance in Australia. If an arti- fact has been
deployed, deleted, or changed, the source repository notifies the
proxy. Both teams are assured that Nexus will never serve stale
content. This simple mechanism makes it possible to build complex
distributed networks of Nexus instances relying on this
publish/subscribe approach.

*In this example, you will...*

* Setup two instances of Nexus Professional

* Configure one instance to proxy the hosted instances of the other
  instance

* Configure the proxying instance to subscribe to Smart Proxy events

*Let's get started*

. Enable Smart Proxy Publishing -> http://www.sonatype.com/books/nexus-book/reference/smartproxy-enabling_smart_proxy_publishing.html[Read more...]

. Establish Trust between Nexus Instances -> http://www.sonatype.com/books/nexus-book/reference/smartproxy-establishing_trust.html[Read more...]

. Configure Smart Proxy -> http://www.sonatype.com/books/nexus-book/reference/smartproxy-repository_specific_smart_proxy_configuration.html[Read more...]

.Conclusion
**** 
With Smart Proxy, two distributed instances of Nexus can stay
 up-to-date with the latest pub- lished artifacts. If you have
 distributed development teams, Smart Proxy will allow both teams to
 access a high-performance proxy that is guaranteed to be up-to-date.
****

=== Security - Enterprise LDAP Support

Organizations with large, distributed development teams often have a
variety of authentication mechanisms: from multiple LDAP servers with
multiple User and Group mappings, to companies with development teams
that have been merged during an acquisition. Nexus Professional’s
Enterprise LDAP support was designed to meet the most complex security
requirements and give Nexus administrators the power and flexibility
to adapt to any situation.

Nexus Professional offers LDAP support features for enterprise LDAP
deployments including detailed configuration of cache parameters,
support for multiple LDAP servers and backup mirrors, the ability to
test user logins, support for common user/group mapping templates, and
the ability to support more than one schema across multiple servers.

*In this example, you will...*

* Configure Nexus Professional to cache LDAP authentication
  information

* Configure Nexus Professional to use multiple LDAP servers, each with
  different User and Group map- pings

* Configure Nexus Professional to use LDAP servers with multiple
  backup instances and test the ability of Nexus to fail over in the
  case of an outage

*Let's get started*

. Configure Enterprise LDAP in Nexus Pro -> http://www.sonatype.com/books/nexus-book/reference/ldap-sect-enterprise.html[Read more...]

. Configure LDAP Caching and Time out

. Configure and Test LDAP Fail over

. Use LDAP User and Group Mapping Templates for:

.. Active Directory

.. POSIX with Dynamic Groups

..  POSIX with Static Groups

.. Generic LDAP Configuration

.Conclusion
**** 
When you need LDAP integration, you’ll benefit Nexus
 Professional. Nexus Pro supports some of the largest development
 efforts with some of the most complex LDAP configurations includ- ing
 multiple servers and support for geographic fail over.
****

=== Security - Support for Atlassian Crowd

If your organization uses Atlassian Crowd, Nexus Professional can
delegate authentication and access control to a Crowd server and map
Crowd groups to the appropriate Nexus roles.

*In this example, you will...*

* Install the Atlassian Crowd Nexus plugin

* Configure an Atlassian Crowd Authentication and Authorization Realm

*Let's get started*

. Install the Atlassian Crowd Nexus Plugin -> http://www.sonatype.com/books/nexus-book/reference/crowd.html#crowd-sect-installation[Read more...]

. Configure the Crowd Plugin -> http://www.sonatype.com/books/nexus-book/reference/crowd.html#crowd-sect-config[Read more...]

. Add the Crowd Authentication Realm -> http://www.sonatype.com/books/nexus-book/reference/crowd.html#crowd-sect-auth-realm[Read more...]

. Map Crowd Groups and Roles to Nexus -> http://www.sonatype.com/books/nexus-book/reference/crowd.html#crowd-sect-mapping[Read more...]

.Conclusion
**** 
If you’ve consolidated authentication and access control using
 Atlassian Crowd, take the time to integrate your repository manager
 with it as well. Nexus Professional’s support for Crowd makes this
 easy.
****

=== Process Improvement - Custom Repository Metadata

Nexus Professional provides a facility for user-defined, custom
metadata. If you need to keep track of custom attributes to support
approval workflow or to associate custom identifiers with software
artifacts, you can use Nexus to define and manipulate custom
attributes which can be associated with artifacts in a Nexus
repository.

This advanced functionality can be used to extend Nexus to support
complex work flows that can keep track of the state of an
artifact. Organizations can use the Custom Repository Metadata service
alongside the rich REST API offered in Nexus to create custom
solutions that support decision making and the qualification of
artifacts during the development process.

*In this example, you will...*

* Install the Custom Metadata plugin in Nexus Professional

* Add custom metadata to an artifact via the Nexus interface

* Query artifacts using this custom metadata

*Let's get started*

. Install the Custom Metadata Plugin -> http://www.sonatype.com/books/nexus-book/reference/custom-metadata-plugin.html[Read more...]

. Edit Artifact Metadata -> http://www.sonatype.com/books/nexus-book/reference/custom-metadata-plugin.html#_editing_artifact_metadata[Read more...]

. View Artifact Metadata -> http://www.sonatype.com/books/nexus-book/reference/custom-metadata-plugin.html#_viewing_artifact_metadata[Read more...]

. Search Artifact Metadata -> http://www.sonatype.com/books/nexus-book/reference/custom-metadata-plugin.html#_searching_artifact_metadata[Read more...]

.Conclusion
**** 
If your organization has custom requirements for tracking artifact
 metadata, the Custom Re- pository Metadata can be used to extend the
 set of attributes stored with a particular attribute.
****

=== Process Improvement - Hosting Project Web Sites

Nexus Professional is a publishing destination for project
websites. You don’t have to worry about configuring another web server
or configuring your builds to distribute the project site using a
different protocol. Simply point your project at Nexus and deploy the
project site.

With Nexus Professional as a project’s site hosting solution, there’s
no need to ask IT to provision extra web servers just to host project
documentation. Keep your development infrastructure consolidated and
deploy project sites to the same server that serves your project’s
artifacts.

*In this example, you will...*

* Create a Hosted repository with the Maven Site provider

* Configure your project to publish a web site to Nexus Professional

*Let's get started*

. Configure Build to Deploy Sites to Nexus -> http://www.sonatype.com/books/nexus-book/reference/_configuring_maven_for_site_deployment.html[Read more...]

. Create a Site Repository -> http://www.sonatype.com/books/nexus-book/reference/_creating_a_site_repository.html[Read more...]

. Publish a Site to Nexus -> http://www.sonatype.com/books/nexus-book/reference/_publishing_a_maven_site_to_nexus.html[Read more...]

.Conclusion
****
If your projects need to publish HTML reports or a project web site,
 Nexus provides a consolidated target for publishing project-related
 content.
****

=== Security - The User Account Plugin

When you are running a large, public instance of Nexus, it is often
useful to allow users to sign up for an account without the assistance
of an administrator. Nexus Professional’s User Account plugin allows
for just this. With this plugin activated, a new user simply has to
fill out a simple form and type in letters from a CAPTCHA. Once a user
has signed up for Nexus, Nexus will then send an email with a
validation link. If you are working in an environment with hundreds or
thousands of users the User Account plugin will allow you to support
the tool without having to create logins for each individual user.

*In this example, you will...*

* TODO

*Let' get started*

. Install and Configuring the User Account Plugin -> http://www.sonatype.com/books/nexus-book/reference/user-account.html[Read more...]

. Test self-serve Account Creation -> http://www.sonatype.com/books/nexus-book/reference/user-account.html#user-account-sect-sign-up[Read more...]

.Conclusion
**** 
If you have a public Nexus instance or an internal Nexus instance
 supporting hundreds to thousands of developers, you can give these
 users the ability to sign-up for an account. The self-service
 capability fosters adoption for both internal development teams and
 OSS devel- opment teams.
****

=== Process Improvement - Maven Settings Management

Nexus Professional along with the Nexus Maven Plugin allows you to
manage Maven Settings. Once you have devel- oped a Maven Settings
template, developers can then connect to Nexus Professional using the
Nexus Maven plugin which will take responsibility for downloading a
Maven Settings file from Nexus and replacing the existing Maven
Settings on a local workstation.

*In this example, you will...*

* Configure a global Maven Settings template in Nexus Professional

* Download a customized, user-specific Maven settings file using the Nexus Maven plugin

*Let's get started*

. Manage Maven Settings Templates ->
  http://www.sonatype.com/books/nexus-book/reference/settings-sect-install.html[Read more...]

. Download Settings from Nexus -> http://www.sonatype.com/books/nexus-book/reference/settings-sect-downloading.html[Read more...]

.Conclusion
****
TODO
****
