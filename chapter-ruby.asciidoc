[[rubygems]]
== Rubygems

=== Introduction

For developers using the Ruby programming language, RubyGems serves as their
package management solution. In fact, since version 1.9 of Ruby, it's been
included as part of the default Ruby Library. And, just like all package
managers, this allows for ease of use when distributing programs or libraries.

Of course, package management really only goes as far as improving distribution.
A great feat certainly, but to really find success, a development community
needs to exists. At the heart of every development community, especially those
like Ruby where open source projects are one of the most critical elements, the
community needs a place to host and share their projects.

Enter link:https://Rubygems.org[rubygems.org], a popular and leading gem hosting
service supporting the Ruby and Rubygems. Here, a variety of open source Ruby
projects (gems) can be both uploaded and downloaded.

With these ingredients, Ruby has become a successful platform for developers .
This means lots of teams are downloading and exchanging lots of components on a
regular basis. Obviously, this can (and does) become a crunch on resources, not
to mention a pain to manage.

Luckily, just as with other Nexus repositories, Nexus integrates with Rubygems.
That means a user can connect to host downloads procured from rubygems.org,
create proxies, and host their own component. When necessary a package only
needs to be downloaded (or uploaded) once, and can then be distributed among the
necessary teams.

Using Nexus as a proxy, this avoids the overhead of teams and individual
developers having to repeatedly download or share components in a haphazard and
disorganized manner.

NOTE: Rubygems support is a feature of Nexus 2.11 and higher, and is available
in Nexus Professional and Nexus Open Source.

=== What's Included?

The following features are included as part of the Nexus Rubygem functionality:

* Supports "hosted" repository for hosting Rubygems
* Supports "proxy" repository for proxying remote Rubygems repository
* Supports "group" repository for grouping Rubygems repositories

NOTE: None of these require Ruby (or any extra tooling) to be present on the OS
that runs Nexus. Ruby specific things are handled by jRuby bundled with Nexus.

[[ruby-proxying-registries]]
=== Proxying Rubygem Registries

To reduce duplicate downloads and improve download speeds for your developers
and CI severs, you should proxy this registry as well as any other registries
you require.

To proxy an external Rubygem registry, simply create a new 'Proxy
Repository' as documented in <<confignx-sect-manage-repo>>. The 'Provider' has
to be set to +Rubygem+. The 'Remote Storage Location' has to be set to the URL
of the remote repository you want to proxy. The official URL for Rubygems.org is

----
https://rubgems.org
----

A complete configuration for proxying the Rubygems.org is visible in
<<fig-ruby-proxy>>.

[[fig-ruby-proxy]]
.Proxy Repository Configuration for the Rubygems.org
image::figs/web/ruby-proxy.png[scale=50]

[[ruby-private-registries]]
=== Private Rubygems Registries

A private Rubygems registry can be used to upload your own packages as well as
third-party packages. You can create a private Rubygems registry by setting up a
hosted repository with the Rubygems format in Nexus. It is good practice to
create two separate hosted repositories for these purposes.

To create a hosted repository with the Rubygems format, simply create a new
'Hosted Repository' and set the 'Provider' to +rubygems+ as documented in
<<confignx-sect-manage-repo>>. A sample configuration for an internal Rubygems
hosted repository is displayed in <<fig-ruby-hosted>>.

[[fig-ruby-hosted]]
.Example Configuration for a Private Rubygems Registry
image::figs/web/ruby-hosted.png[scale=50]

The Rubygems registry information is immediately updated as packages are
deployed or deleted from the repository.

[[ruby-grouping-registries]]
=== Grouping Rubygem Registries

A repository group is the recommended way to expose all your Rubygem registered
repositories (in Nexus) to your users, without needing any further client side
configuration. A repository group allows you to expose the aggregated content of
multiple proxy and hosted repositories with one URL to Rubygems and other tools.
This is possible for Rubygem repositories by creating a new 'Repository Group'
with the 'Format' set to +rubygems+.

A typical, useful example would be to group the proxy repository that: proxies
the Rubygems registry, a Rubygems hosted repository with internal software
packages, and another Rubygems hosted repository with third-party packages. The
configuration for such a setup is displayed in <<fig-ruby-group>>.

[[fig-ruby-group]]
.A Rubygems Group Combining the Rubygems.org Registry and Two Private Registries
image::figs/web/ruby-group.png[scale=50]

Using the 'Repository Path' of the repository group as your Rubygems repository
URL in your client tool will give you access to the packages in all three
repositories with one URL. Any new packages added as well as any new
repositories added to the group will automatically be available.

[[ruby-deploying-packages]]
=== Deploying Gems

By this point you should have set up the various repositories in Nexus (proxy,
hosted, and group), and you should be ready to publish gems to these
repositories. All this happens from the CLI, and there are few options
available, including:

* Deploying without Authentication
* Deploying with Nexus gem (assists when authentication is configured for a
  repository).
* Deploying with Bundler

NOTE: At this time Rubygems does not support auth of any kind.

[[ruby-no-auth]]
==== Without Authentication

If you aren't currently requiring authentication to deploy gems to your
repositories in Nexus, you can simply change the sources for Rubygems:

----
$ gem sources -c

*** Removed specs cache ***

$ gem sources -r https://rubygems.org/

https://rubygems.org/ removed from sources

$ gem sources -a
http://localhost:8081/nexus/content/repositories/rubygems-group/

http://localhost:8081/nexus/content/repositories/rubygems-group/ added to
sources

$
----

[[ruby-auth]]
==== With Authentication (Nexus Gem)

If you do have authentication configured, you will need the Nexus Gem,
and set up a new Ruby Gems source. First, use this syntax to install the Nexus
gem:

----
$ gem install nexus
----

NOTE: This assumes you have installed the latest version of Ruby, which includes
the Rubygem package manager.

After successful installation, you will get a confirmation that looks like this:

====

Thanks for installing Nexus gem! You can now run:

    gem nexus          publish your gems onto Nexus server

    nbundle            a bundler fork with mirror support. for bundler before 1.5.0
                       
add a mirror with:

    bundle config mirror.http://rubygems.org
    http://localhost:8081/nexus/content/repositories/rubygems.org

for bundler before 1.5.0 use 'nbundle' instead of 'bundle' to use the mirror

====

Note: When using the Nexus gem for the first time, it will prompt you to setup
configuration (deploy URL, the URL of the rubygems-hosted repository and
password). This is stored in file ~/.gem/nexus, which can be edited at any time.

While use of the gem is pretty simple...

----

gem nexus

----

Help is provided via:

----

$ gem help nexus 

----

From here you will need to Add a source with 'Basic Auth' to the RubyGems list
of sources. Here's an example:

====

$ gem sources -a
http://myuser:mypassword@localhost:8081/nexus/content/repositories/rubygems-group/

http://localhost:8081/nexus/content/repositories/rubygems-group/ added to
sources

====

Now, when you run the build command for Rubygems, you will have the necessary
authorization.

[[ruby-bundler]]
==== With Bundler (and authentication)

If you are using the popular Bundler environment for tracking and installing
gems, you will need to make a few changes there as well. In our example below
we've create a group repository in Nexus. Additionally, that repository has a
two other repositories (a hosted and proxy) included with it.

Here's how your Bundler configuration should change:

====

$ bundle config mirror.http://rubygems.org
http://localhost:8081/nexus/content/repositories/rubygems-group

$ bundle config mirror.https://rubygems.org
http://localhost:8081/nexus/content/repositories/rubygems-group

====

When you make these changes, you can verify them by using the following command.

====

$ bundle config

====

The following will be printed on your screen.

====

Settings are listed in order of priority. The top value will be used.

mirror.http://rubygems.org
Set for the current user (/Users/cstamas/.bundle/config):
"http://localhost:8081/nexus/content/repositories/rubygems-group"

mirror.https://rubygems.org
Set for the current user (/Users/cstamas/.bundle/config):
"http://localhost:8081/nexus/content/repositories/rubygems-group"

$

====

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
