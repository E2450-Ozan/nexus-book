[[ssl]]
== Configuring Nexus for SSL

[[ssl-sect-introduction]]
=== Introduction

Using Secure Socket Layer (SSL) communication within Nexus is an important security feature. Secure communication can be
inbound or outbound.

Outbound client communication may include integration with a remote proxy repository over HTTPS, SSL/TLS secured
servers, LDAPS LDAP servers, or specialized authentication realms such as the Crowd realm.

Inbound client communication includes web browser HTTPS access to the user interface or tool access to repository
content and REST APIs.

[[ssl-sect-client-cert]]
=== Managing Outbound SSL Certificates

NOTE: SSL Certificate Management is a {pro} feature. Other editions may require managing certificate trust from the
command line.

==== Trusting SSL Certificates of Remote Repositories

When a remote proxy repository SSL certificate is not trusted, then you may notice the repository may be automatically
blocked or that outbound requests fail with a message similar to 'PKIX path building failed'.

Nexus includes a specific 'SSL' configuration tab for each repository to solve this problem. It is displayed when the
remote URL of a proxy repository resolves to an `https://` location.

The 'SSL' tab shows the details of the remote certificate, as in the example <<fig-ssl-secure-central>> . Use the 'SSL'
tab when the remote certificate is not well-known public certificate authority in the default Java trust store.

To confirm trust of the remote certificate, click the 'Add to trust store' button on the top-right of the 'SSL' tab.
This feature is analogous to going to the <<fig-ssl-certificates-list>> user interface and using the 'Add' button found
there. If the certificate is already added, the button can undo this operation and will read 'Remove from trust store'.

The checkbox labelled 'Use Nexus SSL trust store' is used to confirm that Nexus should consult the Nexus private
internal truststore when confirming trust of the remote repository certificate. Without adding the certificate to the
private truststore and enabling the checkbox, the repository may not trust the remote.

Keep in mind that the default JVM truststore and the private Nexus truststores are merged before deciding the trust of
the remote server. The default Java truststore already contains public certificate authority trust certificates, meaning
if the remote certificate is signed by one of these authorities, then explicitly trusting the remote certificate will
not be needed.

[[fig-ssl-secure-central]]
.SSL Tab for a Proxy Repository with Remote Server Using HTTPS
image::figs/web/ssl-secure-central.png[scale=50]

NOTE: When removing a remote trusted certificate from the truststore, a Nexus restart is required before a repository
may become untrusted.

[[ssl-sect-client-cert-mgt]]
==== Trusting SSL Certificates Generally

{pro} allows you to manage trust of all remote SSL certificates in a centralized user interface. Use this interface when
you wish to examine all the currently trusted certificates for remote repositories, or manage certificates from secure
remotes that are not repositories.

Access <<fig-ssl-certificates-list>> by selecting 'SSL Certificates' in the left-hand 'Administration' menu. The list
shows any certificates that are already trusted.

[[fig-ssl-certificates-list]]
.SSL Certificates Administration
image::figs/web/ssl-certificates-list.png[scale=50]

Buttons are provided to 'Refresh' the list from the server, add a new certificate or delete the selected certificate.

The 'Add' button presents two options - 'Paste PEM' and 'Load from server'.

There are two types of secure addresses supported by the 'Load from server' option.

The common approach is to choose 'Load from server' and enter the full +https://+ url of the remote site. Nexus will
connect using HTTPS and use the HTTP proxy server settings if applicable. Any other protocol than +https://+ is ignored,
and a direct socket connection is attempted in that case.

When the remote is not accessible using +https://+, only enter the host name or IP address, followed by colon and the
port number. For example: +example.com:8443+ . In this case Nexus will attempt a direct SSL socket connection to the
remote host at the specified port.

You can also choose the 'Paste PEM' option trust a remote certificate. Copy and paste the Base64 encoded X.509 DER
certificate to trust. This text must be enclosed between lines containing +-----BEGIN CERTIFICATE-----+ and +-----END
CERTIFICATE-----+ .

An example method to get the encoded X.509 certificate into a file on the command line using +keytool+ is:

----
keytool -printcert -rfc -sslserver example.com:8443 > example.pem
----

The resulting example.pem file will contain the encoded certificate.

An example of inserting such a certificate is shown in <<fig-ssl-pem>>.

[[fig-ssl-pem]]
.Providing a Certificate in PEM Format
image::figs/web/ssl-pem.png[scale=50]

If Nexus can successfully retrieve the remote certificate or decode the pasted certificate, you will be prompted with
<<fig-ssl-add-server>> confirmation before it is trusted. Please review the displayed information carefully before
clicking 'Add Certificate'.

[[fig-ssl-add-server]]
.Certificate Details Displayed after Successful Retrieval
image::figs/web/ssl-add-server.png[scale=50]

In some organizations, all of the remote sites are accessed through a globally configured proxy server which rewrites
every SSL certificate. This single proxy server is acting as a private certificate authority. In this case, you can
https://support.sonatype.com/entries/83303437[follow special instructions for trusting the proxy server root
certificate], which can greatly simplify your certificate management duties.

==== Trusting SSL Certificates Using Keytool

Managing trusted SSL certificates from the command line using
http://docs.oracle.com/javase/8/docs/technotes/tools/index.html#security[keytool] and system properties is an
alternative and more complex option than using the {pro} SSL Certificate Management features.

Before you begin the process of trusting a certificate from the command line you will need:

* a basic understanding of 
  http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html[SSL certificate technology and how the Java VM implements this feature]

* command line access to the Nexus host operating system and the 'keytool' program

* network access to the remote SSL server you want to trust from the host running Nexus. This must include any HTTP
  proxy server connection details

If you are connecting to servers which have certificates that are not signed by a public CA, you will need to complete
these steps:

. Copy the default JVM truststore file ($JAVA_HOME/jre/lib/security/cacerts) to a Nexus specific location for editing.
. Import additional trusted certificates into the copied truststore file.
. Configure JSSE system properties for the Nexus process so that the custom truststore is consulted instead of the 
  default file.

Some common commands to manually trust remote certificates can be found in our
https://sonatype.zendesk.com/entries/95353268-SSL-Certificate-Guide#common-keytool-commands[SSL Certificate Guide].

===== Configuring Nexus With a Custom Truststore

Once you have imported your trusted certificates into a truststore file, you can modify
'$NEXUS_HOME/bin/jsw/conf/wrapper.conf' to set the system properties necessary to load this file. Make sure to adapt the
property numbers (10, 11) to start at the last unused value, which depends on the rest of your configuration.

----
wrapper.java.additional.10=-Djavax.net.ssl.trustStore=<truststore>
wrapper.java.additional.11=-Djavax.net.ssl.trustStorePassword=<truststore_password>
----

Once you have added the properties shown above, restart Nexus and attempt to proxy a remote repository which requires an
SSL certificate. Nexus will automatically register the certificates in the truststore file as trusted.

[[ssl-sect-ssl-direct]]
=== Configuring Nexus Inbound HTTPS

Providing access to the Nexus user interface and content via HTTPS is a recommended best practice for any deployment.

You have two options.

A common approach is to access Nexus through a dedicated server which answers HTTPS requests on behalf of Nexus - these
servers are called reverse proxies or SSL/TLS terminators. There are a few advantages to using these which can be
discussed with your networking team. For example, Nexus can be upgraded/installed without the need to work with a custom
JVM keystore. The reverse proxy could already be in place for other systems in your network. Common reverse proxy
choices are Apache httpd, nginx, Eclipse Jetty or even dedicated hardware appliances. All of them can be configured to serve
SSL content, and there is a large amount of reference material available online.

We will elaborate here on the second approach, which is to use the Eclipse Jetty instance that is distributed with Nexus
accept HTTPS connections.

TIP: Keep in mind that you will have to redo some of these configurations each time you upgrade Nexus, since they are
modifications to the embedded Jetty instance located in '$NEXUS_HOME'.

To configure the Nexus Eclipse Jetty instance to accept HTTPS connections, first enable the file +jetty-https.xml+ to the
Jetty startup configuration in +wrapper.conf+ as detailed in <<nexus-home-conf>>.

Next, the HTTP port you want to use for the HTTPS connection has to be defined by setting the +application-port-ssl+
property in +nexus.properties+.

----
application-port-ssl=8443
----

Create a keystore file containing a single certificate that Jetty will use for the HTTPS connections. Instructions are
available on the http://www.eclipse.org/jetty/documentation/current/configuring-ssl.html[Eclipse Jetty documentation
site]. You may find the common keytool commands in our SSL Certiicate Guide a useful reference.

Adjust the values in the +jetty-https.xml+ file in +NEXUS_HOME/conf+ to reflect your keystore settings. The default
configuration in that file suggests to create a subdirectory +NEXUS_HOME/conf/ssl+ and copy the +keystore+ file in there
and rename it to +keystore.jks+. You can either do that or choose a different location or filename for your keystore
file and update the paths for the +keystore+ and +truststore+ in the +jetty-https.xml+ file.

Once this is all in place you can start up Nexus and access the user interface at e.g., +https://localhost:8443/nexus+.
If you have just created a self-signed certificate, modern web browsers will warn you about the certificate and you will
have to acknowledge the fact that the certificate is self-signed. To avoid this behavior, you have to get a certificate
signed by a signing authority or reconfigure the web browser.

Nexus is now available via HTTPS. If desired you can configure automatic redirection from HTTP to HTTPS by adding usage
of +jetty-http-redirect-to-https.xml+ as additional app parameters in +wrapper.conf+ as well as update the +Base URL+ in
your Nexus server configuration.


////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
