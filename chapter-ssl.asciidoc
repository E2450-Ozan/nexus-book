[[ssl]]
== Configuring Nexus for SSL

[[ssl-sect-introduction]]
=== Introduction

Using Secure Socket Layer (SSL) communication within Nexus is an important security feature. Communication can be
inbound or outbound.

Inbound client communication includes web browser HTTPS access to the user interface or tool access to repository
content. Some specialized features such as Smart Proxy trust relationships also establish secure connections.

Outbound client communication may include integration with a remote proxy repository over HTTPS, SSL/TLS secured
email servers, LDAPS LDAP servers, or specialized realms such as the Crowd realm.

[[ssl-sect-client-cert]]
=== SSL Client Certificates

[[ssl-sect-client-cert-mgt]]
==== Outbound SSL Certificate Management: Manually Trusting Remote Certificates

Nexus allows you to manage trust of remote SSL certificates directly in the user
interface. Access <<fig-ssl-certificates-list>> by selecting 'SSL Certificates'
in the left-hand 'Administration' menu. The list of certificates shows any remote certificates
that are already trusted.

NOTE: The SSL Certificate Management is a Nexus Pro feature.

[[fig-ssl-certificates-list]]
.SSL Certificates Administration
image::figs/web/ssl-certificates-list.png[scale=50]

Buttons are provided to 'Refresh' the list from the server, add a new certificate or delete the selected certificate.

The 'Add' button presents two options - 'Paste PEM' and 'Load from server'.

There are two types of secure addresses supported by the 'Load from server' option.

The simplest approach is to choose 'Load from server' and enter the full +https://+ url of the remote site. Nexus will
connect using HTTPS and use the HTTP proxy server settings if applicable. Any other protocol than +https://+ is
ignored, and a direct socket connection is attempted in that case.

When the remote is not accessible using +https://+, only enter the host name or IP address,
followed by colon and the port number. For example: +example.com:8443+ In this case Nexus will attempt a direct SSL
socket connection to the remote host at the specified port.

You can also choose the 'Paste PEM' option trust a remote certificate. Copy and paste the Base64 encoded X.509
DER certificate to trust. This text should be enclosed between +-----BEGIN CERTIFICATE-----+ and +-----END
CERTIFICATE-----+ .

An example method to get the encoded X.509 certificate into a file on the command line using +keytool+ is:

----
keytool -printcert -rfc -sslserver example.com:8443 > example.pem
----

An example of inserting such a certificate is shown in <<fig-ssl-pem>>.

[[fig-ssl-pem]]
.Providing a Certificate in PEM Format
image::figs/web/ssl-pem.png[scale=50]

In some organizations, all of the remote sites are accessed through a globally configured proxy server which rewrites
every SSL certificate, acting as a private certificate authority. In this case, you can https://support.sonatype
.com/entries/83303437[follow special instructions for trusting the proxy server root certificate], which can will
simplify certificate management in Nexus.

If Nexus can successfully retrieve the remote certificate or decode the pasted certificate, you will be prompted with
<<fig-ssl-add-server>> confirmation before it is trusted. Please review the displayed information carefully
before clicking 'Add Certificate'.

[[fig-ssl-add-server]]
.Certificate Details Displayed after Successful Retrieval
image::figs/web/ssl-add-server.png[scale=50]

==== Proxying SSL Secured Remote Repositories

When setting up a proxy repository with a remote storage location
secured with HTTPS the repository administration will display an 'SSL'
configuration tab under the list of repositories if the proxy
repository is selected. For a repository using a self-signed
certificate, the repository status will initially be set to be in
service, but the remote will be automatically blocked and set to be
unavailable, since the certificate of the remote server is not
trusted. Remote repositories that use a certificate authority(CA)-signed 
certificate will be automatically trusted.

The 'SSL' tab displays as visible in <<fig-ssl-secure-central>> the
details of the certificate and allows you to add the certificate to
the trust store or to remove it from it with the button on the top
right-hand corner named 'Add to trust store' and 'Remove from trust
store' respectively. 

In addition, the checkbox on the top left corner allows you to store
the certificate in the Nexus internal SSL trust store. Otherwise the
certificate is installed into the trust store of the Java Virtual 
Machine (JVM) running Nexus. Using the Nexus internal trust store is 
recommended. It will work fine, even when migrating Nexus from one 
machine to another or when switching the Java runtime and JVM between 
restarts for example during upgrades. At runtime the JVM and Nexus 
trust stores are merged and both used so you can use a combination, 
if your organization e.g., maintains a default trust store for all 
JVM installations.

[[fig-ssl-secure-central]]
.SSL Tab for a Proxy Repository with Remote Server Using HTTPS
image::figs/web/ssl-secure-central.png[scale=50]

When removing a certificate from the trust store, a Nexus restart is required.

==== Manually Configuring Trust Stores

The Nexus user interface should be sufficient to work with the trust
stores and certificates. In older versions of Nexus as well as
some use cases, you need to manually configure the trust store. 

Sonatype provides an import-ssl tool that can be downloaded from 
http://download.sonatype.com/nexus/import-ssl.jar[http://download.sonatype.com/nexus/import-ssl.jar]. 
It allows you to import a client certificate in two steps: 

* importing the server's SSL chain and 
* importing the client SSL key/certificate pair.

The Java Virtual Machine running Nexus uses the
http://docs.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html[Java
Secure Socket Extension (JSSE)] to enable secure Internet
communication. It uses two certificate stores - +truststore+ and +keystore+.

A truststore contains certificates from servers run by other parties
with who you expect to communicate, or from Certificate Authorities
that you trust to identify other parties. This truststore ships with a
number of CA's out-of-the-box, trusted root certificates.

A keystore contains private keys and the certificates with their 
corresponding public keys. Typically, they are stored in separate
files stored in the default location of +$\{JRE_HOME\}/lib/security/cacerts+.

Some notes about the location of the keystore and default
keystore passwords:

* If you are using the default JSSE keystore locations on either a
Linux or OS X platform, you must run the commands below as the
root user. You can do this either by changing to the root user (+su -+)
or by using the sudo command: +sudo [command]+.

* The default password used by Java for the built-in keystores is
'changeit'. If your key-store uses a different password, you'll need to
specify that password as the last parameter on the command lines
above.

* If you want to specify your own keystore/truststore file, provide that in
place of <keystore_dir> in the examples below.

* If you're using a password other than 'changeit' for your keystore,
you should supply it immediately following the keystore path in the
commands below.

* If you specify a keystore location that doesn't exist, the
import-ssl utility will create it on-demand.

Before you begin the process of importing a Server SSL Chain and a
client certificate you will need the following:

* Network access to the SSL server you are connecting to,

* An SSL client certificate, 

* and a certificate password.

For server certificates you should either import directly into
+$\{JRE_HOME\}/lib/security/cacerts+, or make a copy of the file and
import into that. 

WARNING: If you replace the existing truststore rather than adding to
it or if you override the truststore location, you will lose all of
the trusted CA root certificates of the JRE and no SSL sites will be
accessible.

===== Import the Server SSL Chain

The first command imports the entire self-signed SSL certificate chain
for central.sonatype.com into your JSSE keystore:

----
$ java -jar import-ssl.jar server repo1.maven.org <keystore>
----

Substitute the server name used in the previous listing with
the server name to which you are attempting to connect. This particular
command will connect to +https://repo1.maven.org+, retrieve, and
import the server's SSL certificate chain.

===== Import the Client SSL Key/Certificate Pair

The second command imports your client-side SSL certificate into the
JSSE keystore, so Nexus can send it along to the server for
authentication:

----
$ java -jar import-ssl.jar client <your-certificate.p12> \
<your-certificate-password> keystore
----

When the client command completes, you should see a line containing
the keystore path. Please note this, as you will use it in your 
next configuration step. 

----
...
Writing keystore: /System/Library/Frameworks/JavaVM.framework/\
Versions/1.6.0/Home/lib/security/jssecacerts
----

If you want to make a new keystore into which to import your keys, 
use the keytool that ships with your Java installation to
create an empty keystore:

----
keytool -genkey -alias foo -keystore keystore 
keytool -delete -alias foo -keystore keystore 
----

TIP: Make sure to use the keytool commands for your Java version used
to run Nexus. The documentation for keytool is available online for
http://docs.oracle.com/javase/6/docs/technotes/tools/windows/keytool.html[Java
6] as well as
http://docs.oracle.com/javase/7/docs/technotes/tools/windows/keytool.html[Java
7].


===== Configuring Nexus Startup

Once both sets of SSL certificates are imported to your keystore
and/or truststore, you can modify the 'wrapper.conf' file located
in '$NEXUS_HOME/bin/jsw/conf/' to inject the JSSE system properties necessary
to use these certificates, as seen below adapting the iterator number
(10, 11.. ) to start at the last used value, which depends on the rest
of your configuration.

----
wrapper.java.additional.10=-Djavax.net.ssl.keyStore=<keystore>
wrapper.java.additional.11=-Djavax.net.ssl.keyStorePassword=<keystore_password>
wrapper.java.additional.12=-Djavax.net.ssl.trustStore=<truststore>
wrapper.java.additional.13=-Djavax.net.ssl.trustStorePassword=<truststore_password>
----

Once you have configured the Nexus startup option shown above, restart
Nexus and attempt to proxy a remote repository which requires an SSL
client certificate. Nexus will use the keystore location and keystore
password to configure the SSL interaction to accept the server's SSL
certificate and send the appropriate client SSL certificate using the
manual configuration you have completed with the import-ssl tool.

[[ssl-sect-ssl-direct]]
=== Configuring Nexus to Serve via SSL

Providing access to the Nexus user interface and content via HTTPS
only is a recommended best practice for any deployment.

The recommended approach to implementation is to proxy Nexus behind a
server that is configured to serve content via SSL and leave Nexus
configured for http. The advantage of this approach is that Nexus can
easily be upgraded and there is no need to work with the JVM
truststore. In addition, you can use the expertise of your system
administrators and the preferred server for achieving the proxying,
which in most cases will already be in place for other systems.

Common choices are servers like Apache httpd, nginx, Eclipse Jetty or
even dedicated hardware appliances. All of them can easily be
configured to serve SSL content, and there is a large amount of
reference material available for configuring these servers to serve
secure content. For example, Apache httpd would be configured to use
mod_ssl.

Alternatively the Jetty instance that is part of the default Nexus
install can be configured to serve SSL content directly, and if you
would like to avoid the extra work of putting a web server like Apache
httpd in front of Nexus, this section shows you how to do that.

TIP: Keep in mind that you will have to redo some of these
configurations each time you upgrade Nexus, since they are
modifications to the embedded Jetty instance located in '$NEXUS_HOME'.

To configure Nexus to serve SSL directly to clients, you need to
perform the following steps: 

As a first step you have to add the file +jetty-https.xml+ to the
Jetty startup configuration in +wrapper.conf+ as detailed in
<<nexus-home-conf>>.

Next, the HTTP port you want to use for the HTTPS connection has to be
  defined by setting the +application-port-ssl+ property in
  +nexus.properties+. 
----
application-port-ssl=8443
----


Now you are ready to create a keystore file. Instructions are
available on the
http://www.eclipse.org/jetty/documentation/current/configuring-ssl.html[Eclipse
Jetty documentation site] or directly on the documentation site for
the
http://docs.oracle.com/javase/7/docs/technotes/tools/windows/keytool.html[keytool]. As
a result of this procedure you will have a +keystore+ file and the
password values for +keyStorePassword+, +keyManagerPassword+ and
+trustStorePassword+.

Insert the values in the +jetty-https.xml+ file in
+NEXUS_HOME/conf+. The default configuration in that file suggests to
create a subdirectory +NEXUS_HOME/conf/ssl+ and copy the +keystore+
file in there and rename it to +keystore.jks+. You can either do that
or choose a different location or filename for your keystore file and
update the paths for the +keystore+ and +truststore+ in the
+jetty-https.xml+ file.

Once this is all in place you can start up Nexus and access the user
interface at e.g., +https://localhost:8443/nexus+. If you have just
created a self-signed certificate, modern web browsers will warn you
about the certificate and you will have to acknowledge the fact that
the certificate is self-signed. To avoid this behavior, you have to
get a certificate signed by a signing authority or reconfigure the web
browser.

Nexus is now available via HTTPS. If desired you can configure
automatic redirection from HTTP to HTTPS by adding usage of
+jetty-http-redirect-to-https.xml+ as additional app parameters in
+wrapper.conf+ as well as update the +Base URL+ in your Nexus server
configuration.


////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
