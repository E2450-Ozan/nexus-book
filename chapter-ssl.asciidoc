[[ssl]]
== Configuring Nexus for SSL

[[ssl-sect-introduction]]
=== Introduction

Using Secure Socket Layer (SSL) communication within Nexus is an important security feature. Secure communication can be
inbound or outbound.

Inbound client communication includes web browser HTTPS access to the user interface or tool access to repository
content and REST APIs.

Outbound client communication may include integration with a remote proxy repository over HTTPS, SSL/TLS secured
email servers, LDAPS LDAP servers, or specialized authentication realms such as the Crowd realm.


[[ssl-sect-client-cert]]
=== SSL Client Certificates

NOTE: SSL Certificate Management is a Nexus Pro feature. Other editions require externally trusting certificates from
the command line.

==== Trusting SSL Certificates of Remote Repositories

When a remote proxy repository SSL certificate is not trusted, then you may notice the repository may be automatically
blocked or that outbound requests fail with a message similar to "PKIX path building failed".

Nexus includes a specific per repository configuration tab to solve this problem.

If you have a proxy repository using a remote URL that resolves to an +https://+ location, then when selected in the
repositories list, it will display a 'SSL' configuration tab.

The 'SSL' tab shows the details of the remote certificate, as in the example <<fig-ssl-secure-central>> . Use the
'SSL' tab when the remote certificate is not trusted well-known public certificate authority in the default
Java trust store.

To confirm you want to trust the remote certificate, click the 'Add to trust store' button on the
top-right of the SSL tab. This feature is analogous to going to the SSL Certificates administration user interface
and using the 'Add' button found there. If the certificate is already added, the button can undo this operation and
will read 'Remove from trust store' instead.

The checkbox labelled 'Use Nexus SSL trust store' is used to confirm that Nexus should consult the Nexus private
internal trust store when confirming trust of the remote repository certificate. Without both adding the certificate
to the private trust store and enabling the checkbox, the repository may not trust the remote.

Keep in mind that the default JVM trust store and the private Nexus trust stores are merged before deciding the trust
of the remote server. The default Java trust store already contains public certificate authority trust certificates,
meaning if the remote certificate is signed by one of these authorities, then explicitly trusting the remote
certificate will not be needed.

[[fig-ssl-secure-central]]
.SSL Tab for a Proxy Repository with Remote Server Using HTTPS
image::figs/web/ssl-secure-central.png[scale=50]

NOTE: When removing a remote trusted certificate from the trust store, a Nexus restart is required before a repository
may become untrusted.

[[ssl-sect-client-cert-mgt]]
==== General Management of Remote SSL Certificates

Nexus Pro allows you to manage trust of all remote SSL certificates in a centralized user interface. Use this interface
when you wish to examine all the currently trusted certificates for remote repositories, or manage certificates
from remote hosts that are not repositories.

Access <<fig-ssl-certificates-list>> by selecting 'SSL Certificates'
in the left-hand 'Administration' menu. The list of certificates shows any remote certificates
that are already trusted.

[[fig-ssl-certificates-list]]
.SSL Certificates Administration
image::figs/web/ssl-certificates-list.png[scale=50]

Buttons are provided to 'Refresh' the list from the server, add a new certificate or delete the selected certificate.

The 'Add' button presents two options - 'Paste PEM' and 'Load from server'.

There are two types of secure addresses supported by the 'Load from server' option.

The common approach is to choose 'Load from server' and enter the full +https://+ url of the remote site. Nexus will
connect using HTTPS and use the HTTP proxy server settings if applicable. Any other protocol than +https://+ is
ignored, and a direct socket connection is attempted in that case.

When the remote is not accessible using +https://+, only enter the host name or IP address,
followed by colon and the port number. For example: +example.com:8443+ In this case Nexus will attempt a direct SSL
socket connection to the remote host at the specified port.

You can also choose the 'Paste PEM' option trust a remote certificate. Copy and paste the Base64 encoded X.509
DER certificate to trust. This text should be enclosed between +-----BEGIN CERTIFICATE-----+ and +-----END
CERTIFICATE-----+ .

An example method to get the encoded X.509 certificate into a file on the command line using +keytool+ is:

----
keytool -printcert -rfc -sslserver example.com:8443 > example.pem
----

The resulting example.pem file will contain the encoded certificate.

An example of inserting such a certificate is shown in <<fig-ssl-pem>>.

[[fig-ssl-pem]]
.Providing a Certificate in PEM Format
image::figs/web/ssl-pem.png[scale=50]

If Nexus can successfully retrieve the remote certificate or decode the pasted certificate, you will be prompted with
<<fig-ssl-add-server>> confirmation before it is trusted. Please review the displayed information carefully
before clicking 'Add Certificate'.

[[fig-ssl-add-server]]
.Certificate Details Displayed after Successful Retrieval
image::figs/web/ssl-add-server.png[scale=50]

In some organizations, all of the remote sites are accessed through a globally configured proxy server which rewrites
every SSL certificate. This single proxy server is acting as a private certificate authority. In this case, you can
https://support.sonatype.com/entries/83303437[follow special instructions for trusting the proxy server root certificate],
which can greatly simplify your certificate management duties.

==== Managing SSL Certificate Trust Using Keytool

*SSL certificate management features are available in Nexus Pro only*. When this feature is
not available, then you need to manage trusted SSL certificates using the JVM command line tool
http://docs.oracle.com/javase/8/docs/technotes/tools/index.html#security[keytool].

Before you begin the process of trusting a remote certificate from the command line you will need:

* a basic understanding of http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html[SSL
  certificate technology and how the Java VM implements this feature].

* command line access to the Nexus host operating system

* network access to the remote SSL server you want to trust from the host running Nexus. This must include any HTTP
proxy server connection details.

A reminder that a truststore contains certificates from servers run by other parties with who you expect to
communicate, or from Certificate Authorities (CAs) that you trust to identify other parties. The default JVM
truststore ships with a large number of public CAs certificates - these are called 'trusted root certificates'. If a
remote site offers a certificate signed by a well known CA, then no additional steps to trust that certificate
should be needed.

Some basic commands to manually trust remote certificates can be found in our https://sonatype.zendesk
.com/entries/95353268-SSL-Certificate-Guide#common-keytool-commands[SSL Certificate Guide].

It is possible to copy the default JVM trust store of the JVM to another location and configure Nexus to use this
specific file. The advantage is that this file can survive JVM version upgrades. The disadvantage is that your file
does not automatically pick up new public certificate authorities added in the upgraded JVM.

===== Configuring Nexus Startup

Once both sets of SSL certificates are imported to your keystore
and/or truststore, you can modify the 'wrapper.conf' file located
in '$NEXUS_HOME/bin/jsw/conf/' to inject the JSSE system properties necessary
to use these certificates, as seen below adapting the iterator number
(10, 11.. ) to start at the last used value, which depends on the rest
of your configuration.

----
wrapper.java.additional.10=-Djavax.net.ssl.keyStore=<keystore>
wrapper.java.additional.11=-Djavax.net.ssl.keyStorePassword=<keystore_password>
wrapper.java.additional.12=-Djavax.net.ssl.trustStore=<truststore>
wrapper.java.additional.13=-Djavax.net.ssl.trustStorePassword=<truststore_password>
----

Once you have configured the Nexus startup option shown above, restart
Nexus and attempt to proxy a remote repository which requires an SSL
client certificate. Nexus will use the keystore location and keystore
password to configure the SSL interaction to accept the server's SSL
certificate and send the appropriate client SSL certificate using the
manual configuration you have completed with the import-ssl tool.

[[ssl-sect-ssl-direct]]
=== Configuring Nexus to Serve via SSL

Providing access to the Nexus user interface and content via HTTPS
only is a recommended best practice for any deployment.

The recommended approach to implementation is to proxy Nexus behind a
server that is configured to serve content via SSL and leave Nexus
configured for http. The advantage of this approach is that Nexus can
easily be upgraded and there is no need to work with the JVM
truststore. In addition, you can use the expertise of your system
administrators and the preferred server for achieving the proxying,
which in most cases will already be in place for other systems.

Common choices are servers like Apache httpd, nginx, Eclipse Jetty or
even dedicated hardware appliances. All of them can easily be
configured to serve SSL content, and there is a large amount of
reference material available for configuring these servers to serve
secure content. For example, Apache httpd would be configured to use
mod_ssl.

Alternatively the Jetty instance that is part of the default Nexus
install can be configured to serve SSL content directly, and if you
would like to avoid the extra work of putting a web server like Apache
httpd in front of Nexus, this section shows you how to do that.

TIP: Keep in mind that you will have to redo some of these
configurations each time you upgrade Nexus, since they are
modifications to the embedded Jetty instance located in '$NEXUS_HOME'.

To configure Nexus to serve SSL directly to clients, you need to
perform the following steps: 

As a first step you have to add the file +jetty-https.xml+ to the
Jetty startup configuration in +wrapper.conf+ as detailed in
<<nexus-home-conf>>.

Next, the HTTP port you want to use for the HTTPS connection has to be
  defined by setting the +application-port-ssl+ property in
  +nexus.properties+. 
----
application-port-ssl=8443
----


Now you are ready to create a keystore file. Instructions are
available on the
http://www.eclipse.org/jetty/documentation/current/configuring-ssl.html[Eclipse
Jetty documentation site] or directly on the documentation site for
the
http://docs.oracle.com/javase/7/docs/technotes/tools/windows/keytool.html[keytool]. As
a result of this procedure you will have a +keystore+ file and the
password values for +keyStorePassword+, +keyManagerPassword+ and
+trustStorePassword+.

Insert the values in the +jetty-https.xml+ file in
+NEXUS_HOME/conf+. The default configuration in that file suggests to
create a subdirectory +NEXUS_HOME/conf/ssl+ and copy the +keystore+
file in there and rename it to +keystore.jks+. You can either do that
or choose a different location or filename for your keystore file and
update the paths for the +keystore+ and +truststore+ in the
+jetty-https.xml+ file.

Once this is all in place you can start up Nexus and access the user
interface at e.g., +https://localhost:8443/nexus+. If you have just
created a self-signed certificate, modern web browsers will warn you
about the certificate and you will have to acknowledge the fact that
the certificate is self-signed. To avoid this behavior, you have to
get a certificate signed by a signing authority or reconfigure the web
browser.

Nexus is now available via HTTPS. If desired you can configure
automatic redirection from HTTP to HTTPS by adding usage of
+jetty-http-redirect-to-https.xml+ as additional app parameters in
+wrapper.conf+ as well as update the +Base URL+ in your Nexus server
configuration.


////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
