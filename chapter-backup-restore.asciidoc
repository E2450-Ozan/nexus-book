[[backup]]
==  Backing Up and Restoring {nxrm}
{inall}

TBD

[[backup-introduction]]
=== Introduction

TBD

[[backup-requirements]]
=== Requirements for Backing Up {nxrm}

TBD


[[backup-preparation]]
=== Preparing a Backup for {nxrm}

In preparation for a backup, {nxrm} provides a scheduled task that allows you to export settings and
metadata from your repository manager's underlying databases. The task only exports the content, therefore
you need to develop a backup strategy to store the exported files with anything else you wish to backup.

When you run an export of these settings, they will be stored at the new location you determine when
configuring the task. If part of your strategy is to back up your entire repository manager to a secondary
location, you can also preserve any custom configurations to be restored later.

The databases that you export have pointers to blob stores, which reside in the data directory and contain
components and assets potentially across multiple repositories. If not backed up together the component
metadata can point to non-existent blob stores, or the blob store metadata may be non-descript when attempting
to restore the exported data. So when you plan to back up the exported data, it's recommended that you copy
both database and blob stores together to a new location, in order to keep the data intact.

Here's a common scenario to back up references and explicit parts of your repository manager in a piecemeal
fashion:

1. Configure the 'Database backup' task to export databases.
2. Run the scheduled task to export the databases to a new folder.
3. Back up the installation and data directories.
4. Back up blob stores.

It is important to use the 'Database backup' task because it generates a snapshot of the databases preserved
for backup instead of copying the entire data directory, where they reside. Exporting the data directory without
configuring the task and copying the output to another location may reflect a state of the directory that's
inconsistent with the output you can automatically schedule with 'Database backup'.

NOTE: Write access to databases is temporarily suspended until a backup is complete. It's advised to
schedule backup tasks during off-hours.

////
After you complete the database export and store its dependencies to a secure location, you can <<backup-retrieve
,restore>> the exported files.
////

[[backup-task]]
=== Configuring and Running a Database Backup Task

To configure and run a new task for database backup, review the steps in the Configuration chapter. The form
for this task includes an additional field called 'Backup location', which requires you to enter the path to a
directory where you want to store backup data, shown in <<fig-backup-task>>.

////
Note: removed the anchor/macro referencing tasks due to missing steps addressed in another ticket (bug)  
////

[[fig-backup-task]]
.Manual Database Backup Task with Directory Location 
image::figs/web/backup-task.png[scale=50]

When the task runs it exports backup data to the path specified in the 'Backup location' field. The directory
you input will contain +.bak+ files of the following databases:

Access log:: login and usage information among repository manager users 
Analytics:: event data and overall repository manager usage
Auditing:: a record of repository manager configuration changes as well as asset or component additions and
removals
Component:: all related data that make up components within the repository manager 
Configuration:: general adminstrative configurations such as scheduled tasks, email server configuration, etc.
Security:: all user and access rights management content

All backup files are presented in the timestamp format based on the time the task was started.

[[backup-node]]
=== Backing up a Single Node in {nxrm}

TBD
////
Distinguish single node backup from an backup for HA
////


[[backup-ha]]
=== Backing up {nxrm} in an HA Environment

TBD

[[backup-retrieve]]
=== Restoring a Database Backup

////
IMPORTANT:: The restoration process should be executed on a single node.  All nodes in an high availability cluster
should be stopped prior to restoration.
////

You can restore the exported database files to their full state after the backup is complete. You will need access to
the location specified by your backup task. In preparation for the restore you should only remove the `db` folders you
want to retrieve. For example, if configuring the task to store your `.bak` files from `db` to a relative location
called `backup`, follow these steps:

1. If {nxrm} won't start, install a fresh copy of the repository manager; it must be the same version where the
`.bak` files were created.
2. Stop the repository manager.
3. Create the `backup` folder.
3. Copy the `.bak` files you wish to restore to the `backup` folder, in `$data-dir/nexus3`.
4. Remove the existing database folder (`db`) from `$data-dir/nexus3/db` if they exist. The restoration won't
overwrite any existing data.
NOTE:: If the `Component` database is restored, the corresponding blob stores containing components must also be
restored.
5. Restart {nxrm}.

To verify the restoration, check the logs for a message that says "database config restored", which is logged at the
`INFO` level.
