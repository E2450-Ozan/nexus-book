[[high-availability]]
==  High Availability
{inrmonly}

[[high-availability-introduction]]
=== Introduction

{nxrm}'s high availability (HA) feature provides a more fail-safe repository manager, minimizing downtime, and 
reducing points of system failure.

This chapter covers the benefits and steps needed to implement high availability clusters. Clustering sets the 
standard for automating the process of continuous uptime, relieving teams of manual recovery techniques, and 
creating a binary storage for the entire suite of features and components available in your repository managers.

[[high-availability-prepare]]
=== Preparing a Cluster for High Availability

In {pro}, there are two ways you can implement HA. In the scenarios below you join three nodes to meet the minimum
requirement for redundancy. A cluster, which contains three redundant nodes, acts as one transparent instance.

Clustering requires you to:

* Configure three servers to establish the connection between the nodes by enabling HA in each repository manager.
* Join the nodes together by a common blob store path to maintain a shared storage for blobs, components and assets.
* Allow the first enabled node to complete the start-up sequence, then start the second and third nodes to form the
cluster.

When the cluster is formed you can <<high-availability-verify,verify node synchronization>> from the administration
menu.

[[high-availability-clustering]]
==== Clustering Methods

You can implement this by the following methods:

* Start with a fresh installation of {pro} that includes high availability.
* Upgrade an older version of {pro} 3 to a version that supports high availability.

When the cluster is established the nodes communicate with each other to create continuous uptime and the assurance
that if one fails, the other nodes can be used.

[[high-availability-servers]]
=== Supported Servers for High Availability

There are three supported infrastructures you can consider for managing an HA cluster. You can install them across
a mix of the following environments:

- physical servers
- virtual machines
- Docker instances

[[high-availability-install]]
=== Installing {pro} for High Availability

Whether you use a fresh installation or upgrade a non-HA-supported version of {pro} to form a cluster, you
need to run the additional nodes on different hosts. Follow the appropriate scenario in this section. 

==== Using a Fresh Installation of {pro}

To prepare a fresh installation of {pro} for high availability

1. Download {pro}, supported with high availability.
2. Install two additional {pro} instances on different hosts to establish three nodes.
3. Configure all three nodes to use the same <<admin-repository-blobstores,blob store>> path.

==== Converting an Existing Instance of {pro} into a Cluster

If you have an earlier version of {pro} 3, you can convert it into a cluster. Follow the steps below to
configure this non-HA-supported version so it's synchronized with the second and third nodes.

1. Stop running the existing repository manager.
2. Follow the steps in the https://support.sonatype.com/hc/en-us/articles/231723267[support article] to
upgrade the repository manager to a version that supports high availability.
3. Download and unpack a new repository manager to establish a second node.
4. Create a third instance by copying the second repository manager to establish a third node.
5. Configure all three nodes to share the same the blob stores.
6. <<high-availability-nodes,Enable>> high availability on the three nodes.
7. Start the first node and wait for its start-up sequence to complete, then start the second and third
nodes to form the cluster.

In both scenarios the data from the first node is synchronized with the second and third nodes, so that if
one node fails the other nodes in the cluster will maintain that data.

[[high-availability-blob-store]]
=== Configuring Nodes to Share the Same Blob Stores

Regardless of the method you choose to enable high availability, be mindful that configuring your nodes to
share an entire data directory will undermine HA configuration, and cause it not to function. All elements
of the system except the blob stores should be distinct and not shared.

Instead, you only need to join the <<admin-repository-blobstores,blob stores>> together, where the nodes
share access to components.

As an example let's say you create three nodes, `node-a` for the initial server and two new nodes called
`node-b` and `node-c`, to represent the second and third servers. Then the base directory for blob stores,
i.e. `$data-dir/blobs`, on all three of these nodes must be mounted to the same filesystem.

[[high-availability-nodes]]
=== Enabling the Nodes

Follow these steps to enable high availability:

1. In the first repository manager, open the `$data-dir/etc/nexus.properties` file.
2. Remove the `#` before +nexus.clustered = true+ to enable the node at start-up. 
3. Go to the second and third repository managers and repeat steps 1 and 2, to enable them for high availability.

Given that all nodes are mounted to the same blob store, with the same path, synchronization of data and configuration
will occur automatically.

[[high-availability-startup]]
==== Starting the High Availability Service

Bring the nodes to full service by starting the repository managers. You will see connection messages similar to
this:

----
2016-06-28 17:34:26,577-0400 INFO  [hz.nexus.generic-operation.thread-1] *SYSTEM com.hazelcast.cluster.ClusterService - [192.168.99.1]:5702 [nexus] [3.5.3]
 
Members [3] {
    Member [192.168.99.1]:5701
    Member [192.168.99.1]:5702
    Member [192.168.99.1]:5703 this
}
----

The nodes are synchronized via link:https://hazelcast.com/[Hazelcast], which provides in-memory computing for
active data and active backup. Hazelcast can employ multicast to discover cluster members, but it supports node
discovery in other ways. If the default configuration isn't suitable for your network infrastructure, you will
need to customize `$install-dir/etc/fabric/hazelcast.xml`. See <<high-availability-aws>> for a concrete example.

[[high-availability-verify]]
=== Verifying Synchronization

At runtime, the repository manager user interface allows you to view the status of the nodes, regardless of
which you connect to, as they are synchronized.

See <<nodes>> for details on viewing active nodes in a cluster.

[[high-availability-environment]]
=== Configuring {pro} Environment for High Availability

Once you have your high availability environment set up, be aware that almost all configuration done via the UI 
is shared between all nodes in the cluster. There is no master node you must hit; they are all treated equally. 
For example, if you create a new repository all nodes in the cluster will be able to see it and utilize it. Or 
if you want to change your 'Email Server' port you just need to do it once via the UI on any of the servers and 
the change will share. Because all servers share out the changes, changing on any is acceptable.

NOTE: Same as a single server be aware, if multiple people are configuring something at the same time in your 
cluster, it may appear the changes are not sharing. If you refresh your screen, you will see the changes when 
they come across.

There are some things, however, that are not done or shared within the UI and need to be done on each individual 
server. These are:

- Any CLI configurations you do (such as specifying a port via nexus.properties or setting up SSL)
- 'Refresh Interval' of the GUI 'Log Viewer' setting
- Most log messages are not shared across the server (some few are) however logging levels are shared
- 'Metrics' displayed are for the individual server (and not for the cluster)
- A 'Support ZIP' is for the individual server. Consult with your support technician which zips they need if 
troubleshooting.
- 'Analytics' events are per server
- 'Audit' events are per server
////
last 2 should be changing with NEXUS-10489
////

TIP: Scheduled tasks will run against one node unless the 'Multi node' configuration option is selected or the 
task affects something that is in itself shared (like compaction of blob stores).

Regardless, {nxrm} configuration is not done via any load balancers that might be in place. It is done on the 
individual node level and shared or not.

When adding new nodes to the existing cluster be aware that they will get the shared configuration of the cluster 
regardless of how they are preconfigured.

CAUTION: In the event you have empty nodes and are adding existing configured nodes to it, the existing 
unconfigured nodes would erase the existing configuration of the nodes added. When creating a cluster, it is 
important you start the configured nodes before the empty nodes to avoid unwanted configuration loss.

[[high-availability-aws]]
=== Configuring High Availability for Amazon Web Services

{nxrm} can be deployed on cloud-computing services, such as Amazon Web Services (AWS). Depending on your network
security, additional configuration may be required. For example, if you use a network layer firewall application
it may block multicast communication. If such a failure occurs you will need to modify the Hazelcast configuration
file.

To configure Hazelcast for automatic node discovery find the `<join>` tag in `$install-dir/etc/fabric/hazelcast.xml`.
Then, edit the file for each node:

1. Change the value in `<multicast enabled="true">` to `"false"`.
2. Change the value in `<aws enabled="false">` to `"true"`.
3. Save the file.
4. Reboot each node in the cluster.

The `$install-dir/etc/fabric/hazelcast.xml` file with the modified properties will look similar to this:
----
<join>
    <multicast enabled="false">
       <multicast-group>224.2.2.3</multicast-group>
       <multicast-port>54327</multicast-port>
    </multicast>
    <tcp-ip enabled="false">
        <interface>127.0.0.1</interface>
    </tcp-ip>
    <aws enabled="true">
        <access-key>my-access-key</access-key>
        <secret-key>my-secret-key</secret-key>
        <!--optional, default is us-east-1 -->
        <region>us-west-1</region>
        <!--optional, default is ec2.amazonaws.com. If set, region shouldn't be set as it will override this property -->
        <host-header>ec2.amazonaws.com</host-header>
        <!-- optional, only instances belonging to this group will be discovered, default will try all running instances -->
        <security-group-name>security-group-name</security-group-name>
        <tag-key>type</tag-key>
        <tag-value>nexus-nodes</tag-value>
    </aws>
</join>
----
