[[rhc]]
== Repository Health Check

Repository Health Check is a feature of Nexus that integrates data
from http://links.sonatype.com/products/insight/home[Sonatype CLM] and
the related Hosted Data Services (HDS) run by Sonatype. Sonatype CLM is
a suite of separate products that consists of tools to monitor and
manage license, quality, and security data about components used in your
software development life cycle for your Component Lifecycle
Management (CLM) efforts.

Repository health check provides access to a limited subset of the
available data in Sonatype CLM and HDS right in your Nexus server. HDS
exposes data about the components in the
http://central.sonatype.org[Central Repository] and other public
repositories, including license information, security vulnerability
data, and other statistics like relative usage popularity
and age. Repository health check allows you to examine the available
security and license data about components in a repository.

Repository health check analyzes all components found in a proxy
repository of any format. Maven 2 format repositories need to have a
release policy configured. 

NOTE: At this time, while NuGet proxy repositories do support Repository Health
Check, only identification of components is performed. No license or security
data is provided at this time.

=== Configuring Repository Health Check

==== Configuration Per Repository

Repository health check can be setup for any repository, as long as the
following apply:

* The Repository 'Type' is 'Proxy'.
* The Repository 'Policy' is *not* 'Snapshot'.
* The Repository is 'In Service'.

Repository health check for a single repository can be enabled in one of two 
ways. The quickest way is to simply click the 'Analyze' button. After pressing 
this button, you will be prompted to either analyze all or only the selected 
repository.

Alternatively, you can select the repository in the list of repositories and
then set the 'Enabled' configuration in the 'Health Check' tab to 'true' as
displayed in <<fig-rhc-enabled>>. Administrator privileges are required to
perform this configuration.

[[fig-rhc-enabled]]
.Enabling Repository Health Check
image::figs/web/rhc-enable-analyze.png[scale=50]

NOTE: After enabling Repository Health Check for the first time you will be
presented with an acceptance of the Terms of Service.

Once enabled, a scheduled task that performs the initial analysis
is created and started. This task uses the identifier of the
repository and the prefix 'Health Check:' as a name and is configured
to run regularly. New component data is supplied by the CLM data 
service to Nexus daily. The recurrence frequency can be changed 
in the scheduled task administration 
described in <<scheduled-tasks>>. Disabling health check for a
specific repository removes this scheduled task automatically.

After a successful analysis, the 'Health Check' column in the list of
repositories will display security and license issue counts for the
repository. An example is displayed in <<fig-rhc-repo-list-quality>>. 

[[fig-rhc-repo-list-quality]]
.The Repositories List with Helth Check Result Counts
image::figs/web/rhc-repo-list.png[scale=50]

Hovering your mouse pointer over that value will display the
'Repository Health Check' summary data in a pop-up window. A sample
window is displayed in <<fig-rhc-summary-pop-up>>.

[[fig-rhc-summary-pop-up]]
.A Result Summary for a Repository Health Check
image::figs/web/rhc-summary-report.png[scale=40]

At the bottom of the pop-up window, you find the button 'View Detailed
Report' to access the detailed report. It will show up in another tab
in the main area of the Nexus user interface.

==== Global Configuration

Alternatively to enabling and disabling health check for each
repository, you can enable health check globally. This can be achieved
by creating and configuring a new capability called 'Health Check:
Configuration'. Details about managing capabilities can be found in
<<capabilities>>. 

The health check configuration capability allows you to enable and
disable it with the 'Enabled' checkbox and set up health check for all proxy
repositories by enabling 'Configure for all proxy repositories'. With
this configuration, health check will be enabled for all existing proxy
repositories. Any newly created proxy repository will automatically
have health check enabled as well.

NOTE: When disabling the global configuration option, if you also have the
Repositories tab open, be sure to refresh Nexus to avoid viewing older data.

=== Accessing the Detailed Repository Health Check Report

The detailed report contains the same overview data and charts for
security and license information at the top displayed in
<<fig-rhc-detail-summary>> .

[[fig-rhc-detail-summary]]
.Summary of the Detailed Repository Health Check Panel
image::figs/web/rhc-detail-summary.png[scale=50]

Below this overview, as visible in <<fig-rhc-detail-summary>>, a drop-down 
for security and license information allows you to toggle between two lists 
displaying further details. Select to 'View By: Vulnerabilities' to inspect 
the security issues and 'View By: Artifacts' to review the license information. 
Both lists have a filter for each column at the bottom of the list that allows 
you to narrow down the number of rows in the table and find specific entries 
easily.

The security list as visible in <<fig-rhc-detail-security-list>>
contains columns for 'Threat Level', 'Problem Code' and the GAV parameters
identifying the affected component. The 'Problem Code' column is a link
to the security warning referenced and commonly links a specific entry
in http://www.osvdb.org[the Open Source Vulnerability Database] or
http://cve.mitre.org[the Common Vulnerabilities and Exposures] list.
Both of these databases have a descriptive text for the vulnerability
and further information and reference links.

[[fig-rhc-detail-security-list]]
.The Security Data in the Detailed Repository Health Check Report
image::figs/web/rhc-detail-security-list.png[scale=45]

The 'Threat Level' is rated in values used by the vulnerability
databases and ranges from 0 for a low threat to 10 for the highest
threat. 'Critical' values (noted in red) range from 8 to 10. 'Severe' 
values (noted in orange) range from 4-7, and 'Moderate' values 
(noted in yellow) range from 1 to 3.

The license list as visible in <<fig-rhc-detail-license-list>> shows a
derived threat in the 'Effective License Threat' column. The 'Declared
License' column details the license information found in POM file. The
'Observed Licenses in Source' columns lists all the licenses found in
the actual source code of the library in the form of file headers and
license files. The next columns for the GAV parameters allow you to
identify the component. The last column 'Security Issues' displays an
indicator for potentially existing security issue for the same
component.

[[fig-rhc-detail-license-list]]
.The License Data in the Detailed Repository Health Check Report
image::figs/web/rhc-detail-license-list.png[scale=45]

Licenses such as GPL-2.0 or GPL-3.0 are classified as the highest
'License Threat' and labeled as 'Copyleft' and use red as signaling color. 

A 'Non Standard' or 'Not Provided' license is classified as a moderate
threat and uses orange. 'Non Standard' as a classification is triggered
by the usage of atypical licenses for open source software such as
http://charityware.info/[CharityWare license], http://en.wikipedia.org/wiki/Beerware[BeerWare],
http://en.wikipedia.org/wiki/University_of_Illinois/NCSA_Open_Source_License[NCSA
Open Source License] and many others. 'Not Provided' is trigged as
classification if no license information was found anywhere.

Licenses such as CDDL-1.0, EPL-1.0 or GPL-2.0-CPE receive a 'Weak
Copyleft' classification and yellow as notification color.

'Liberal' licenses that are generally friendly to inclusion in
commercial products use blue and include licenses such as
Apache-2.0, MIT or BSD.

A general description about the implications of the different licenses
is available when hovering over the specific category in the 'License
Analysis Summary'. Further information about the different licenses
can be obtained from the
http://opensource.org/licenses/index.html[Open Source
Initiative]. Mixed license scenarios like a mixture of licenses such
as Apache-1.1, Apache-2.0, LGPL and LGPL-2.1 can be complicated to
assess in its impact and might be legally invalid depending on the
combination of licenses observed.  Detailed implications to your
business and software are best discussed with your lawyers.

Nexus will report all components in the local storage of the respective
repository in the detail panel. This means that at some stage
a build running against your Nexus instance required these components
and caused Nexus to download them to local storage.

To determine which project and build caused this download to be able
to fix the offending dependency by upgrading to a newer version or
removing it with an alternative solution with a more suitable license,
you will have to investigate all your projects.

Sonatype CLM itself helps with these tasks by enabling monitoring
of builds and products, analyzing release components and creating bill
of material and other reports. 

=== Example: Analyzing a Security Vulnerability

The following example details how you can analyze security issues of
an component found in your repository health check and determine a
solution with the help of information available in Nexus.

After performing a repository health check as documented in the prior
sections of <<rhc>>, you noticed the component with the 'Group'
org.springframework, the 'Artifact' spring-beans and 'Version' 2.5.4. Upon
further inspection of your software build and the components used, you
can confirm that this component is indeed part of your shipping
software.

TIP: http://links.sonatype.com/products/insight/ci/home[Sonatype
CLM for CI] can help you with the detection of license and
security issues during continuous integration builds. 
http://links.sonatype.com/products/insight/ac/home[Sonatype App Health
Check] allows you to analyze already assembled application archives.

A GAV search for the component in Nexus as documented in
<<using-sect-searching>> allows you to inspect the 'Component Info'
tab for the component displayed in <<fig-rhc-spring-component-info>>.

[[fig-rhc-spring-component-info]]
.GAV Search Results for +org.springframework:spring-beans+ and Component Info Tab for Version 2.5.4
image::figs/web/rhc-spring-component-info.png[scale=45]

For example, after reading the summary and inspecting the entries for the 
security issues in the security databases linked in the 'Problem Code' column,
you decide that these issues affect your software and a fix is
required. In order to determine your next steps you search for all
versions of the +spring-beans+ component. As a result you receive the
list of all versions available partially displayed in
<<fig-rhc-spring-list>>. The 'Security' column in the search results
list displays the count of two security issues for the version 2.5.4
of the library.

[[fig-rhc-spring-list]]
.Viewing Multiple Versions of org.springframework:spring-beans:x
image::figs/web/rhc-spring-list.png[scale=45]

Looking at the 'Security Issues' column in the results allows you to
determine that with the upgrade of the library to version 2.5.6.SEC02
the count of security issues drops to zero. The same applies to
version 2.5.6.SEC03, which appears to be the latest version of the 2.x
version of the component. In addition, the table shows that early
versions of the 3.x releases were affected by security issues as well.

With these results, you decide that an immediate update to version
2.5.6.SEC03 will be required as your next step. In the longer term an
update to a newer version of the 3.x or even 4.x releases will follow.

The necessary steps to upgrade depend on your usage of the
spring-beans library. A direct usage of the library will allow you to
upgrade it directly. In most cases, this will require an upgrade of
other SpringFramework libraries. If you are indirectly using
spring-beans as a transitive dependency, you will need to figure out
how to upgrade either the dependency causing the inclusion or override
the version used.

The necessary steps will depend on the build system used, but in all
cases you now have the information at your hands detailing why you should
upgrade and what to what version to upgrade to. This allows you to carry out
your component lifecycle management effectively. Sonatype CLM offers
tools for these migration efforts as well as various ways to monitor
your development for security, license, and other issues.

=== Example: Resolving a License Issue

The following example details how you can analyze a license issue of
an component found in your repository health check and determine a
solution with the help of information available in Nexus.

Your repository health check detail report indicated that Hibernate
3.2.7.ga might have issues due to its 'Threat Level' declared as
'Non-Standard'. Looking at your software components you found that you
are indeed using this version of Hibernate. Searching for the component
in Nexus provides you with the search results list and the Component
Info tab for the specific version displayed in <<fig-rhc-hibernate>>.

[[fig-rhc-hibernate]]
.Viewing License Analysis Results for Hibernate
image::figs/web/rhc-hibernate.png[scale=50]

The 'Component Info' tab displays the declared license of Hibernate
is the LGPL-3.0 license. Contrary to that, the licenses observed in the
source code include Apache-1.1, Apache-2.0, LGPL-2.1, LGPL and
Non-Standard. 

Looking at newer versions of Hibernate you find that the observed
license in the source code changed to 'Not-Provided'. Given this change
you can conclude that the license headers in the individual source
code files were removed or otherwise altered and the declared license
was modified to LGPL-2.1.

With this information in hand you determine that you will need to
contact your lawyers to figure out if you are okay to upgrade to a
newer version of Hibernate to remedy the uncertainty of the
license. In addition, you will need to decide if the LGPL-2.0 is
compatible with the distribution mechanism of your software and
approved by your lawyers.

In the above steps you learned how Nexus provides a lot of information
allowing you to effectively carry out our component lifecycle
management with a minimum amount of effort.

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
