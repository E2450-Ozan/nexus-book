[[rhc]]
== Repository Health Check

Repository Health Check is a feature of Nexus that integrates data
from http://links.sonatype.com/products/insight/home[Sonatype
CLM]. Sonatype CLM is suite of separate products that consists of
tools to monitor and manage license, quality and security data about
artifacts used in your software development life cycle for your
Component Lifecycle Management CLM efforts.

Repository Health Check provides access to a limited subset of the
available data in Sonatype CLM via the Sonatype CLM Service right in
your Nexus server. The Sonatype CLM Service is a supplement of the
Central Repository and exposes data about the artifacts there,
including license information, security vulnerability data and other
statistics like relative usage data and age.

=== Analyzing a Repository with Repository Health Check

To perform a Repository Health Check about the artifacts in your Nexus
instance, you have to click the Analyze button in the Quality column
of the list of Repositories displayed in
<<fig-rhc-repo-list-quality>>. In order to be able to do that you have
to be logged in as an administrator. Once the data gathering analysis
is completed the Quality column will display the number of security
and license issues found.

[[fig-rhc-repo-list-quality]]
.The Repositories List with Different Quality Status Indicators and Result Counts
image::figs/web/rhc-repo-list.png[scale=70]

Hovering your mouse pointer over that value will display the Repository
Health Check summary data in a pop up window. A sample window is
displayed in <<fig-rhc-summary-pop-up>>.

[[fig-rhc-summary-pop-up]]
.A Result Summary Window for a Repository Health Check
image::figs/web/rhc-summary-report.png[scale=50]

At the bottom of the pop up window you find a button to disable the
analysis for this repository as well as the button View Detailed
Report to access the detailed report. It will show up
in another tab in the main area of the Nexus user interface.

=== Accessing the Detailed Repository Health Check Report

The detailed report contains the same overview data and charts for
security and license information at the top displayed in
<<fig-rhc-detail-summary>> .

[[fig-rhc-detail-summary]]
.Summary of the Detailed Repository Health Check Panel
image::figs/web/rhc-detail-summary.png[scale=50]

Below this overview a drop down for Security and License information
allows you to toggle between two lists displaying further
details. Both lists have a filter for each column at the bottom of the
list that allows you to narrow down the number of rows in the table
and therefore find specific entries easily.

The security list as visible in <<fig-rhc-detail-security-list>>
contains columns for Threat Level, Problem Code and the GAV parameters
identifying the affected artifact. The Problem Code column is a link
to the security warning referenced and commonly links a specific entry
in http://www.osvdb.org[the Open Source Vulnerability Database] or
http://cve.mitre.org[the Common Vulnerabilities and Exposures] list.
Both of these databases have a descriptive text for the vulnerability
and further information and reference links.

[[fig-rhc-detail-security-list]]
.The Security Data in the Detailed Repository Health Check Report
image::figs/web/rhc-detail-security-list.png[scale=40]

The Threat Level is rated in values used by the vulnerability
databases and ranges from 0 for a low threat to 10 for the highest
threat. Values from 8-10 are classified as Critical and are displayed
as red notification, values from 4 to 7 are classified as Severe and
use orange and values from 1 to 3 are classified as Moderate and use
yellow as notification color.

The license list as visible in <<fig-rhc-detail-license-list>>
shows a derived threat in the Effective License Threat column. The
Declared License column details the license information found in pom
file. The Observed Licenses in Source columns lists all the licences
found in the actual source code of the library in the form of file
headers and license files. The next columns for the GAV parameters
allow you to identify the artifact. The last column Security Issues
displays an indicator for potentially existing security issue for the
same artifact.

Licences such as GPL-2.0 or GPL-3.0 are classified as the highest
License Threat and labelled as Copyleft and use red as signalling color. 

Non Standard or Not Provided license are classified as a moderate
threat and use orange. Non Standard as a classification is triggered
by the usage of atypical licenses for open source software such as
http://charityware.info/[CharityWare license], http://en.wikipedia.org/wiki/Beerware[BeerWare],
http://en.wikipedia.org/wiki/University_of_Illinois/NCSA_Open_Source_License[NCSA
Open Source License] and many others. Not Provided is trigged as
classification if no license information was found anywhere.

Licenses such as CDDL-1.0, EPL-1.0 or GPL-2.0-CPE receive a Weak
Copyleft classification and yellow as notication color.

Liberal licences that are generally friendly to inclusion in
commercial products are using blue and include licences such as
Apache-2.0, MIT or BSD.

A general description about the implications of the different licenses
is available when hovering over the specific category in the License
Analysis Summary. Further information about the different licenses can
be obtained from the http://opensource.org/licenses/index.html[Open
Source Initiative]. Mixed license scenarios like a mixture of licenses
such as Apache-1.1, Apache-2.0, LGPL and LGPL-2.1 can be complicated
to assess in its impact and might be legally invalid depending on the
combination of licenses observed.  Detailed implications to your
business and software are best discussed with your lawyers.


[[fig-rhc-detail-license-list]]
.The License Data in the Detailed Repository Health Check Report
image::figs/web/rhc-detail-license-list.png[scale=35]

Nexus will report all artifacts in the local storage of the respective
repository in the detail panel. This means that at some stage
a build running against your Nexus instance required these artifacts
and caused Nexus to download them to local storage.

To determine which project and build caused this download to be able
to fix the offending dependency by upgrading to a newer version or
removing it with an alternative solution with a more suitable license
you will have to investigate all your projects.

Sonatype CLM itself helps with these tasks by enabling monitoring
of builds and products, analyzing release artifacts and creating bill
of material and other reports. 

=== Using Repository Health Check Results For Component Lifecycle Management

==== Example: Analyzing a Spring Beans Vulnerability

The following example details how you can analyze security issues of
an artifact found in your repository health check and determine a
solution with the help of information available in Nexus.

After performing a repository health check as documented in the prior
sections of <<rhc>>, you noticed the artifact with the Group
org.springframework, the Artifact spring-beans and Version 2.5.4. Upon
further inspection of your software build and the components used, you
can confirm that this artifact is indeed part of your shipping
software.

TIP: http://links.sonatype.com/products/insight/ci/home[Sonatype
CLM for CI] can help you with the detection of license and
security issues during continuous integration builds. 
http://links.sonatype.com/products/insight/ac/home[Sonatype App Health
Check] allows you to analyze already assembled application archives

A GAV search for the artifact in Nexus as documented in
<<using-sect-searching>> allows you to inspect the 'Component Info'
tab for the artifact displayed in <<fig-rhc-spring-insight>>.

[[fig-rhc-spring-insight]]
.Insight tab for org.springframework:spring-beans:2.5.4
image::figs/web/rhc-spring-insight.png[scale=30]

After reading the summary and inspecting the entries for the security
issues in the security databases linked in the Problem Code column,
you decide that these issues affect your software and a fix is
required. In order to determine your next steps you search for all
versions of the spring-beans artifact. As a result you receive the
list of all versions available partially displayed in
<<fig-rhc-spring-list>>. The security column in the search results
list displays the count of two security issues for the version 2.5.4
of the library.

[[fig-rhc-spring-list]]
.Viewing Multiple Versions of org.springframework:spring-beans:x
image::figs/web/rhc-spring-list.png[scale=40]

Looking at the Security Issues column in the results, allows you to
determine that with the uprade of the library to version 2.5.6.SEC02
the count of security issues dropped to zero. The same applies to
version 2.5.6.SEC03, which appears to be the latest version of the 2.x
version of the artifact. In addition the table shows that early versions of
the 3.x releases were affected by security issues as well.

With these results, you decide that an immediate update to version
2.5.6.SEC03 will be required as your next step. In the longer term an
update to a newer version of the 3.x releases will follow.

The necessary steps to upgrade depend on your usage of the
spring-beans library. A direct usage of the library will allow you to
upgrade it directly. In most cases this will require an upgrade of
other SpringFramework libraries. If you are indirectly using
spring-beans as a transitive dependency, you will need to figure out
how to upgrade either the dependency causing the inclusion or override
the version used. 

The necessary steps will depend on the build system used, but in all
cases you now have the information at your hands why you should
upgrade and what version to upgrade to, which allows you to carry out
your component lifecycle management effectively.


==== Example: Resolving a License Issue

The following example details how you can analyze a license issue of
an artifact found in your repository health check and determine a
solution with the help of information available in Nexus.

Your repository health check detail report indicated that Hibernate
3.2.7.GA might have issues due to its Threat Level declared as
Non-Standard. Looking at your software artifacts you found that you
are indeed using this version of Hibernate. Searching for the artifact
in Nexus provides you with the search results list and the Insight tab
for the specific version displayed in <<fig-rhc-hibernate>>.

[[fig-rhc-hibernate]]
.Viewing License Analysis Results for Hibernate
image::figs/web/rhc-hibernate.png[scale=20]

The Insight tab displays the declared license of Hibernate
is the LGPL-3.0 license. Contrary to that the licenses observed in the
source code include Apache-1.1, Apache-2.0, LGPL-2.1, LGPL and
Non-Standard. 

Looking at newer versions of Hibernate you find that the observed
license in the source code changed to Not-Provided. Given this change
you can conclude that the license headers in the individual source
code files were removed or otherwise altered and the declared license
was modified to LGPL-2.1.

With this information in hand you determine that you will need to
contact your lawyers to figure out if you are okay to upgrade to a
newer version of Hibernate to remedy the uncertainty of the
license. In addition you will need to decide if the LGPL-2.0 is
compatible with the distribution mechanism of your software and
approved by your lawyers.

In the above steps Nexus provided you with a lot of information
allowing you to effectively carry out our component lifecycle
management with a minimum amount of effort.

////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
