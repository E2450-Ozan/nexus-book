[[migration]]
==  Migration
{inall}

[[migration-introduction]]
=== Introduction

The migration tool provides a built-in supported method for migrating components of version 2 of the repository 
manager to version 3. You will be able to initiate a migration into {pro} with a wizard available in the user 
interface.

This feature helps you build a migration plan which allows {pro} {version} to talk to {pro} 2 by way of a 
capability that initiates the wizard. Migration moves repositories from version 2 to version 3, and wizard 
enables you to view the status of the migration as it is happening. Fundamentally the decisions around migration 
are twofold: which repositories to migrate and, if hard linking, designating the blobstore location.

Current repository formats supported are Maven, NuGet, npm, and static websites ('raw'). For each of these 
repository formats you can migrate global settings, security realm settings, and repository content.


[[migration-prep]]
=== Preparing for Migration

The critical decision you or your organization must make is a plan for where they want their files to be 
transferred to when the migration is complete. You will need to consider how your system storage is structured 
and what ingestion methods are available to them. 

The minimum version of the repository manager you will need to run your migration plan is {pro} 2.14. You can 
download this version from the Sonatype home page. If you have older version of upgrade from an older version of 

With the migration tool the expectation is that {pro} 3 can migrate content from one instance of {pro} 2 at a 
time. The tool can migrate content from your choice of download, hard linking, or copying local files.

Migration is the process of replacing your use of {pro} 2 with {pro} 3 architecture.

[[migration-performance]]
==== Storage Considerations to Improve Performance

During the migration process it is a best practice to schedule a maintenance window for {pro} 2 so you can 
take it down for a period, and the migration can persist. Further, you should review your current {pro} 2 
configuration to clean up content within the repository manaager that may impact overall performance.

When considering migration time and speed, take into account all enabled scheduled tasks on your version 2 
instance. Depending on your {pro} 2 instance configuration you can optimize the performance of the application by:

* disabling system feeds
* disabling repair tasks
* reviewing and disabling Rebuild Maven Metadata files
* reviewing Custom Metadata
* reviewing or removing snapshots
* 


How long does migration actually take? 1Gb/min (not the real number) - HTTP download, depends on network
Scheduled Tasks(ST)
Considerations:
Running scheduled tasks on NX2 may slow migration performance
Processes of note:
Rebuild maven metadata (this is performance intensive and will generate additional work for migration)
ST: Repair index (performance considerations - uses a lot of file handles and lots of temporary disk space)
Smart proxy - if you have this on
Increasing the file handles may be necessary if NX2 and NX3 are on the same box

Additionally, the speed of your network will arbitrarily impact ingestion methods (e.g HTTP download).

In the instance you have configured your repository manager HTTP context and path as a reverse proxy server
the traffic coming through {pro} 2 could be busy, as you start the migration steps. {pro} 3 starts pulling 
over the content with the migration tool as content is added to {pro} 2.

HTTP download puts more load on the NX2 instance than other ingestion methods, because NX2 has to serve the 
bytes. Copying and hard-linking only have to be told where the file is, and they obtain it from the filesystem 
directly.

[[migration-storage]]
==== Storage Considerations for Migration

When migrating, make sure you have enough storage capacity in the destination filesystem(s). If you are using 
hard-link ingestion, the bytes themselves are not duplicated (saving space), but you must ensure there are enough 
free inodes for the content being migrated.


[[migration-support]]
=== Supported Architecture for Migration

Section to be updated.

////
There are two available architectures that support migration. You can either move content from a running 
instance of versions 2 to 3 on an external server, or you can use the same server and run it in parallel. If you 
choose the latter architecture, you 
////


[[migration-methods]]
=== Migration Methods

In order to start migration, {pro} 2 has to listen for {pro} 3 to instantiate communication. This is the core 
property of the 'Migration Agent'. When the migration wizard in version 3 helps you build a migration plan, it 
talks to your version 2 instance thru the migration agent to find out what repositories exist (e.g. to list them 
in the wizard user interface). When you pick one, version 3 tells version 2 to start compiling the full list of 
what it has that needs migrating in each of those repositories. Ultimately, this creates a scheduled task that 
walks the repository storage folder and lists the files, storing them in the changelog database.

On the {pro} {version} side, components are stored as blobs. The conversion process requires the {version} to 
iterate over every component in your storage.

Once the 'Migration Agent' is enabled and both repository manager instances are stood up and communicating, 
you can consider one of three ingestion methods: HTTP download, file system copying, or hard linking. The choice 
of ingestion method can be made on a repository-by-repository basis, but there is a migration-wide default.

*Downloading*

The first option is download, which means {pro} 3 will make HTTP requests to {pro} 2. This is the slowest option 
for migration. 

If {pro} 2 and {pro} 3 are on different machines and do not share access to the same file system storage, you 
must use HTTP Download

*File System Copying*

The second option is file system copying. If {pro} 2 and {pro} 3 are on the same machine (or share access to the 
same file systems) then version 3 will copy the files from version 2. {pro} 2 will tell {pro} 3 the location of 
the file and where to retrieve the content. 

Assuming versions 2 and 3 are on the same machine, configured in a way that the mounts are accessible by the same 
path (from one machine to the other) this option will work. It is a slightly faster process than the download 
method and has less impact on the performance of {pro} 2

*Hard linking*

This method only works on the same file system. If you want to hard link, configure your {pro} 3 in such a way 
that you have a blob store defined in an appropriate location where hard linking is possible.

Hard linking repository metadata creates another reference to the same set of bytes somewhere else. If the 
content set for migration in {pro} 2 is too large for {pro} 3, part of the data will be distributed to cleared 
data blocks, or elsewhere.

Hard links only work across the same file system. If your choose hard linking as your migration method make sure 
that the {pro} 3 blob store to be used for the repository is on the same file system as the {pro} 2 storage 
location for that repository.

////
In any file system movement operation, you must ensure that the data has been correctly copied to the new 
destination before migration. If you decide to migrate repositories by hard linking you may consider the 
implications of storage usage.
////

This is the fastest option because you will not have to move the bytes around.


[[migration-repo-support]]
=== Repository Format Support

TBD

////
insert a table here
////


[[migration-start]]
=== Getting Started

There are only a few steps necessary to get ready and start the migration:

* Upgrade Nexus Repository to latest 2.14 and configure the included migration capability that allows you to sync 
from version 2 to {version}.
* Install Nexus Repository 3.1 on the same server, ensure it runs on a different port and start it up.
* Configure the migration agent in version 2 and start the migration wizard in version 3.
  

[[migration-capability]]
=== Enabling the Migration Capability

To implement migration, a migration-agent capability must be activated to execute the migration plan. The 
capability, essentially, finds what repositories exist and lists them in the version 3 migration wizard. It 
enables the port you configured to run version 2 remotely in order to communicate with version 3. The 
migration plan, as a whole, is two-part process where version 2 must be set up to listen for a {pro} 3 instance 
in order for the former to talk to the latter.

[[migration-configuration]]
==== Enabling Migration from Version 2

In version 2, activate the 'Migration: Agent' capability to open the connection for the migration-agent. Follow these steps:

* Click 'Administration' in the left-hand panel
* Click 'Capabilities' under 'Administration' to open the 'Capabilities' panel
* Select 'New' to prompt the 'Create new capability' modal
* Select 'Migration: Agent' as your capability type

In the lower section of 'Capabilities' interface, the repository manager acknowledges the migration-agent as 
'Active'. 

[[migration-plan]]
==== Enabling Migration from Version 3

Next, sign in to your version 3 instance. You will create a 'Migration' capability to implement the tool. When 
enabled, the 'Migration' icon appears in the 'Administration' menu, under 'System'. Follow these steps to 
implement the migration capability:

* Click 'Capabilities', located under 'System', to open the 'Capabilities' screen
* Click 'Create capability'
* Select 'Migration', then click 'Create capability' to enable migration

[[migration-steps]]
=== Migrating Repositories

After you establish migration capabilities for versions 2 and 3, you will activate a wizard to start your 
migration. In {pro} go to the 'Administration' menu and select 'Migration', located under 'System', to open the 
wizard.

*Migration Wizard*

Overview:: The wizard will provide and overview of what is allowed for automatic migration as well as 
warnings on what cannot be migrated. Click the 'Next' button to get from one page to the next.

Agent Connection:: This screen presents two fields, 'URL' and 'Access Token'. Copy over the server 
location from version 2 and paste it to the 'URL' field so the migration of repositories will persist. 
An example input would be: +http://localhost:8081/nexus/service/siesta/migrationagent+.
The 'Access Token' will display the security key from your version 2 'Migration: Agent' capability details.

Content:: This screen presents checkboxes for security features ('Security'), server configuration ('System'), 
and user-managed repositories ('Repositories') that can be migrated. For 'Security' you have the option to choose 
among 'Anonymous', 'Realms', 'Users', 'Roles', and 'LDAP Configuration'. For 'System' you can migrate 'Email' and 
'HTTP Configuration' contents.

Repository Defaults:: This screen allows you to select directory destination and migration method. If you set up 
up more than one blobstore, choose the blobstore location from the dropdown menu. The second dropdown menu, 
'Method', allows you to choose among hard linking, copying local files or downloading.

Repositories:: If 'User-related repositories' is one of your selections from the 'Content' screen, the 
'Repositories' screen allows you to select which repositories you want to migrate. You can either select all 
repositories with one click, at the top of the table. Alternatively, you can click each individual repository. In 
addition to 'Repository', the table displays information around the status of the repository. The table includes 
'Type', 'Format', 'Supported', 'Status', 'Destination', and 'Method'.

NOTE: The faded text of a repository format on your system will indicate it is not available for migration.

Preview:: This screen displays a preview of the content poised for migration, selected in the previous 
screen. Scroll thru the table to see the three phases set for the migration: 'PREPARE', 'SYNC' and 'FINISH'. 
Click 'Begin', then confirm from the modal, that you want to start the migration. After the preview 'Preparing', 
'Synchonizing', and 'Finishing will persist.

////
Temporary placeholder... will likely omit
* The 'Preparing' phase prepares the transfer and creation of all the repositories.
* The 'Synchronizing' phase counts and processes all components of the repositories set for migration.
* The 'Finishing' phase performs final clean up, then closes the process.
////

Eventually the incoming traffic volume from {pro} 2 will slow down. The administrator should stop all end users 
from using {pro} 2, to let the final bits of content to transfer to {pro} 3. Click 'Stop Monitoring', then 
'Finish' to complete the migration.