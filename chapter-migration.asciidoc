[[migration]]
==  Migration
{inall}

[[migration-introduction]]
=== Introduction

The migration tool provides a built-in supported method for migrating your {pro} 2 components to {pro} 3. The tool
gives you the ability to either install content from versions 2 to 3 on an external server (e.g. reverse proxy) 
or the same server and run it in parallel. You will be able to initiate a migration into {pro} with a wizard 
available in the user interface.

This feature helps you build a migration plan which allows {pro} 3 to talk to {pro} 2 by way of a capability that 
initiates the wizard. Migration moves repositories from version 2 to version 3, and wizard enables you to view 
the status of the migration as it is happening. Fundamentally the decisions around migration are twofold: which 
repositories to migrate and, if hard linking, designating the blobstore location.

The migration plan you create preserves the fidelity of the {pro} 2 instance, so that if there is a point of 
failure, cutover tasks will not be interrupted or lost. Current repository formats supported are Maven, NuGet, 
NPM, and static websites ('raw'). For each of these repository format you can migrate global settings, security 
realm settings, and repository content.

With the migration tool the expectation is that {pro} 3 can migrate content from one instance of {pro} 2 at a 
time. The tool migrates the repositories simultaneously leveraging your choice to download, hard link or 
copy local files, which are the options you are granted to execute the migration.

[[migration-storage]]
=== Storage Considerations for Migration

Oftentimes when you might need to move bytes from a file system to free up space, creating a new file system in 
the process. The data structure to be mindful of are inodes, a sort of hierarchical data structure that you file 
system uses to keep track of the bytes.

Before you consider migrating content from {pro} 2 to {pro} 3, be aware that hard linking may prove itself a 
file-storage challenge. The essential nature of hard linking is that you create two file entries that point to 
the same bytes; so you have to double the inode usage, but you do not double the bytes. For this reason it is 
best for your administrator or organization to develop a plan for managing file systems.

In any file system movement operation, you must ensure that the data has been correctly copied to the new 
destination before migration. If you decide to migrate repositories by hard linking you may consider the 
implications of storage usage. Hard linking repository metadata creates another reference to the same set of 
bytes somewhere else. If the content set for migration in {pro} 2 is too large for {pro} 3, part of the data will 
be distributed to cleared data blocks, or elsewhere.

[[migration-support]]
=== Supported Architecture and Performance for Migration

Though you can migrate from the same server, you can also migrate content from {pro} 2 to {pro} 3 from an 
external reverse proxy server.

In the instance you have configured your repository manager HTTP context and path as a reverse proxy server
the traffic coming through {pro} 2 could be busy, as you start the migration steps. {pro} 3 starts pulling 
over the content with the migration tool as content is added to {pro} 2.

During the migration process it is a best practice to schedule a maintenance window for {pro} 2 so you can to 
take it down for a period so the migration can persist. During that time {pro} 2 should be updated to read-only 
mode so it is inaccessible to users who do not have administrative privileges. This shuts off the flow of new 
changes.

[[migration-agent]]
=== Migration Agent Configuration

In order to start migration, {pro} 2 has to listen for {pro} 3 to instantiate communication. This is the core 
property of the 'Migration Agent'. When the migration wizard in version 3 helps you build a migration plan, it 
talks to your version 2 instance thru the migration agent to find out what repositories exist (e.g. to list them 
in the wizard user interface). When you pick one, version 3 tells version 2 to start compiling the full list of 
what it has that needs migrating in each of those repositories.

It does this by causing {pro} 2 to create a Migration Repository capability for each repo, which in turn creates 
a scheduled task that walks the repo's storage folder and lists the files, storing them in the changelog database.

When the migration is started, scheduled tasks on the {pro} 2 side will being to run. It walks through the 
directories for every single file that the migration tool finds they look at the metadata and make an entry in 
the changelog database on the {pro} 2 side. You will see the scheduled migration tasks in real time.

[[migration-methods]]
=== Migration Methods

Migration occurs in three stages: preparation, synchronization, and teardown. {pro} 2 talks to {pro} 3 over 
capability-specific REST API in version 2. The API is mainly used:

* for version 3 to query and control version 2's involvement in migration (i.e. setting up, stopping migration)
* for retrieving the changelog, the list of files that need to be migrated
* to fetch the bytes for the target files, depending on whether you choose HTTP Download as the ingestion method

Once the 'Migration Agent' is implemented and both repository manager instances are stood up and communicating, 
you can consider one of three ingestion methods: HTTP download, file system copying, or hard linking.

*Downloading*

The first option is download, which means {pro} 3 will make HTTP requests to {pro} 2. This is the slowest option 
for migration.

*File System Copying*

The second option is file system copying. If {pro} 2 and {pro} 3 are one the same machine (or share access to the 
same file systems) then version 3 will copy the files from version 2. {pro} 2 will tell {pro} 3, the location of 
the file and where to retrieve the content. 

Assuming versions 2 and 3 are on the same machine, configured in a way that the mounts are accessible by the same 
path (from one machine to the other) this option will work. It is a slightly faster process than the download 
method.

*Hard linking*

This method only works on the same file system. If you want to hard link, configure your {pro} 3 in such a way 
that you have a blobstore defined in an appropriate location where hard linking is possible.

Hard links only work across the same file system. If your choose hark linking as your migration method having 
multiple file systems will require multiple blobstores for {pro} 3. 

This is the fastest option because you will not have to move the bytes around.

[[migration-capability]]
=== Enabling the Migration Capability

To implement migration, a migration-agent capability must be activated to execute the migration plan. The 
capability, essentially, finds what repositories exist and lists them in the version 3 migration wizard. It 
enables the port you configured to run version 2 remotely in order to communicate with version 3. The 
migration plan, as a whole, is two-part process where version 2 must be set up to listen for a {oss} 3 instance 
in order for the former to talk to the latter.

[[migration-configuration]]
==== Enabling Migration from Version 2

In version 2, activate the 'Migration: Agent' capability to open the connection for the migration-agent. Follow these steps:

* Click 'Administration' in the left-hand panel
* Click 'Capabilities' under 'Administration' to open the 'Capabilities' panel
* Select 'New' to prompt the 'Create new capability' modal
* Select 'Migration: Agent' as your capability type

In the lower section of 'Capabilities' interface, the repository manager acknowledges the migration-agent as 
'Active'. 

[[migration-plan]]
==== Enabling Migration from Version 3

Next, sign in to your version 3 instance. At this point, map the <<migration-agent,migration-agent>> 
endpoint to your version 3 instance so the migration runs on the same server as version 2. Follow these 
steps to implement the migration plan:

* Click 'Capabilities', located under 'System', to open the 'Capabilities' screen
* Click 'Create capability'
* Select 'Migration', then click 'Create capability' to enable migration

[[migration-steps]]
=== Migrating Repositories

After you establish migration capabilities for versions 2 and 3, you will activate a wizard to start your 
migration. Go to the 'Administration' menu and select 'Migration', located under 'System', to open the wizard.

*Migration Wizard*

Overview:: The wizard will provide and overview of what is allowed for automatic migration as well as 
warnings on what cannot be migrated. Click the 'Next' button to get from one page to the next.

Agent Connection:: This screen presents two fields, 'URL' and 'Access Token'. Copy over the server 
location from version 2 and paste it to the 'URL' field so the migration of repositories will persist. The 
'Access Token' will display the security key from your version 2 instance, after establishing your migration 
agent settings.

Content:: This screen present checkboxes for security features ('Security') and user-related repositories 
('Repositories') that can be migrated. For 'Security' you have the option to choose among 'Anonymous', 'Realms', 
'Users', 'Roles', 'Privileges', and 'LDAP Configuration'.

Repository Defaults:: This screen allows you to select directory destination and migration method. If you set up 
up more than one blobstore, choose the blobstore location from the dropdown menu. The second dropdown menu, 
'Method', allows you to choose among hard linking, copying local files or downloading. If you want to migrate 
repositories without duplicating all the data, hard linking is method to transfer existing content into 
the new blobstore. In other words, if {pro} 2 stores files to be migrated on a particular drive a blobstore must 
be set up for that location in {pro} 3.

Repositories:: This screen allows you to select which repositories you want to migrate from {pro} 2 to {pro} 3. 
You can either select all repositories with one click, at the top of the table. Or you can click each individual 
repository. In addition to 'Repository', the table displays information around the status of the repository. That 
includes 'Type', 'Format', 'Supported', 'Status', 'Destination', and 'Method'.

Preview:: This screen displays a preview of the repositories poised for migration, selected in the previous 
screen. Scroll thru the table to see the three phases set for the migration: 'PREPARE', 'SYNC' and 'FINISH'. 
Click 'Begin', then confirm from the modal, that you want to start the migration. After the preview the next 
phases will persist:

* The 'Preparing' phase prepares the transfer and creation of all the repositories.
* The 'Synchronizing' phase counts and processes all components of the repositories set for migration.
* The 'Finishing' phase performs final clean up, then closes the process.

Eventually the incoming traffic volume from {pro} 2 will slow down and the admin stops any endusers from using 
{pro} 2, and physically blocks traffic, letting the final bits of content to transfer to {pro} 3. Click 'Stop 
Monitoring', then 'Finish' to complete the migration.