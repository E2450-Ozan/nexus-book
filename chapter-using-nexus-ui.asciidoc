[[using]]
== Using the Nexus User Interface

This chapter covers the basic aspects of the Nexus user interface
applicable for read-only access including an overview of the user
interface features, searching components and browsing repositories and
other features that are, by default, available to anonymous users and
similar read-only roles.

////
tbd administrative tasks in admin chapter .. add link once up
////

[[using-sect-intro]]
=== User Interface Overview
{in} {oss-icon} {pro-icon} {proplus-icon}

The Nexus user interface is used with a web browser and works best
with modern browsers. Older versions such as Microsoft Internet
Explorer 8 or earlier are not supported and actively blocked from
using Nexus to avoid an unsatisfactory user experience. 

Nexus provides anonymous access for users who only need to search for
components, browse the repositories and access components via client 
tools such as Maven or NuGet. This anonymous access level is a
configurable, read-only mode for Nexus that includes the main user
interface elements as shown in <<fig-ui-overview-anonymous>>.

[[fig-ui-overview-anonymous]]
.Nexus User Interface for Anonymous Users
image::figs/web/ui-overview-anonymous.png[scale=45]

Once a user is logged in further features become available depending
on the user's privileges. An example for the 'admin' user including
the 'Administration' menu icon is visible in
<<fig-ui-overview-admin>>.

[[fig-ui-overview-admin]]
.Nexus User Interface for Logged In 'admin' User
image::figs/web/ui-overview-admin.png[scale=45]

The user interface is separated into a number of different
sections. 

Main toolbar::

The top of the page contains the header with a number of elements
starting on the left with the Nexus logo:

Nexus logo and version label;; The Nexus logo and the version label differ
for {oss} and {pro} and allows you to know what version of Nexus you
are accessing at a glance.

Browse button image:figs/web/ui-browse-button-icon.png[scale=50];; The
browse button allows you to switch to the 'Browse' menu items in the main
menu section on the left of the user interface. The contents of the
menu will depend on your assigned user privileges.

Administration button image:figs/web/ui-admin-button-icon.png[scale=50];;
 The administration button allows to switch to the 'Administration' menu items in
 the main menu section on the left of the user interface as visible in
 <<fig-ui-overview-admin>>. The contents of the menu will depend on
 your assigned user privileges.

Search input box;; The search input box can be used to start a keyword
search. The results are displayed in the feature view panel.

Refresh button image:figs/web/ui-refresh-button-icon.png[scale=50];; The
refresh button is a global refresh button that affects all views in
the user interface including the feature view panel. E.g., it
refreshes the search results view, the user list or the staging
repository list, if they are currently the active feature view.

Help button image:figs/web/ui-help-button-icon.png[scale=50];;
 Clicking the help button opens up the help menu.  It contains a link
 to specific help about the currently active feature view. The 'About'
 item displays a dialog with details about the Nexus version as
 well as license and copyright information. The 'Documentation',
 'Knowledge base', 'Community', 'Issue Tracker' and 'Support' items
 link to the respective pages on the Sonatype websites.

Sign In image:figs/web/ui-sign-in-icon.png[scale=50] and user account/signout buttons image:figs/web/ui-user-account-icon.png[scale=50];; The 'Sign
In' button allows you to sign into the Nexus user interface as a
specific user. This gives you access to the privileges assigned to the
user and toggles the button to display the user name work as access
button to the 'Account' feature view as part of the 'User' menu in
the main menu on the left. In addition the sign out button
will be displayed.

Main Menu::

The main menu on the left contains either the 'Browse', the
'Administration' or the 'User' menu items. The exact list of available
menu items depends on the current user's assigned privileges. E.g.,
the 'Administration' menu as visible in <<fig-ui-overview-admin>>
includes the 'Security' section, which is not available to anonymous
or deployment users by default.  The panel itself can be horizontally
collapsed and expanded with the button in the top right-hand corner of
the panel. Each submenu can be vertically collapsed and expanded with
the button beside the title for each submenu. Selecting a menu item
triggers the display of the respective feature view in the feature
view panel.

Feature View Panel::

The feature view panel in the center of the user interface right of
the main menu initially displays the 'Welcome' feature view. It
changes display based on your selected item in the main menu.

<<fig-ui-example>> shows a typical user interface appearance of Nexus
with the 'Users' feature view in the feature view panel. It shows a
list of users.  

[[fig-ui-example]]
.Typical Example Nexus Interface with a List
image::figs/web/ui-example.png[scale=40]

Clicking on a row in the list, switches the feature view to a specific
display for the item in the row as visible in
<<fig-ui-example-view>>. The top level navigation allows you get back
to the list by clicking on the 'Users' label. The form below has a
number of sections that can be accessed via buttons as well as
specific functionality like deletion and their associated buttons.

[[fig-ui-example-view]]
.Typical Example Nexus Interface for Editing and Viewing 
image::figs/web/ui-example-view.png[scale=40]

The list header features buttons for various operations that differ
per list as well as an input box that allows you to filter the list by
any terms used in any column. <<fig-ui-list-filtering>> shows an
example use case where a user typed "Hosted" in the filter box and the
list of repositories only shows hosted repositories. This filtering
works for all columns in a list and can be used in most list displays
in Nexus. For example you can use it to filter the users list to find
disabled users, filter the routing list, the roles list and many more.


[[fig-ui-list-filtering]]
.Filtering the Repository List to Display Only Hosted Repositories
image::figs/web/ui-list-filtering.png[scale=50]

The column headers in most lists can be clicked to invoke a sorting of
the list by the respective column as well as activate and deactivate
specific columns.


[[search-components]]
=== Searching for Components
{in} {oss-icon} {pro-icon} {proplus-icon}

Searching components in Nexus is an important use case for being able
to access information about specific components including different
versions that are available, security and license data and other
information as well as for build tool migrations, download of
deployment packages and other component related development, QA and
operations activities.

Nexus performs a search using the data about components in all its
indexes. These include all the components available directly on the
server as well as any indexes downloaded from remote
repositories. This allows you to find components that are not yet used
in your organization, but are available to you via remote proxy
repositories. The necessary index downloads have to be enabled by a
Nexus administrator, since they are disabled by default.

WARNING: Some remote repositories do not provide such an index and
their content is therefore not fully available in a search.

////
tbd add link to index download section in administration chapter
////

The different search modes can be accessed with the 'Browse' button in
the main toolbar and selecting 'Search' or one of the nested options
like 'Maven' from the 'Browse' main menu. The common feature view for
the search without results is displayed in <<fig-search>>.  Beneath
the search title is the search criteria input area that displays the
current criteria e.g., 'Keywords'. Beside the current criteria is a
'More Criteria' button that allows you to add further criteria to your
search. Criteria can be removed by clicking on the minus/dash icon
within the criteria input box. The cross/x in the input box resets the
value.


[[fig-search]]
.Keyword Search without Results 
image::figs/web/search.png[scale=40]

Each criteria can be used with one search term and supports the *
character (star, asterik) for pattern matching. E.g., you could search with
the 'Group ID' search criteria and search for
+org.sonatype.nexus.*+. This would return components with the group ID
of +org.sonatype.nexus+ but also +org.sonatype.nexus.plugins+ and many
others.

The following criteria can be used:

Artifact ID:: The Maven +artifactId+ for a component. Other build
systems call this differently e.g. +name+ for Apache Ivy and Gradle,
and +module+ for Groovy Grape.

Classifier:: The Maven 'classifier' for a component. Common values are
+javadoc+, +sources+ or +tests+. 

Class Name:: The name of a class file within a component.

Format:: The format of the repository in which to look for a
component.

Group ID:: The Maven +groupId+ for a component. Other build systems
call this differently e.g. +org+ for Apache Ivy and +group+ for Gradle
and Groovy Grape.
 
Keyword:: A keyword that is contain in the component identifier.

Packaging:: The Maven +packaging+ for a component, which is +jar+ by
default. Other values as used in Maven and other build tools are
+ear+, '+war+, +maven-plugin+, +pom+, +ejb+, +zip+, +tar.gz+, +aar+
and many others.

SHA-1:: A sha1 checksum of the component file.

Version:: The Maven +version+ for a component. Other build
systems call this differently e.g. +rev+ for Apache Ivy or use the
same term.

Once you have provided a search term in a criteria input field like
the 'Keywords' criteria in the 'Search' feature view, the results
become visible in the 'Component' list. The components are listed with
their identifier and sorted alphabetically. The top of the list
includes a paging navigation with controls for the first, previous,
next and last pages as well as a numeric page input and a refresh
button.

Selecting a component in the list displays component details in the
list to the right. This details view shows the various versions of the
component in a list and more information about the selected component
in a number of tabs like 'Info' and 'Maven' below the list. A full
search results feature view with a component list, a component detail
and version and a selected version is displayed in
<<fig-search-results>>.

////
tbd ... more about the tabs in later sections .. link to them once we got them
////

[[fig-search-results]]
.Results of an Component Search for +junit+ and a selection of +junit:junit+
image::figs/web/search-results.png[scale=35]

The component detail view contains an overview with the 'Group' and
'Name' identifiers.

The 'Most popular version' displays the version that has the most
downloads by all users accessing the Central Repository. This data can
help with the selection of an appropriate version to use for a
particular component version.


The list of component versions uses the following columns:

Version:: The version of the component.

Name:: The name of the component. Depending on the repository format
this component is located in it can be equivalent to e.g. the
+artifactId' value in a Maven 2 repository.

Repository:: The repository that contains the component.

Age:: The 'Age' column displays the age of the component version being
available on the Central Repository. Since most components are
published to the Central Repository when released, this age gives you
a good indication of the actual time since the release of the
component.

Popularity:: The 'Popularity' column shows a relative popularity as
compared to the other component versions. This can give you a good
idea on the adoption rate of a new release. For example if a newer
version has a high age value, but a low popularity compared to an
older version, you might want to check the upstream project and see if
there is any issues stopping other users from upgrading that might
affect you as well. Another reason could be that the new version does
not provide signifcant improvements to warrant an upgrade for most
users.

////
The 'Security Issues' column shows the number of known security issues
for the specific component. The 'License Threat' column shows a colored
square with blue indicating no license threat and yellow, orange and
red indicating increased license threats. More information about both
indicators can be seen in the 'Component Info' panel below the list of
components for the specific component.

The 'Download' column provides download links for all the available
components.
////

Each of the columns in the component detail list can be used to sort
the table in 'Ascending' or 'Descending' order. In addition, you can
choose to add and remove colums with the sort and column drop-down
options or group by a field.

==== Keyword Search

The main toolbar visible in <<fig-ui-overview-anonymous>> or
<<fig-ui-overview-admin>> includes a 'quick search' text input
field. Type your search term and press 'enter' and Nexus performs a
keyword search. It will locate all components with the search term in
the groupId or artifactId component coordinate. and display a list of
components in the feature view panel. Once you select a component, a
list of all component versions will be displayed to the right of the
list of components. An example result from a search for +junit+ and a
selection of the +junit:junit+ component identifier is displayed in
<<fig-search-results>>.

Additionally the keyword search can be accessed with the 'Browse'
button in the main toolbar and selecting 'Search' from the 'Browse'
main menu. The search term can be provided in the 'Keyword' input
field in the 'Search' feature view.

==== Class Name Search

Rather than looking at the coordinates of a component, the 'Class
Name' search will look at the contents of the component and look for Java
class files with the specified name. You can perform a class name search
by clicking on 'Class Name' in the 'Search' sub menu of the 'Browse'
main menu and providing the class name in the input field.

For example, try a search for a class name of +Pair+ to see how many
library authors saw a need to implement such a class, saving you from
potentially implementing yet another version. You will find that the component
+org.apache.commons:commons-lang3+ presents a valid choice to gain
access to a 'Pair' class.

==== Maven Search

The 'Maven' search allows a search using the Maven coordinatess of a
component. These are 'Group ID' (groupId), 'Artifact ID' (artifactId),
'Version' (version), 'Classifier' (classifier), and 'Packaging'
(packaging).

You can access the 'Maven' search by clicking on 'Class Name' in the
'Search' sub menu of the 'Browse' main menu. At a minimum you need to
specify a group, component, or version in your search. An example
search would be with an Artifact ID +guice+ and a Classifier +no_aop+
or a group of +org.glassfish.main.admingui+ and a packaging +war+.

TIP: The Maven repository format is well supported by many other
tools like Apache Ivy, Eclipse Aether, Gradle, SBT, Leiningent and
others. The results of a Maven search are therefore easily accessible
to all these tools as well.


==== SHA-1 Search

Sometimes it is necessary to determine the version of a component,
where you only have access to the binary file without any detailed
component coordinate or version information. When attempting this
identification and neither the filename nor the contents of the
manfest file in the jar or similar content contain any useful
information about the exact version of the component, you can use
'SHA-1' search to identify the component.

Create a sha1 checksum, e.g., with the +sha1sum+ command available on
Linux or OSX or +fciv+ on Windows, and use the created string in a
'SHA-1' search. You can access it by clicking on 'SHA-1' in the
'Search' sub menu of the 'Browse' main menu.

The search will return a result, which will provide you with the
coordinates to replace the jar file with a dependency declaration.

TIP: The SHA-1 search can be a huge timesaver when migrating from a
legacy build system, where the used libraries are checked into the
version control system as binary components with no version
information available.

[[custom-search]]
==== Custom Search

A configurable search using the criteria you select is availble via
the 'Custom' menu item in the 'Search' section of the 'Browse' main
menu. Initially it has no criteria and it allows you to create a
search with criteria you add with the 'More Criteria' button.


/////

Metadata Search:: Search for components with specific metadata
properties is documented in <<sect-metadata-search>>.


[[sect-metadata-search]]
==== Searching Artifact Metadata
image:figs/web/nexus-pro-icon.png[scale=50] | image:figs/web/nexus-proplus-icon.png[scale=50]


To search for components with specific metadata, click on the 'Advanced
Search' link directly below the search field in the 'Artifact Search'
submenu of the Nexus menu. This opens the 'Search' panel and allows
you to select 'Metadata Search' in the search type drop-down as shown
in <<fig-using-search-metadata>>.

[[fig-using-search-metadata]]
.Searching Artifact Metadata
image::figs/web/meta_search-selection.png[scale=60]

Once you select the metadata search you will see two search fields and
an operator drop-down. The two search fields are the key and value of
the metadata for which you are searching. The operator drop-down can be set
to 'Equals', 'Matches', 'Key Defined', or 'Not Equal'. 'Equals' and 'Not Equals'
compare the value for a specific key. 'Matches' allows the usage of +\*+
to allow any characters. E.g., looking for +tr*+ would match +true+ but
also match +tree+. The 'Key Defined' operator will ignore any value provided
and return all components with the supplied key.

.Metadata Search Results for Custom Metadata
image::figs/web/meta_search-function.png[scale=60]

Once you locate a matching component in the results list,
click on the component and then select the Artifact Metadata to examine
an components metadata as shown in <<fig-using-search-metadata-results>>.

[[fig-using-search-metadata-results]]
.Metadata Search Results for Custom Metadata
image::figs/web/meta_search-result-0.png[scale=60]
////


////
Written for old Nexus 3 version prior to CMA refactor .. will need updates

[[using-sect-browsing]]
=== Browsing Repositories and Repository Groups

One of the most straightforward uses of Nexus is to browse the
structure of a repository or a repository group. If you click on the
Browse button image:figs/web/ui-browse-button-icon.png[scale=50] in the
main toolbar the main menu on the left displays the 'Browse' menu.  It
contains the 'Repository' section with the 'Standard' and the
'Managed' menu items. Thes 'Standard' lists allow you to access the
user-configured standard repositories, such the proxy repository for
the Central Repository called 'Central' or the preconfigured hosted
repositoriy 'Releases'. The 'Managed' list includes Nexus-managed
repositories such as staging repositories in {pro}.

Once you have selected e.g. 'Standard' the feature panel displays the
repository browsing user interface displayed in
<<fig-nexus-browse-repo>>.

It allows you to browse through the tree structure of the repository
by exanding and collapsing the levels of the hierarchy you are
interested in.

[[fig-nexus-browse-repo]]
.Browsing a Repository Storage
image::figs/web/repository-manager_browse-repositories.png[scale=50]

The 'More' button on the top of the panel includes items for actions
that are context-sensitive to your selection in the list below. E.g.,
when a repository or a directory in a proxy repository is selected, it
contains the 'View Remote' item. It will open up the remote repository
in a new web browser window. On the other hand, when the selection is
on a directory in a repository, and the current user has sufficient
privileges, a 'Delete' button is available. 

Once an actual file is selected in the list, the information panel
appears below. It contains one or more tabs relevant to the
selected file

NOTE: When browsing a proxy repository you might notice that the tree
doesn't contain all of the components in a repository. When you browse
a proxy repository, Nexus is displaying the components that have been
cached locally from the remote repository. If you don't see an
component you expected to see through Nexus, it only means that Nexus
has yet to cache the component locally. If you have enabled remote
repository index downloads, Nexus will return search results that may
include components not yet downloaded from the remote
repository. <<fig-nexus-browse-repo>>, is just an example, and you may
or may not have the example component available in your
installation of Nexus.

////


[[using-artifact-information]]
=== Viewing the Component Information

Once you located a file by browsing a repository or via a search and
selected it in the list, the panel below will, at a minimum, show the
'Info' tab as visible in <<fig-using-artifact-information>>. If a file
has not yet been locally cached, only the 'Path' in the repository
will be display. Otherwise the additional information shown includes
the 'Size' of the file in KB and the user name that triggered the
download of the component to a proxy repository in the 'Uploaded by'
field. 'Uploaded Date' as well as 'Last Modified Date' and 'SHA1' and
'MD5' file checksum values are displayed. In addition the 'Contained
In' field lists the repositories in which a file can be found.

[[fig-using-artifact-information]]
.Viewing the Component Info of commons-lang-2.6.jar
image::figs/web/using-artifact-information.png[scale=60]

[[using-artifact-maven-information]]
=== Viewing the Maven Information

If the file you are examining is located in a Maven repository and an
actual component a +.pom+ file or a +.jar+ file, you will see the
'Maven' tab in the panels. As visible in
<<fig-using-maven-information>>, the GAV parameters - 'Group',
'Artifact', 'Version', 'Extension' and optionally 'Classifier' - are
displayed above an 'XML' snippet identifying the component. You can use
this snippet to add a dependency to the component file to your Maven
project by adding it in your +pom.xml+ file.

[[fig-using-maven-information]]
.Viewing the Maven Information
image::figs/web/using-maven-information.png[scale=60]

////

[[custom-metadata-plugin]]
=== View and Editing Artifact Metadata
image:figs/web/nexus-pro-icon.png[scale=50] | image:figs/web/nexus-proplus-icon.png[scale=50]


Support for custom metadata is part of {pro}. You can
view, edit, and search for additional metadata associated to any
component in your Nexus repositories.

The features for custom metadata usage need to be activated by adding
and enabling the 'Custom Metadata' capability as described in.

tbd link to capabilities admin 

Security privileges allow you to define "read only" as well as "write"
access for custom metadata as well as grant or disallow access.

When viewing a specific component from browsing repository storage or a
repository index or from a search, the 'Artifact Metadata' tab
displays the interface shown in <<fig-using-viewing-metadata>>.

[[fig-using-viewing-metadata]]
.Viewing Artifact Metadata
image::figs/web/meta_existing-meta-value.png[scale=60]

Artifact metadata consists of a key, a value, and a namespace.
Existing metadata from an component's POM is given a +urn:maven+
namespace, and custom attributes are stored under the +urn:nexus/user+
namespace.

To add a custom attribute, click on an component in Nexus, and select
the 'Artifact Metadata' tab. Click 'Add...' there and a new row will
be inserted into the list of attributes. Supply a 'Key' and 'Value'
and click 'Save' to update the component's
metadata. <<fig-using-editing-metadata>> shows the Artifact Metadata
panel with two custom attributes: "approvedBy" and "approved".

[[fig-using-editing-metadata]]
.Editing Artifact Metadata
image::figs/web/meta_setting-meta-value.png[scale=60]


[[using-artifact-archive-browser]]
=== Using the Artifact Archive Browser
image:figs/web/nexus-pro-icon.png[scale=50] | image:figs/web/nexus-proplus-icon.png[scale=50]


For binary components like jar files Nexus displays an 'Archive Browser'
panel, as visible in <<fig-using-artifact-archive-browser>> that allows
you to view the contents of the archive. Clicking on invidiual files
in the browser will download them and potentially display them in your
browser. This can be useful for quickly checking out the contents of
an archive without manually downloading and extracting it.

[[fig-using-artifact-archive-browser]]
.Using the Archive Browser
image::figs/web/using-archive-browser.png[scale=60]

IMPORTANT: The archive browser is a feature of {pro}.


[[using-sect-dependencies]]
=== Viewing the Artifact Dependencies
image:figs/web/nexus-pro-icon.png[scale=50] | image:figs/web/nexus-proplus-icon.png[scale=50]


{pro} provides you with the ability to browse an
component's dependencies. Using the component metadata found in an
component's POM, Nexus will scan a repository or a repository group and
attempt to resolve and display an component's dependencies. To view an
component's dependencies, browse the repository storage or the
repository index, select an component (or an component's POM), and then
click on the 'Maven Dependency' tab.

On the 'Maven Dependency' tab, you will see the following form elements:

Repository:: When resolving an component's dependencies, Nexus will
query an existing repository or repository group. In many cases it
will make sense to select the same repository group you are
referencing in your Maven settings. If you encounter any problems
during the dependency resolution, you need to make sure that you are
referencing a repository or a group that contains these dependencies.

Mode:: An component's dependencies can be listed as either a tree or a
list. When dependencies are displayed in a tree, you can inspect
direct dependencies and transitive dependencies. This can come in
handy if you are assessing an component, based on the dependencies it is
going to pull into your project's build. When you list dependencies as
a list, Nexus is going to perform the same process used by Maven to
collapse a tree of dependencies into a list of dependencies using
rules to merge and override dependency versions if there are any
overlaps or conflicts.

Once you have selected a repository to resolve against and a mode to
display an component's dependencies, click on 'Resolve' as
shown in <<fig-using-dependencies>>. Clicking on this button will
start the process of resolving dependencies, depending on the number
of components already cached by Nexus, this process can take anywhere
from a few seconds to a minute. Once the resolution process is finished,
you should see the component's dependencies, as shown in
<<fig-using-dependencies>>.

[[fig-using-dependencies]]
.View an Artifact's Dependencies
image::figs/web/using_dependencies.png[scale=60]

Once you have resolved a component's dependencies, you can use the
Filter text input to search for particular component dependencies.  If
you double-click on a row in the tree or list of dependencies, you can
navigate to other components within the Nexus interface.

[[component-info]]
=== Viewing Component Security and License Information
image:figs/web/nexus-pro-icon.png[scale=50] | image:figs/web/nexus-proplus-icon.png[scale=50]

One of the added features of {pro} is the usage of data
from Nexus Lifecycle. This data contains security and license
information about components and is accessible for a whole repository
in the Repository Health Check feature described in . 

tbd link to rhc chapter

Details
about the vulnerability and security issue ratings and others can be
found there as well.

The 'Component Info' tab displays the security and licence information
available for a specific component. It is available in browsing or
search results, once a you have selected an component in the search
results list or repository tree view. An example search for Jetty, with
the 'Component Info' tab visible, is displayed in <<fig-clm-tab-jetty>>.  It
displays the results from the 'License Analysis' and any found 'Security
Issues'. 

The 'License Analysis' reveals a medium threat triggered by the fact
that Non-Standard license headers were found in the source code as visible
in the 'Observed License(s) in Source' column. The license found in the
pom.xml file associated to the project only documented Apache-2.0 or
EPL-1.0 as the 'Declared License(s)'.

[[fig-clm-tab-jetty]]
.Component Info Displaying Security Vulnerabilities for an Old Version of Jetty 
image::figs/web/component-info-tab-jetty.png[scale=50]

The 'Security Issues' section displays two issues with 'Threat Level'
values 5. The 'Summary' column contains a small summary description of
the security issue. The 'Problem Code' column contains the codes,
which link to the respective entries in the Common Vulnerabilities and
Exposures CVE list as well as the Open Source Vulnerability DataBase
OSVDB displayed in <<fig-clm-cve-jetty>> and
<<fig-clm-osvdb-jetty>>.

[[fig-clm-cve-jetty]]
.Common Vulnerabilities and Exposures CVE Entry for a Jetty Security Issue
image::figs/web/component-info-cve-jetty.png[scale=50]
  
[[fig-clm-osvdb-jetty]]
.Open Source Vulnerability DataBase OSVDB Entry for a Jetty Security Issue
image::figs/web/component-info-osvdb-jetty.png[scale=50]


.Understanding the Difference, {proplus}


In this section, we've talked about the various ways Sonatype component data is being used, at
least at an introductory level. However, understanding the differences between
the data usage in {pro} and {proplus} may 
still be a little unclear. Rather you are likely asking, "What do I get with {proplus}?

Great question. With {proplus} you get the Nexus Lifecycle suite of tools. {pro} 
is expanded in two key areas.

Policy Management::

Your organization likely has a process for determining which components can be
included in your applications. This could be as simple as limiting the age of
the component, or more complex, like prohibiting components with a certain type
of licenses or security issue.

Whatever the case, the process is supported by rules. Nexus Lifecycle Policy
management is a way to create those rules, and then track and evaluate your
application. Any time a rule is broken, that's considered a policy violation.
Violations can then warn, or even prevent a release.

Here's an example of the Nexus Lifecycle features for Nexus Staging.

[[fig-clm-staging-repository-failure]]
.Staging Repository Activity with a CLM Evaluation Failure and Details
image::figs/web/clm-staging-repository-failure.png[scale=60]

Component Information Panel::

The Component Information Panel, or CIP, provides everything you need to know
about a component. Looking at the image below, you'll notice two sections. On
the left, details about the specific component are provided. On the right, the
graph provides a wide variety of information including popularity, license, or
security issues. You can even click on each individual version in the graph,
which will then display on the left.
+
[[fig-nexus-clm-nexus-show-cip]]
.Component Information Panel Example
image::figs/web/nexus-clm-comp-info-cip.png[scale=50]
+
NOTE: The CIP is then expanded with the View Details button which shows exactly
what security or license issues were encountered, as well as any policy
violations.

If you would like more information about these features, check out our
link:http://books.sonatype.com/sonatype-clm-book/html/repository-manager-user-guide/index.html[Sonatype
CLM Repository Manager Guide].

////

////
this was for Nexus 3 pre CMA refactor .. so might be fine as is once
adapted .. 

[[using-sect-uploading]]
=== Uploading Maven Artifacts 

When your build makes use of proprietary or custom dependencies that
are not available from public repositories, you will often need to
find a way to make them available to developers in a custom Maven
repository. Nexus ships with a preconfigured third-party repository
that was designed to hold third-party dependencies that are used in
your builds. 

If you are signed in to Nexus as a user with sufficient privileges,
the 'Upload' section of the 'Browse' main menu will be visible and
contain the 'Maven' menu item. Press on this item and the feature view
panel will display the 'Maven' feature as shown in
<<fig-using-artifact-upload>>.

[[fig-using-artifact-upload]]
.Maven Artifact Upload Feature
image::figs/web/using_artifact-upload.png[scale=50]

To upload a component, select the target repository from the
'Repository' drop down list and press the 'Add an artifact' button and
select the component you want to upload from the filesystem in the dialog.

Once you have selected an component, you can modify the 'Classifier' and the
'Extension', if they have not been prefilled automatically. 

If the component you want to upload is a POM file, you can press the
'Upload' button to complete the upload. 

If you do not have a POM file and are uploading e.g., a JAR file you
have to ensure to specify the 'Group', 'Artifact' , 'Version' and
'Packaging' values to be able to proceed and then press the 'Upload'
button. Packaging values can be selected from the drop down list or
provided by typing the value into the input box.

In both cases you can upload multiple components for the same
coordinates e.g., the POM and the JAR file, with the 'Add another
artifact' button. This allows you to upload a POM and a JAR file
combined with the sources and javadoc JAR files in one operation.

[[fig-using-artifact-upload-details]]
.Maven Artifact Upload Feature
image::figs/web/using_artifact-upload-details.png[scale=50]

If you added a POM file as an additional component the coordinates from
the POM file will be used the and input filed will be removed. 

TIP: Uploading a POM file allows you to add further details like
dependencies to the file, which improves the quality of the upload by
enabling transitive dependency management.
////


////

tbd... this will be deleted I think 
[[using-sect-feeds]]
=== Browsing System Feeds

Nexus provides feeds that expose system events. You can browse these
feeds by clicking on 'System Feeds' under the 'Views/Repositories'
menu.  Clicking on 'System Feeds' will show the panel in
<<fig-repoman-system-feeds>>. You can use this simple interface to
browse the most recent reports of component deployments, cached
components, broken components, storage changes and otehr events that
have occurred in Nexus.

[[fig-repoman-system-feeds]]
.Browsing Nexus System Feeds
image::figs/web/repository-manager_system-feed.png[scale=70]

These feeds can come in handy if you are working at a large
organization with multiple development teams deploying to the same
instance of Nexus. In such an arrangement, all developers in an
organization can subscribe to the RSS feeds for New Deployed Artifacts
as a way to ensure that everyone is aware when a new release has been
pushed to Nexus. Exposing these system events as RSS feeds also opens
the door to other, more creative uses of this information, such as
connecting Nexus to external, automated testing systems. To access the
RSS feeds for a specific feed, select the feed in the System Feeds
view panel and then click on the Subscribe button. Nexus will then
load the RSS feed in your browse and you can subscribe to the feed in
your favorite RSS

There are a number of system feeds available in the System Feeds view,
and each has a URL that resembles the following URL:

----
http://localhost:8081/nexus/service/local/feeds/recentlyChangedFiles
----

The URLs can be ammended with the parameters +from+ and +count+ to 
specify the dataset viewed. E.g.  

----
http://localhost:8081/nexus/service/local/feeds/recentlyDeployedArtifacts?count=100
----

Where recentChanges would be replaced with the identifier of the feed
you were attempting to read. Available system feeds include:

- Authenication and Authorization Events

- Broken components in all Nexus repositories

- Broken files in all Nexus repositories

- Error and Warning events

- New components in all Nexus repositories

- New cached components in all Nexus repositories

- New cached files in all Nexus repositories

- New cached release components in all Nexus repositories

- New deployed components in all Nexus repositories

- New deployed files in all Nexus repositories

- New deployed release components in all Nexus repositories

- New files in all Nexus repositories

- New release components in all Nexus repositories

- Recent component storage changes in all Nexus repositories

- Recent file storage changes in all Nexus repositories

- Recent release component storage changes in all Nexus repositories

- Repository Status Changes in Nexus

- System changes in Nexus
////


////

////

[[using-sect-user-profile]]
=== Working with Your User Profile

As a logged-in user, you can click on your user name on the 
right-hand side of the main toolbar to switch the main menu to contain
the 'User' menu. Pressing on the 'Account' menu item displays the
'Account' feature in the main feature panel as displayed in <<fig-account-feature-panel>>.

[[fig-account-feature-panel]]
.Editing User Details in the Account Feature Panel 
image::figs/web/account-feature-panel.png[scale=50]

The 'Account' feature allows you to edit your 'First Name', 'Last Name', and
'Email' directly in the form. 

==== Changing Your Password

In addition to changing your name and email, the user profile allows
you to change your password by clicking on the 'Change Password'
button. You will be prompted to authenticate with your current
password and subsequently supply your new password in pop up dialogs.

TIP: The password change feature only works with the Nexus built-in 
security realm. If you are using a different security realm like
LDAP or Crowd, this option will not be visible.

//// 
tbd
==== Additional User Feature Panels

The 'User' menu can be used by other plugins and features to
change or access user specific data and functionality. One such use
case is the User Token access.

.
tbd link to user token section
////


////
/* Local Variables: */
/* ispell-personal-dictionary: "ispell.dict" */
/* End:             */
////
