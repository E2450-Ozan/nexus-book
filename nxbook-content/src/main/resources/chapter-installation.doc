== Installing and Running Nexus

=== Downloading Nexus

There are two distributions of Nexus: http://nexus.sonatype.org[Nexus
Open Source] and http://www.sonatype.com/products/nexus[Nexus
Professional].  Nexus Open Source is a fully-featured repository
manager which can be freely used, customized, and distributed under
the GNU Affero General Public License (AGPL) Version 3. Nexus
Professional is a distribution of Nexus with features that are
relevant to large enterprises and organizations which require complex
procurement and staging workflows in addition to more advanced LDAP
integration, Atlassian Crowd support, and other development
infrastructure. The differences between Nexus Open Source and Nexus
Professional are explored in the previous chapter.

==== Downloading Nexus Open Source

Download Nexus Open Source from
http://nexus.sonatype.org/download-nexus.html then download the
appropriate Nexus Open Source distribution by clicking on the
appropriate archive as shown in <xref
linkend="fig-installing_open-source-dl-select" />. Nexus Open Source
is available as a ZIP and a Gzip'd TAR file under the file names
${nexusopen.bundle.name}.zip and ${nexusopen.bundle.name}.tgz

.Downloading Nexus Open Source from nexus.sonatype.org
image::figs/web/installing_open-source-dl.png[]

.Selecting the Nexus Open Source Distribution Download
image::figs/web/installing_open-source-dl-select.png[]

Nexus Open Source can also be deployed as a web application in a
servlet container like Jetty or Tomcat or an application server like
Glassfish or JBoss. Instructions for installing Nexus as a WAR are
found in <xref linkend="install-sect-as-a-war" />.

==== Downloading Nexus Professional

To download Nexus Professional, go to the
http://go.sonatype.com/forms/NexusEvaluationRegForm[Nexus Trial
evaluation form].

Fill out the form and then check your email account for download
instructions. After filling out a brief contact form and agreeing to
the evaluation license, you will be sent an email with a link to
download the Nexus Professional distribution. Nexus is available as a
ZIP file under the file names ${nexus.bundle.name}.zip and
${nexus.bundle.name}.tgz

=== Installing Nexus

The following sections detail the installation process for both Nexus
Open Source and Nexus Professional.

==== Nexus Prerequisites

Nexus Open Source and Nexus Professional only have one prerequisite, a
Java Runtime Environment (JRE) compatible with Java 5 or higher. Nexus
is most often run with the JRE that is bundled with a Java Development
Kit (JDK) installation, and it can be run with the latest version of
Sun's JDK for Java 5 or Java 6. To download the latest release of the
Sun JDK, go to http://developers.sun.com/downloads/, and download the
latest Java 6 JDK or an older Java 5 JDK, either will work but Java 6
is recommended.

====  Installing Nexus Open Source

The following instructions are for installing Nexus Open Source as a
stand-alone server. Nexus comes bundled with a Jetty instance which
listens to all configured IP addresses on a host (0.0.0.0) and runs on
port 8081 by default. If you would like to run Nexus Open Source as a
web application in an existing application server or servlet
container, please refer to the instructions in <xref
linkend="install-sect-as-a-war" />.

Installing Nexus Open Source is straightforward. Unpack the Nexus web
application archive in a directory. If you are installing Nexus on a
local workstation to give it a test run, you can install it in your
home directory or wherever you like; Nexus doesn't have any hard coded
directories, it will run from any directory. If you downloaded the ZIP

----
$ unzip ${nexusopen.bundle.name}.zip
----

And, if you download the GZip'd TAR archive, run:

----
$ tar xvzf ${nexusopen.bundle.name}.tgz
----

NOTE: There are some known incompatibilities with the version of tar
provided by Solaris and the gzip tar format. If you are installing
Nexus on Solaris, you must use the GNU tar application, or you will
end up with corrupted files.

NOTE: If you are installing Nexus on a server, you might want to use a
directory other than your home directory. On a Unix machine, this book
assumes that Nexus is installed in
/usr/local/${nexusopen.version.name} with a symbolic link
/usr/local/nexus to the nexus directory. Using a generic symbolic link
nexus to a specific version is a common practice which makes it easier
to upgrade when a newer version of Nexus is made available.

----
$ sudo cp ${nexusopen.bundle.name}.tgz /usr/local
$ cd /usr/local
$ sudo tar xvzf ${nexusopen.bundle.name}.tgz
$ ln -s ${nexusopen.version.name} nexus
----

Although it isn't required for Nexus to run, you may want to set an
environment variable NEXUS_HOME in your environment which
points to the installation directory of Nexus. This chapter will refer
to this location as \${NEXUS_HOME}

The Nexus installation directory ${nexusopen.version.name} has a
sibling directory named sonatype-work. This directory contains all of
the repository and configuration data for Nexus and is stored outside
of the Nexus installation directory to make it easier to upgrade to a
newer version of Nexus. By default, this directory is always a sibling
to the nexus installation directory; if you installed nexus in
/usr/local directory would also contain a sonatype-work subdirectory
containing all of the content and configuration. The location of the
sonatype-work directory can be customized by altering the nexus-work
property in \${NEXUS_HOME}/conf/plexus.properties

==== Installing Nexus Professional

The following instructions are for installing Nexus Professional as a
stand-alone server. Nexus Professional is bundled with a Jetty
instance which listens to all configured IP addresses on a host
(0.0.0.0) and runs on port 8081 by default.

Installing Nexus is straightforward, unpack the Nexus web application
archive in a directory. If you are installing Nexus on a local
workstation to give it a test run, you can install it in your home
directory or wherever you like; Nexus doesn't have any hard coded
directories, it will run from any directory. If you downloaded the ZIP

----
$ unzip ${nexus.bundle.name}.zip
----

And, if you download the GZip'd TAR archive, run:

----
$ tar xvzf ${nexus.bundle.name}.tgz
----

If you are installing Nexus on a server, you might want to use a
directory other than your home directory. On a Unix machine, this book
assumes that Nexus is installed in /usr/local/${nexus.version.name}
with a symbolic link /usr/local/nexus to the nexus directory. Using a
symbolic link nexus to a directory which holds a specific version of
Nexus is a common practice that makes it easier to upgrade to a newer
version of Nexus.

----
$ sudo cp ${nexus.bundle.name}.tgz /usr/local
$ cd /usr/local
$ sudo tar xvzf ${nexus.bundle.name}.tgz
$ ln -s ${nexus.version.name} nexus
----

Although it isn't required for Nexus to run, you may want to set an
environment variable NEXUS_HOME in your environment which points to
the installation directory of Nexus. This chapter will refer to this
location as \${NEXUS_HOME}. The Nexus installation directory
${nexus.version.name} has a sibling directory named
sonatype-work. This directory contains all of the repository and
configuration data for Nexus and is stored outside of the Nexus
installation directory to make it easier to upgrade to a newer version
of Nexus.

=== Upgrading Nexus

Since Nexus separates its configuration and data storage from the
application, it is easy to upgrade an existing Nexus installation. To
upgrade Nexus, unpack the Nexus archive in the directory which
contains the existing Nexus installation. Once the archive is
unpacked, the new Nexus application directory should be a sibling to
your existing sonatype-work/ directory. If you have defined a symbolic
link for the version of Nexus to use, change that to point at the new
Nexus application directory. When you start the new instance of Nexus
it will read the existing repository configuration from the
sonatype-work/

=== Running Nexus

When you start Nexus, you are starting a web server on the default
port of 0.0.0.0:8081. Nexus runs within a servlet container called
Jetty and it is started with a native service wrapper called the
http://wrapper.tanukisoftware.org/doc/english/introduction.html[Tanuki
Java Service Wrapper]. This service wrapper can be configured to run
Nexus as a Windows service or a Unix daemon. To start Nexus, you will
need to find the appropriate startup script for your platform. To see
the list of available platforms, list the contents of the
\${NEXUS_HOME}/bin/jsw

The following example listing starts Nexus using the script for Mac
OSX. First we list the contents of the \${NEXUS_HOME}/bin/jsw to show
you the available platforms, then we make the contents of the bin
directory executable with chmod. The Mac OS X wrapper is started with
a call to nexus start, and then we tail the wrapper.log in
\${NEXUS_HOME}/logs. Nexus will initialize itself and print a message
stating what IP address and port it is listening on.

----
$ cd /usr/local/nexus
$ ls ./bin/jsw/
conf/                linux-x86-64/        solaris-x86-32/
lib/                 macosx-universal-32/ windows-x86-32/
license/             macosx-universal-64/ windows-x86-64/
linux-ppc-64/        solaris-sparc-32/
linux-x86-32/        solaris-sparc-64/
$ chmod -R a+x bin
$ ./bin/jsw/macosx-universal-64/nexus start
Starting Nexus Repository Manager...
Started Nexus Repository Manager.
$ tail -f logs/wrapper.log 
INFO  ... [ServletContainer:default] - SelectChannelConnector@0.0.0.0:8081
----

At this point, Nexus will be running and listening on all IP addresses (0.0.0.0) that are configured for the current host on port 8081. To use Nexus, fire up a web browser and type in the URL: http://localhost:8081/nexus

While we use "localhost" throughout this book, you may need to use the
IP Loopback Address of "127.0.0.1" or the IP address assigned to the
machine running Nexus. Click on the "Log In" link in the upper
right-hand corner of the web page, and you should see the login
dialog. THE DEFAULT NEXUS USERNAME AND PASSWORD IS "admin" AND
"admin123".

.Default Nexus Administrative Credentials (admin/admin123)
image::figs/web/installation_default-admin.png[]

.Nexus Application Window (default login/password is admin/admin123)
image::figs/web/repository-manager_nexus-login.png[]

=== Post-Install Checklist

Nexus ships with some default passwords and settings for repository
indexing that need to be changed for your installation to be useful
(and secure). After installing and running Nexus, you need to make
sure that you complete the following tasks:

Step 1: Change the Administrative Password and Email Address:: The
administrative password defaults to admin123. The first thing you
should do to your new Nexus installation is change this password. To
change the administrative password login as "admin" with the password
"admin123", and click on Change Password under the Security menu in
the left-hand side of the browser window. For more detailed
instructions, see <xref linkend="using-sect-changing-password" />.

Step 2: Configure the SMTP Settings:: Nexus can send username and password recovery emails, to enable this feature, you will need to configure Nexus with a SMTP Host and Port as well as any necessary authentication parameters that Nexus needs to connect to the mail server. To configure the SMTP settings, load the server configuration dialog shown in <xref linkend="fig-nexus-server-config" />.

Step 3: Enable Remote Index Downloads:: Nexus ships with three
important proxy repositories for the Maven Central repository, Apache
Snapshot repository, and the Codehaus Snapshot repository. Each of
these repositories contains thousands (or tens of thousands) of
artifacts and it would be impractical to download the entire contents
of each. To that end, most repositories maintain an index which
catalogs the entire contents and provides for fast and efficient
searching. Nexus uses these remote indexes to search for artifacts,
but we've disabled the index download as a default setting. To
download remote indexes:

. Click on Repositories under the Administration menu in the
  left-hand side of the browser window.

. Select each of the three proxy repositories and change Download
  Remote Indexes to true in the Configuration tab. You'll need to load
  the dialog shown in <xref linkend="fig-repo-config" /> for each of
  the three repositories.

This will trigger Nexus to re-index these repositories, during which
the remote index files will be downloaded. It might take Nexus a few
minutes to download the entire index, but once you have it, you'll be
able to search the entire contents of the Maven repository.

Once you've enabled remote index downloads, you still won't be able to
browse the complete contents of a remote repository. Downloading the
remote index allows you to search for artifacts in a repository, but
until you download those artifacts from the remote repository they
will not show in the repository tree when you are browsing a
repository. When browsing a repository, you will only be shown
artifacts which have been downloaded from the remote repository.

Step 4: Change the Deployment Password:: The deployment user's
password defaults to deployment123. Change this password to make sure
that only authorized developers can deploy artifacts to your Nexus
installation. To change the deployment password: log in as an
administrator, click on Security to expand the Security menu, then
click on Users. You should then see a list of users. Right-click on
the deployment user and select "Set Password".

Step 5: Install Professional License (Nexus Professional Only):: If
you are running Nexus Professional and you have purchased a license
from Sonatype, you will need to upload your license. This license will
be emailed to you after you have purchased Nexus Professional from
http://store.sonatype.com.  To
load the License tab, click on Licensing under the Enterprise menu in
the Nexus application menu. For more information about installing a
Nexus Professional license file, see <xref
linkend="installing-sect-licensing" />.

Step 6: If necessary, set the LANG Environment Variable:: If your
Nexus instance needs to store configuration and data using an
international character set, you should set the LANG environment
variable. The Java Runtime will adapt to the value of the LANG
environment variable and ensure that configuration data is saved using
the appropriate character type. If you are starting Nexus as a
service, place this environment variable in the startup script found
in /etc/init.d/nexus. For more information about locale settings in
Ubuntu read https://help.ubuntu.com/community/Locale

=== Configuring Nexus as a Service

When installing Nexus, you will often want to configure Nexus as a
service. If you are on Windows, the Nexus distribution includes
binaries that can work with the Windows Services subsystem and if you
are on another platform such as GNU/Linux Nexus also includes scripts
that can be configured to start Nexus as a service. The following
sections provide instructions for configuring Nexus as a service.

==== Startup Scripts for GNU/Linux

You can configure Nexus to start automatically, by copying the nexus
script to the /etc/init.d directory. On a GNU/Linux system (tested
with Redhat, Fedora, Ubuntu, or CentOS) perform the following
operations as the root user:

. Copy either \${NEXUS_HOME}/bin/jsw/linux-ppc-64/nexus,
  \${NEXUS_HOME}/bin/jsw/linux-x86-32/nexus, or
  \${NEXUS_HOME}/bin/jsw/linux-x86-64/nexus to /etc/init.d/nexus

. Make the /etc/init.d/nexus script executable - chmod 755
  /etc/init.d/nexus

. Edit this script changing the following variables:

.. Change APP_NAME

.. Change APP_LONG_NAME to "Sonatype Nexus"

.. Add a variable NEXUS_HOME which points to your Nexus installation
   directory

.. Add a variable PLATFORM which contains either linux-x86-32,
              linux-x86-64, or linux-ppc-64

. Change WRAPPER_CMD to \${NEXUS_HOME}/bin/jsw/\${PLATFORM}/wrapper

. Change WRAPPER_CONF to \${NEXUS_HOME}/bin/jsw/conf/wrapper.conf

. Change PIDDIR to /var/run

. Add a JAVA_HOME variable which points to your local Java
  installation

. Add a \${JAVA_HOME}/bin to the PATH

. (Optional) Set the RUN_AS_USER to "nexus". If you do this, you will
  need to:

.. Create a nexus user

.. Change the Owner and Group of your nexus install directory
   to nexus

NOTE: If you set the "RUN_AS_USER" variable, you'll have to change the
"pid" directory to point to a directory where this user has read/write
permissions. In most Linux distributions, /var/run is only writable by
root. The properties that would need to be added to customize the PID
file location is "wrapper.pid". For more information about this
property and how it would be configured in wrapper.conf, see: http://wrapper.tanukisoftware.com/doc/english/properties.html

.Script Directory for 32-bit GNU/Linux 
image::figs/web/installing_bin-dir-l32.png[]

At the end of this you should have a file in /etc/init.d/nexus which
starts with a series of configuration properties which look something
like this (assuming that you've installed Nexus in /usr/local/nexus
and that you have Java installed in /usr/java/latest

----
JAVA_HOME=/usr/java/latest
PATH=\${PATH}:\${JAVA_HOME}/bin
APP_NAME="nexus"
APP_LONG_NAME="Sonatype Nexus"
NEXUS_HOME=/usr/local/nexus
PLATFORM=linux-x86-64
WRAPPER_CMD="\${NEXUS_HOME}/bin/jsw/\${PLATFORM}/wrapper"
WRAPPER_CONF="\${NEXUS_HOME}/bin/jsw/conf/wrapper.conf"
PRIORITY=
PIDDIR="/var/run"
#RUN_AS_USER=nexus
----

===== Add Nexus as a Service on Redhat, Fedora, and CentOS

This script has the appropriate chkconfig directives, so all you need
to do to add Nexus as a service is run the following commands:

----
$ cd /etc/init.d
$ chkconfig --add nexus
$ chkconfig --levels 345 nexus on
$ service nexus start
Starting Sonatype Nexus...
$ tail -f /usr/local/nexus/logs/wrapper.log
----

The second command adds nexus as a service to be started and stopped
with the service command and managed by the chkconfig manages the
symbolic links in /etc/rc[0-6].d which control the services to be
started and stopped when the operating system restarts or transitions
between run-levels. The third command adds nexus to run-levels 3, 4,
and 5. The service command starts Nexus, and the last command tails
the wrapper.log to verify that Nexus has been started successfully. If
Nexus has started successfully, you should see a message notifying you
that Nexus is listening for HTTP

===== Add Nexus as a Service on Ubuntu

The process for setting Nexus up as a service on Ubuntu differs
slightly from the process used on a Redhat variant. Instead of running
chkconfig, you should run the following sequence of commands once
you've configured the startup script in /etc/init.d

----
$ cd /etc/init.d
$ update-rc.d nexus defaults
$ service nexus start
Starting Sonatype Nexus...
$ tail -f /usr/local/nexus/logs/wrapper.log
----

=== Running Nexus Behind a Proxy

If you installed Nexus as a stand-alone application, Nexus is running
on a high-performance servlet container based on Java NIO. From a
performance perspective, there is no reason for you not to run Nexus
by itself without a proxy. Yet, more often than not, organizations run
applications behind a proxy for security concerns and to consolidate
multiple disparate applications using tools like mod_rewrite. For this
reason, we've included some brief instructions for configuration
Apache httpd. We assume that you've already installed Apache 2, and
that you are using a Virtual Host for www.somecompany.com.

Let's assume that you wanted to host Nexus behind Apache HTTPd at the
URL http://www.somecompany.com. To do this, you'll need to change the
context path that Nexus is served from.

. Edit plexus.properties in \${NEXUS_HOME}/conf. You'll see an element
  named webapp-context-path. Change this value from "/nexus" to "/"

. Restart Nexus and Verify that it is available on
  http://localhost:8081/

. Clear the Base URL in Nexus as shown in <xref
  linkend="fig-nexus-server-config-3" /> under Application Server
  Settings.

At this point, edit the HTTPd configuration file for the
www.somecompany.com virtual host. Include the following to expose
Nexus via mod_proxy at http://www.somecompany.com/

----
ProxyRequests Off 
ProxyPreserveHost On 

<VirtualHost *:80> 
  ServerName www.somecompany.com 
  ServerAdmin admin@somecompany.com 
  ProxyPass / http://localhost:8081/
  ProxyPassReverse / http://localhost:8081/
  ErrorLog logs/somecompany/nexus/error.log 
  CustomLog logs/somecompany/nexus/access.log common 
</VirtualHost>
----

If you just wanted to continue to serve Nexus at the /nexus context
path, you would not change the contextPath in
\${NEXUS_HOME}/conf/plexus.xml and you would include the context path
in your ProxyPass and ProxyPassReverse

----
  ProxyPass /nexus/ http://localhost:8081/nexus/
  ProxyPassReverse /nexus/ http://localhost:8081/nexus/
----

Apache configuration is going to vary based on your own application's
requirements and the way you intend to expose Nexus to the outside
world. If you need more details about Apache httpd and mod_proxy,
please see http://httpd.apache.org

=== Installing the Nexus WAR

The Nexus Open Source WAR has been successfully tested in Tomcat,
Jetty, and Resin. If you need to run Nexus under Glassfish, please see
<xref linkend="install-sect-war-gf" />. To download the Nexus Open
Source WAR, go to http://nexus.sonatype.org/using/download.html.
Click on the Download Site link and then download the Nexus WAR. Once
you have downloaded the Nexus Open Source WAR, you can install it in a
servlet container or application server.

The process for installing a WAR in an servlet container or
application server is going to vary for each specific
application. Often, this installation process is as simple as dropping
a WAR file in a special directory and restarting the container. For
example, to install the Nexus WAR in Tomcat, drop the
nexus-webapp-1.6.0.war file in \${TOMCAT_HOME}/webapps and restart
your Tomcat instance. Assuming that Tomcat is configured on port 8080
once Tomcat is started, Nexus will be available on
http://localhost:8080/nexus-webapp-1.6.0.

If you would like a less verbose URL, copy nexus-webapp-1.6.0.war to a
file named nexus.war before copying the distribution to
\${TOMCAT_HOME}/webapps

NOTE: When installing Nexus as a WAR in an application server or
servlet container, it automatically creates a sonatype-work directory
in ~/sonatype-work. This directory contains all of the necessary
configuration and repository storage for Nexus.

==== Running the Nexus WAR in Glassfish

There is a known logging configuration conflict between the Nexus Open
Source WAR and Glassfish. To address this conflict, you will need to
modify the log4j.properties file and change a few of the directives
that print messages to the console. The log4j.properties file is
located in ~/sonatype-work/conf/log4j.properties. This file is created
the first time you attempt to deploy Nexus to Glassfish. To create
this file, deploy Nexus to Glassfish. While this initial deployment
will fail due to a logging conflict, the act of deploying Nexus to
Glassfish will create the working directory in ~/sonatype-work and the
log4j.properties

Edit this log4j.properties file as follows:

. On the first line, change "log4j.rootLogger=INFO, console," to
  "logfilelog4j.rootLogger=INFO, logfile"

. Remove the last three lines starting with "log4j.appender.console"

These changes will instruct Log4J not to print messages to the
console. Once you make these edits, restart Glassfish.

=== Installing a Nexus Professional License

To install a Nexus Professional license, click on Licensing in the
Enterprise menu. Clicking on Licensing will bring up the panel shown
in <xref linkend="fig-installations-licensing" />. To upload your
Nexus Professional license, click on Browse..., select the file, and
click on Upload.

.Nexus Professional Licensing Panel
image::figs/web/repository-manager_license.png[] 

Once you have selected a license and uploaded it to Nexus, Nexus
Professional will display a dialog box with the Nexus Professional
End-user License Agreement as shown in <xref
linkend="fig-installation-eula" />. If you agree with the terms and
conditions, click on "I Agree".

.Nexus Professional End-user License Agreement
image::figs/web/installing_license_eula.png[] 

Once you have agreed to the terms and conditions contained in the End
User License Agreement, Nexus Professional will then display a dialog
box confirming the installation of a Nexus Professional license as
shown in <xref linkend="fig-installation-license-upload-config" />.

.License Upload Finished Dialog
image::figs/web/installing_license_uploaded.png[]

If you need to move your Nexus Professional license, you can click on
the "Uninstall License" button at the bottom of the Licensing
Panel. Clicking on this button will show the dialog in <xref
linkend="fig-installation-config-uninstall" /> which confirms that you
want to uninstall a license.

.Uninstall License Confirmation Dialog
image::figs/web/installing_uninstall_license.png[]

Clicking Yes in this dialog box will uninstall the license from Nexus
Professional and display another dialog which confirms that the
license has been successfully uninstalled.

.License Uninstall Completed Dialog
image::figs/web/installing_uninstall_completed.png[]

==== Evaluation Expiration

If you have downloaded the Nexus Professional evaluation, you will
have thirty days to evaluate the product. After the expiration of this
thirty day evaluation period, Nexus Professional will revert back to
Nexus Open Source. To reactivate Nexus Professional after the end of
your evaluation period, contact a Sonatype sales representative at
sales@sonatype.com

=== Sonatype Nexus Directories

The following sections describe the various directories that are a
part of any Nexus installation. When you install Nexus Open Source or
Nexus Professional, you are creating two directories: a directory
which contains the Nexus runtime and application, and a directory
which contains your own configuration and data. When you upgrade to a
newer version of Nexus, you replace the Nexus application directory
and retain all of your own custom configuration and repository data in
sonatype-work/

==== Sonatype Nexus Work Directory

The Sonatype Work directory is installed as a sibling to the nexus
application directory, and the location of this directory can be
configured via the plexus.properties file which is described in <xref
linkend="sect-installing-conf-dir" />. <xref
linkend="fig-installing_work-dir" /> shows the Sonatype Nexus work
directory with the conf/

.The Sonatype Nexus Work Directory
image::figs/web/installing_work-dir.png[]

The Sonatype Nexus work directory contains the following
subdirectories:

backup/:: If you have configured a scheduled job to backup Nexus
configuration, this directory is going to contain a number of ZIP
archives that contain snapshots of Nexus configuration.  Each ZIP file
contains the contents of the conf/ directory. (Automated backups are a
feature of Nexus Professional.)

conf/:: This directory contains the Nexus configuration.  Settings
that define the list of Nexus repositories, the logging configuration,
the staging and procurement configuration, and the security settings
are all captured in this directory.

indexer/:: Contains a Nexus index for all repositories and repository
groups managed by Nexus. A Nexus index is a Lucene index which is the
standard for indexing and searching a Maven repository. Nexus
maintains a local index for all repositories, and can also download a
Nexus index from remote repositories.

logs/:: The nexus.log file that contains information about a running
instance of Nexus. This directory also contains archived copies of
Nexus log files. Nexus log files are rotated every day. To reclaim
disk space, you can delete old log files from the logs/

p2/:: If you are using the P2 repository management features of Nexus
Professional, this directory contains a local cache of P2 repository
artifacts.

proxy/:: Stores data about the files contained in a remote
repository. Each proxy repository has a subdirectory in the
proxy/attributes/ directory and every file that Nexus has interacted
with in the remote repository has an XML file which captures such data
as the: last requested timestamp, the remote URL for a particular
file, the length of the file, and the digests for a particular file
among other things. If you need to backup the local cached contents of
a proxy repository, you should also back up the contents of the proxy
repository's directory under proxy/attributes/

storage/:: Stores artifacts and metadata for Nexus repositories. Each
repository is a subdirectory which contains the artifacts in a
repository. If the repository is a proxy repository, the storage
directory will contain locally cached artifacts from the remote
repository. If the repository is a hosted repository, the storage
directory will contain all artifacts in the repository. If you need to
backup the contents of a repository, you should backup the contents of
the storage directory.

template-store/:: Contains templates for default repositories. If you
examine the XML files in this directory, you will see that they
contain default templates for each different type of repository. For
example, the repository-default_proxy_release.xml file contains
defaults for a Proxy repository with a release policy.

timeline/:: Contains an index which Nexus uses to store events and
other information to support internal operations. Nexus uses this
index to store feeds and history.

trash/:: If you have configured scheduled jobs to remove snapshot
artifacts or to delete other information from repositories, the
deleted data will be stored in this directory.  To empty this trash
folder, view a list of Nexus repositories, and then click on the Trash
icon in the Nexus user interface.

The conf/ directory contains a number of files which allow for
configuration and customization of Nexus. All of the files contained
in this directory are altered by the Nexus administrative user
interface. While you can change the configuration settings contained
in these files with a text editor, Sonatype recommends that you modify
the contents of these files using the Nexus administrative user
interface.

log4j.properties:: Contains Log4J configuration, if you need to
customize the detail of log messages, the frequency of log file
rotation, or if you want to connect your own, custom Log4J appenders,
you would alter this configuration file.

lvo-plugin.xml:: Contains configuration for the latest version
plugin. This XML file contains the location of the properties file
which Nexus queries to check for a newer version of Nexus.

nexus.xml:: The bulk of the configuration of Nexus is contained in
this file. This file maintains a list of repositories, and all
server-wide configuration like the SMTP settings, security realms,
repository groups, targets, and path mappings.

pgp.xml:: Contains PGP key server configuration.

nexus-obr-plugin.properties:: Contains configuration for the Nexus
OSGi Bundle repository plugin in Nexus Professional.

procurement.xml:: Contains configuration for the Nexus Procurement
plugin in Nexus Professional.

security.xml:: Contains security information about users and roles in
Nexus.

staging.xml:: Contains configuration for the Nexus Staging plugin in
Nexus Professional.

==== Nexus Configuration Directory

After installing Nexus Professional, you will have a
nexus-professional-webapp-${nexus.version}/ directory and a
sonatype-work/ directory, and after installing Nexus Open Source, you
will have a nexus-webapp-${nexus.version}/ directory and a
sonatype-work/ directory. This section details the contents of the
conf directory that is shown in <xref
linkend="fig-installing_conf-dir" />. This directory contains
configuration for the Jetty servlet container. You will only need to
modify the files in this directory if you are customizing the
configuration of <indexterm> <primary>Plexus <primary>Jetty Jetty
servlet container, or the behavior of the scripts that start Nexus.

.Nexus Professional Configuration Directory
image::figs/web/installing_conf-dir.png[]

The files and folders contained in this directory are:

classworlds.conf:: Defines the order in which resources and classes
are loaded from the classpath. It is unlikely that even the most
advanced Nexus users will ever need to customize the contents of this
file.

plexus.properties:: This file contains configuration variables which
control the behavior of Plexus and the Jetty servlet container. If you
are customizing the port and host that Nexus will listen to, you would
change the application-port and application-host properties defined in
this file. If you wanted to customize the location of the Sonatype
work directory, you would modify the value of the nexus-work property
in this configuration file.

plexus.xml:: Defines the class names and configuration of components
which are loaded by Plexus at startup. This file should never be
changed as all configurable values have been removed from this file
and placed in plexus.properties

jetty.xml:: If this file is present in the conf/ directory, it will be
used to configure Jetty.

The conf/examples/ directory contains sample Jetty configuration files
which can be used to customize the behavior of the Jetty servlet
container:

jetty.xml:: contains a jetty.xml sample with no customizations. This
sample file listens on the \${application-port} defined in
plexus.properties

jetty-ajp.xml:: Contains a jetty.xml sample which will configure Nexus
to listen on an AJP port 8009. This configuration can be used if you
are proxying your Nexus server with web server which understands the
AJP protocol such as Apache httpd with the mod_proxy_ajp module.

jetty-dual-ports-with-ssl.xml:: Contains a jetty.xml sample which
configures Nexus to listen on both the \${application-port} and
\${application-port-ssl} (as defined in plexus.properties). This
sample configuration also contains the SSL redirect rule.

jetty-faster-windows.xml:: Contains a jetty.xml sample which
configures a response buffer size that will address performance issues
on Windows 2003 Server, for more information about this fix see <ulink
url="http://docs.codehaus.org/display/JETTY/Slow+Win2003">the Jetty
Wiki

jetty-header-buffer.xml:: Contains a jetty.xml sample which increases
the headerBufferSize to 8k from the default of 4k. Documentation about
the header buffer size can be found on <ulink
url="http://docs.codehaus.org/display/JETTY/Configuring+Connector">the
Jetty Wiki

jetty-simple-https-proxy.xml:: Contains a jetty.xml sample which
should be used if you are proxying a Nexus instance with a web server
that is handling SSL. For example, if you were proxying Nexus with
Apache httpd server using mod_ssl you would use this configuration to
configure the Jetty RewriteHandler

jetty-ssl.xml:: Contains a jetty.xml sample which will only serve SSL
encrypted content from \${application-port} (as defined in
plexus.properties

The conf/examples/proxy-https/ directory contains two files:
apache2.conf and jetty.xml contains sample mod_proxy directives to configure Apache httpd to handle SSL.
