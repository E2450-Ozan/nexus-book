== Build Promotion with the Nexus Staging Suite


[[staging-sect-intro]]
=== Introduction

If you release software, you will often need to test a
release before deploying it to a production system or an externally
accessible repository. For example, if you are developing a large,
enterprise web application you may want to stage a release candidate to a
production system and perform a series of rigorous tests before a release
manager makes a decision to either return a system to development or
deploy a system to production.

The Nexus Staging Suite in Nexus Professional allows an organization
to create a temporary staging repository and to manage the promotion of
artifacts from a staging repository to a release repository. This ability
to create an isolated, release candidate repository that can discarded or
promoted makes it possible to support the decisions that go into
certifying a release.

[[staging-sect-without]]
=== Releasing Software with a Staging Repository

Without the Staging Suite, when a developer deploys an
artifact to a Hosted repository such as the Release repository, this
artifact is published to a hosted repository and is immediately made
available - there is no oversight, there is no approval or certification
process. There is no chance to test the artifact before writing the
artifact to a hosted repository. If there is a mistake in the release,
often the only option available is to republish the artifacts to the
release repository or deploy a new version of the artifacts.

.Without the Nexus Staging Suite
image:figs/web/staging_without_staging.png[]

While this is acceptable for some users, organizations and
enterprises with a QA cycle often need a temporary staging repository
for potential release candidates: a staging repository. With the Nexus
Staging Suite, an organization can automatically stage releases to a
temporary repository which can then be used to test and certify a set of
artifacts before they are published to a final release repository. This
temporary repository can then be promoted as a whole or dropped
depending on the results of testing.

[[staging-sect-how]]
=== How the Staging Suite Works

Here's how staging works in Nexus Professional:

. A developer deploys an artfiact (or a set of artifacts) to Nexus
Professional.

. The Staging Suite intercepts this deployment and matches the
artifact's path against a set of Staging Profiles.

. If the path of the artifact activates a staging profile, a temporary
staging repository is created and the artifacts are deployed to this
repository.

. Once the developer has deployed a set of artifacts to Nexus, they
will then "Close" the staging repository.

. The Staging Suite will then add this temporary staging repository to
one or more Target Repository Groups.

Once the staging repository is closed, and the staging repository
has been added to a Target repository group, the artifacts in the
staging repository are then made available to developers or testers via
a repository group. Tests can be performed on the artifacts as if they
were already published in a hosted repository. From this point, one of
two things can happen to a staging repository:

Release:: A Nexus user can "release" a staging repository and select a
hosted repository to publish artifacts to. Releasing the contents of a
repository publishes all artifacts from the staging repository to a
hosted repository and deletes the temporary staging repository.

Drop:: A Nexus user can "drop" a staging repository. Dropping a
staging repository will remove it from any groups and delete the
temporary staging repository.

Promote:: If your Nexus installation contains Build Promotion
profiles, you will also see an option to "promote" a staging
repository to a Build Promotion Group. When you promote a staging
repository you can expose the contents of that staging repository via
additional groups. Build Promotion profiles are explained in detail in
the next section.

.With Nexus Staging Suite
image:figs/web/staging_with_staging.png[]


[[fig-staging-release-description]]
.Supplying a Description for a Staging Release
image:figs/web/staging-workflow.png[]

=== Multi-level Staging and Build Promotion

Nexus Professional also supports multi-level staging and build
promotion. With multi-level staging, a staging repository can be tested
and then promoted to a separate "build promotion" profile and exposed
through different repository groups to allow for additional testing and
qualification before a final release. <xref
linkend="fig-staging-multi-scenario" /> illustrates a potential use for
multi-level staging:

* Stage: A developer publishes artifacts to a QA staging profile which
exposes the staged artifacts in a QA repository group used by an
internal quality assurance team for testing.

* Promote to Beta: Once the QA team has successfully completed
testing, they promote the temporary staging repository to build
promotion profile which will expose the staged artifacts to a limited
set of customers who have agreed to act as a beta testers for a new
feature.

* Release: Once this closed beta testing period is finished, the
staged repository is then released and the artifacts it contains are
published to a hosted release repository and exposed via the public
repository group.

[[fig-staging-multi-scenario]]
.Multi-level Staging and Build Promotion
image:figs/web/multi-level-staging.png[]

To support this multi-level staging feature, you can configure
Build Promotion profiles as detailed in <xref
linkend="staging-sect-config-build-profile" />. Once you have promoted a
Staging Repository to a Build Promotion profile, you can drop, promote,
or release the artifacts it contains as detailed in <xref
linkend="sect-staging-using-build" />.

[[staging-sect-using]]
=== Using the Nexus Staging Suite

To use the Staging Suite in Nexus Professional, start Nexus
and look for the Staging Profiles, Staging Repositories, Staging Rulesets,
and Staging Upload options in the left-hand navigation menu of the Nexus
interface. If you see the links shown in <xref
linkend="fig-staging-links" />, the Staging Suite is available and ready
to be configured.


[[fig-staging-links]]
.Enterprise Menu after Staging Suite Installation
image:figs/web/staging_install-screenshot.png[]

[[staging-sect-config]]
=== Configuring Staging Profiles

Staging Profiles define the rules by which artifact
deployments are staged in Staging Repositories. Staging Repositories are
created as they are needed and are the primary mechanism by which Nexus
users can promote or discard the contents of a staging repository to a
hosted repository. A staging profile uses a Repository Target to match
artifacts as they are deployed. If a matching artifact is deployed to
Nexus, the Staging Suite will intercept this deployment and store the
artifact in a staging repository.

The process for configuring a new Staging Profile is as
follows:

. Configure a Repository Target to match artifacts under the groupId
you will be deploying artifacts to. If you are releasing all of your
software under the groupId com.example, you would configure a target
that matches the pattern ".*/com/example/.*".

. Create a new Staging Profile using the target defined in the
previous step. When you configure this staging profile, you will be
defining a target repository group. When the Staging Suite intercepts
an artifact and places it in a staging repository, this staging
repository will be added to the specified target repository group.

. Assign the appropriate Staging-specific roles to the appropriate
users. When you create a Staging Profile, Nexus also creates two new
roles that grant access and privileges to the repositories created by
this Staging Profile.

The following sections provide a more detailed look at the process
of configuring a single staging profile in Nexus Professional.

[[staging-sect-define-target]]
=== Configuring a Repository Target

The Staging Suite intercepts deployments to repository
targets. For example, if you wanted to intercept all deployments to the
com.sonatype.sample groupId, you would create a Repository Target called
the "Sample Target" with a pattern expression of
"<varname>.*/com/sonatype/sample/.*". Do this by clicking on
"Repository Targets" in the left-hand navigation menu in Nexus and then
clicking on the <guibutton>Add

.Adding a Repository Target for com.sonatype.sample
image:figs/web/staging_make-target.png[]

[[staging-sect-config-profile]]
=== Configuring Staging Profiles

Staging profiles control the process by which artifacts
are selected for staging. When you define a Staging profile, you are
defining a set of rules which will control the way in which Nexus
intercepts an artifact deployment. When you click on Staging Profiles in
the Nexus menu, you will see a list of configured staging profiles.
Clicking on Add... will display the dropdown menu shown in <xref
linkend="fig-staging-add-staging-profile" />.

[[fig-staging-add-staging-profile]]
.Multi-level Staging and Build Promotion
image:figs/web/staging_add-staging-profile.png[]

Selecting Staging Profile will create a new Staging Profile and
display the form shown in <xref
linkend="fig-staging-edit-profile" />.

<xref linkend="fig-staging-edit-profile" /> defines a Staging
Profile using the Repository Target configured in <xref
linkend="staging-sect-define-target" />. This target will match all
artifacts under the <varname>com.sonatype.sample groupId (or
the <filename>com/sonatype/sample repository path). This
staging profile uses the "Maven2 (hosted, release)" as a
template for newly created temporary staging repositories, and it will
automatically add closed staging repositories to the Public
Repositories group.

[[fig-staging-edit-profile]]
.Editing a Staging Profile
image:figs/web/staging_profile-edit.png[]

This form allows you to configure a profile. Every profile has a
name, is associated with a Repository Target, and points to a template
to use when creating a new staging repository. The Staging Profile
configuration panel contains the following fields:

Profile Name:: The Name of the Staging Profile. This can be an arbitrary
value. It is simply a convenience for the Nexus Administrator, and
it is also used to create Nexus roles that are used to grant
permissions to view and manipulate staging repositories created by
this profile.

Staging Mode:: This field contains the options "Deploy", "UI Upload",
and "Deploy and UI Upload". This controls how artifacts can be staged
to this staging profile. If Deploy is selected, artifacts can only be
deployed using Maven to upload build artifacts. If UI Upload is
selected, users can upload artifacts to Nexus using the Nexus user
interface.

Template:: Defines a template for the temporary staging
repository. The current version of Nexus Professional provides with
the options "Maven2 (hosted, release)" and "Maven1 (hosted, release)".

Repository Target:: This is a reference to the target which we defined
in <xref linkend="staging-sect-define-target" />. When a developer
deploys an artifact to the Staging URL, the Staging Suite will check
to see if the artifact matches the patterns defined in the Repository
Target. The Target defines the "trigger" for the creation of a Staging
Repository.

Release Repository:: Staged artifacts are stored in a temporary
staging repository which is made available via Target Groups. Once a
staged deployment has been successfully tested, artifacts contained in
the temporary staging repository are promoted to a hosted
repository. The Release Repository setting configures the target
release repository for this staging profile.

Content Type:: Nexus can create staging repositories for repositories
of type maven1, maven2, and Eclipse P2 repositories. This value is
automatically selected based on the chosen template. This chapter only
deals with maven2 repository types.

Target Groups:: When a Staging Repository is "closed" and is made
available to users and developers involved in the testing process, the
temporary Staging Repository is added to one or more Repository
Groups. This field defines those groups.

Close Repository Notification Settings:: After a developer has
deployed a set of related release artifacts, a staging repository is
"closed". This means that no further artifacts can be deployed to the
same staging repository.  A repository would be closed when a
developer is satisfied that a collection of staged artifacts is ready
to be certified by a manager or a quality assurance resource. In this
setting, it is possible to define email addresses and Roles which
should be notified of a staging repository being closed. A
notification email will be sent to all specified email addresses, as
well as all Nexus users in the specified roles, informing that a
staging repository has been closed. It is also possible to select that
the creator of the staging repository receives this notification.

Promotion Repository Notification Settings:: Once a closed staging
repository has been certified by whoever is responsible for testing
and checking a staged release, it can then be promoted (published) or
dropped (discarded). In this setting, it is possible define email
addresses and Roles which should be notified of a staging repository
being promoted. A notification email will be sent to all specified
email addresses, as well as all Nexus users in the specified roles,
informing that a staging repository has been promoted. It is also
possible to select that the creator of the staging repository receives
this notification.

Drop Repository Notification Settings:: In this setting, it is
possible define email addresses and Roles which should be notified of
a staging repository being dropped.  A notification email will be sent
to all specified email addresses, as well as all Nexus users in the
specified roles, informing that a staging repository has been
dropped. It is also possible to select that the creator of the staging
repository receives this notification.

Close Repository Staging Rulesets:: This defines the rulesets which
will be applied to a staging repository before it can be closed. If
the staging repository does not pass the rules defined in the
specified rulesets, you will be unable to close it. For more
information about rulesets, see <xref linkend="staging-sect-rulesets"
/>.

Promote Repository Staging Rulesets:: This defines the rulesets which
will be applied to a staging repository on promotion. If the staging
repository does not pass the rules defined in the specified rulesets,
the promotion will fail with an error message supplied by the failing
rule. For more information about rulesets, see <xref
linkend="staging-sect-rulesets" />.

Once you've created a Staging Repository with the values shown in
<xref linkend="fig-staging-edit-profile" />, you are ready to perform a
test deployment to the Staging URL.

[[staging-sect-config-build-profile]]
=== Configuring Build Promotion Profiles

A Build Promotion profile is used when you need to add an
additional step between initial staging and final release. To add a new
Build Promotion profile, open the Staging Profiles link from the Nexus
menu and click on Add... to display the dropdown menu shown in <xref
linkend="fig-staging-build-promo-link" />. Select Build Promotion
Profile from this dropdown to create a new Build Promotion
Profile.

[[fig-staging-build-promo-link]]
.Multi-level Staging and Build Promotion
image:figs/web/staging_add-build-promotion-orilfe.png[]

After creating a new Build Promotion profile, you will see the
form shown in <xref linkend="fig-staging-build-promo-profile" />. This
form contains the following configuration fields:

Profile Name:: This is the name for the Build Promotion profile which
will be displayed in the promotion dialog shown in <xref
linkend="fig-staging-promote-stating" />. This name will also be
associated with repositories created from this promotion profile.

Template:: This is the template for repositories generated by this
Build Promotion profile. The default value for this field is "Maven2
(group)".

Target Groups:: This is the most important configuration field for a
Build Promotion profile. It controls the group that promoted artifacts
will be made available through. Artifacts can be made available
through one or more groups.

[[fig-staging-build-promo-profile]]
.Configuring a Build Promotion Profile
image:figs/web/staging_closed-beta-promotion-group.png[]

[[staging-sect-deploy-role]]
=== Adding the Staging Deployer Role

To perform a staged deployment, the user deploying the
artifact must have the "Staging: Deployer (admin)" role or the "Staging:
Deployer" role for a specific Staging Profile.

When you create a Staging Profile, Nexus will create two new Nexus
roles that grant permissions specific to that staging profile. If you
created the Staging profile from the previous section, Nexus would have
created two roles:

"Staging: Repositories (Release Staging Profile)":: This role grants a
user read and view access to the staging repositories created by a
specific staging profile.

"Staging: Deployer (Release Staging Profile)":: This role grants all
of the privileges from the Staging: Repositories role and it grants
the user permission to deploy artifacts, close a staging repository,
and promote or drop a staging repository created by a specific staging
profile.

In addition to the profile-specific staging roles, the Staging
Suite also defines two universal roles which grant read-only or deployer
rights across all staging repositories. These roles are:

"Staging: Repositories (admin)":: This role grants a user read and
view access to all staging repositories.

"Staging: Deployer (admin):: This role grants a user all of the
privileges from the Staging: Repositories role and it grants the user
permission to deploy artifacts to any staging repository, close all
staging repositories, and promote or drop all staging repositories.

To configure the deployment user with the appropriate staging
role, click on Users under the Security menu in the Nexus menu. Once you
see the Users panel, click on the deployment user to edit this user's
roles. If the Staging Suite is installed, you should see the "Staging:
Deployer (admin)" role listed in Available Roles. Select the "Staging:
Deployer (admin)" role and then click the left arrow to add this role to
the deployment user's list of assigned roles.

[[fig-staging-assigning-role]]
.Assigning the Staging Deployer Role to the deployment user
image:figs/web/staging_deployer-role.png[]

Once the deployment user has the "Staging: Deployer (admin)" role, you
can then use this user to deploy to the staging URL and trigger any
Staging Profile. Without this permission, the deployment user would
not be able to publish a staged artifact. If you need to add a
specific permission to activate a single Staging Profile, you would
select that specific role in the Available Roles list shown in <xref
linkend="fig-staging-assigning-role" />. In this figure, note that
there are two "Staging: Deployer" roles: one for general
administrative permission to deploy to any staging profile, and
another which targets a specific staging profile.

[[staging-sect-deployment]]
=== Performing a Staged Deployment with Maven

In the previous section, you created a Staging Profile which
references the Repository Target created in <xref
linkend="staging-sect-define-target" />. If the Staging Suite is
configured correctly, any deployment to the staging URL under the
groupId com.sonatype.sample should be intercepted by the Staging Suite
and placed in a temporary staging repository. Once this repository has
been closed, it will be made available in the Target Group you
selected when you configured the Staging Profile in <xref
linkend="staging-sect-config-profile" />.

In this section, you will create a new project using the Maven
Archetype plugin to test the Staging Profile you created in the
previous section.

[[staging-sect-creating]]
=== Creating a New Project

To create a new project run <command>mvn archetype:generate. Running
this at the command line will bring up a list of archetypes, choose
the default maven-archetype-quickstart or number 16, and use the
identifier values listed in <xref linkend="tbl-staging-new-project" />
for the new project.

.Identifiers for New Project
|====
|Identifier|Value|
|groupId|com.sonatype.sample|
|artifactId|staging-test|
|version|1.0|
|package|com.sonatype.sample|
|====

If the archetype generate goal is executed successfully, you
should have output which resembles the following screen listing:

----
$ <command>mvn archetype:generate
...
[INFO] [archetype:generate]
[INFO] Generating project in Interactive mode
[INFO] No archetype defined. Using maven-archetype-quickstart \
(org.apache.maven.archetypes:maven-archetype-quickstart:1.0)
Choose archetype:
1: internal -> appfuse-basic-jsf (AppFuse archetype for creating a \
web application with Hibernate, Spring and JSF)
...
41: internal -> gmaven-archetype-mojo (Groovy mojo archetype)
Choose a number:  (1/.../41) 16: : <command>16
Define value for groupId: : <command>com.sonatype.sample
Define value for artifactId: : <command>staging-test
Define value for version:  1.0-SNAPSHOT: : <command>1.0
Define value for package:  com.sonatype.sample: : <command>com.sonatype.sample
Confirm properties configuration:
groupId: com.sonatype.sample
artifactId: staging-test
version: 1.0
package: com.sonatype.sample
Y: : 
[INFO] Parameter: groupId, Value: com.sonatype.sample
[INFO] Parameter: packageName, Value: com.sonatype.sample
[INFO] Parameter: basedir, Value: /private/tmp
[INFO] Parameter: package, Value: com.sonatype.sample
[INFO] Parameter: version, Value: 1.0
[INFO] Parameter: artifactId, Value: staging-test
...
[INFO] BUILD SUCCESSFUL
----

[[staging-sect-update-pom]]
=== Update the POM: Deployment Configuration

To deploy a staged released, a developer needs to deploy
to the staging URL. To configure this new project to deploy to the
Staging URL, add the a <sgmltag>distributionManagement element
to the stage-test project's POM.

[[ex-staging-dist-management]]
.Listing the Staging URL in distributionManagement
----
<project xmlns="http://maven.apache.org/POM/4.0.0" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.sonatype.sample</groupId>
  <artifactId>staging-test</artifactId>
  <packaging>jar</packaging>
  <version>1.0</version>
  <name>staging-test</name>
  <url>http://maven.apache.org</url>
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <distributionManagement>
    <repository>
      <id>nexus</id>
      <name>Nexus Staging Repo</name>
      <url>http://localhost:8081/nexus/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>
</project>
----


This configuration element, distributionManagement, defines the
repository to which our deployment will be made. It references the
Staging Suite's Staging URL:
http://localhost:8081/nexus/service/local/staging/deploy/maven2

This URL acts as a something of a virtual repository to be published
to.  If an artifact being published matches one of the Repository
Targets in a Staging Profile, that Staging Profile is "activated" and
a temporary Staging Repository is created for a specific client as
defined by the combination of a client's IP address, Deployment User
name, and User-Agent.

[[staging-sect-deploy-credentials]]
=== Update settings.xml with Deployment Credentials

To successfully deploy to your Nexus instance, you will
need to update your Maven Settings with the credentials for the
deployment user. These credentials are stored in the Maven Settings file
in ~/.m2/settings.xml. To add these credentials, add the following
element to the servers element in your ~/.m2/settings.xml file as shown
in <xref linkend="ex-staging-deployment-credentials" />.

[[ex-staging-deployment-credentials]]
.Listing deployment credentials in Maven Settings
----
<settings>
  ...
  <servers>
    ...
    <server>
      <id>nexus</id>
      <username>deployment</username>
      <password>deployment123</password>
    </server>
  </servers>
  ...
</settings>
----

Note that the server identifier listed in <xref
linkend="ex-staging-deployment-credentials" /> matches the server
identifier listed in <xref linkend="ex-staging-dist-management"
/>. The deployment credential listed in <xref
linkend="ex-staging-deployment-credentials" /> contains the default
password for the Nexus deployment user - deployment123. You should
change this password to match the deployment password for your Nexus
installation.

[[staging-sect-deploy-staged]]
=== Deploying to a Staged Repository

Once the sample project's <sgmltag>distributionManagement has been set
to point at the Nexus Staging URL and your deployment credentials are
updated in your ~/.m2/settings.xml file, you can deploy to the Staging
URL. To do this, run <command>mvn deploy

----
$ mvn deploy
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building staging-test
[INFO]    task-segment: [deploy]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [surefire:test]
[INFO] Surefire report directory: /private/tmp/staging-test/target/surefire-reports

...
[INFO] [jar:jar]
[INFO] [install:install]
[INFO] Installing /private/tmp/staging-test/target/staging-test-1.0.jar to \
~/.m2/repository/com/sonatype/sample/staging-test/1.0/staging-test-1.0.jar
[INFO] [deploy:deploy]
altDeploymentRepository = null
Uploading: http://localhost:8081/nexus/service/local/staging/deploy/maven2/\
com/sonatype/sample/staging-test/1.0/staging-test-1.0.jar
2K uploaded
[INFO] Uploading project information for staging-test 1.0
[INFO] Retrieving previous metadata from nexus
[INFO] repository metadata for: 'artifact com.sonatype.sample:staging-test' 
could not be found on repository: nexus, so will be created
[INFO] Uploading repository metadata for: 'artifact com.sonatype.sample:staging-test'
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
----

[[staging-sect-uploading-staged]]
=== Uploading a Staged Deployment in Nexus

You can also upload a staged deployment via the Nexus
interface. To upload a staged deployment, select Staging Upload from the
Nexus menu. Clicking Staging Upload will show the panel shown in <xref
linkend="fig-staging-artifact-upload" />.

[[fig-staging-artifact-upload]]
.Uploading a Staged Deployment in Nexus
image:figs/web/staging_artifact-upload.png[]

To upload an artifact, click on Select Artifact(s) for Upload... and
select one or more artifacts from the filesystem to upload. Once you have
selected an artifact, you can modify the classifier and the extension
before clicking on the Add Artifact button. Once you have clicked on the
Add Artifact button, you can then configure the source of the Group,
Artifact, Version (GAV) parameters.

If the artifact you are uploading is a JAR file that was created by
Maven it will already have POM information embedded in it, but if you are
uploading a JAR from a vendor you will likely need to set the Group
Identifier, Artifact Identifier, and Version manually. To do this, select
GAV Parameters from the GAV Definition dropdown at the top of this form.
Selecting GAV Parameters will expose a set of form fields which will let
you set the Group, Artifact, Version, and Packaging of the artifacts being
uploaded. If you would prefer to set the Group, Artifact, and Version from
a POM file which was associated with the uploaded artifact, select From
POM in the GAV Definition dropdown. Selecting From POM in this dropdown
will expose a button labeled "Select POM to Upload". Once a POM file has
been selected for upload, the name of the POM file will be displayed in
the form field below this button.

The Staging Upload panel supports multiple artifacts with the same
Group, Artifact, and Version identifiers. For example, if you need to
upload multiple artifacts with different classifiers, you may do so by
clicking on Select Artifact(s) for Upload and Add Artifact multiple times.
This interface also accepts an Artifact Bundle which is a JAR that
contains more than one artifact.

Once a staging artifact upload has been completely configured, click
on Upload Artifact(s) button to begin the upload process. Nexus will
upload the artifacts to the Staging URL which will trigger any staging
profiles that are activated by the upload. If a staging profile is
activated, a new staging repository will be created and can be managed
using the procedures outlined in <xref
linkend="staging-sect-managing-staging" />.

=== Managing Rulesets

Nexus Professional has the ability to define staging rules
that must be satisfied before a staging repository can be promoted.


[[staging-sect-rulesets]]
=== Managing Staging Rulesets

Staging Rulesets are groups of rules that are applied to a
Staging repository at promotion time. A staging repository associated
with a staging ruleset cannot be promoted until all of the rules
associated with the rulesets have been satisfied. This feature allows
you to set standards for your own hosted repositories, and it is the
mechanism that is used to guarantee the consistency of artifacts stored
in the Maven Central repository.

Nexus Professional contains the following rules:

Staging Javadoc Validation:: The Staging Javadoc Validation rule will
verify that every project has an artifact with the javadoc
classifier. If you attempt to promote a staging repository which
contains artifacts not accompanied by "-javadoc.jar" artifacts, this
validation rule will fail.

Staging Artifact Uniqueness Validation:: This rule checks to see that
the artifact being released, promoted, or staged is unique in a
particular Nexus instance.

Staging Checksum Validation:: This rule validates file checksums
against published artifacts.

Staging No Release Repository:: This rule will fail if a particular
staging profile is not defined with a release repository.

Staging POM Validation:: The Staging POM Validation rule will verify
the following properties of all POMs to be promoted:

* Project URL - project/url
* Project Licenses - project/licenses
* Project SCM Information - project/scm

If any of these POM elements are missing or empty, this
Staging Ruleset will cause a promotion to fail.

Staging Signature Validation:: The Staging Signature Validation rule
verifies that every item in the repository has a valid PGP
signature. If you attempt to promote a staging repository which
contains artifacts not accompanied by valid PGP signature, this
validation will fail.

Staging Sources Validation:: The Staging Sources Validation rule will
verify that every project has an artifact with the sources
classifier. If you attempt to promote a staging repository which
contains artifacts not accompanied by "-sources.jar" artifacts, this
validation rule will fail.

To create a Staging Ruleset, click on the Staging Ruleset link in
the Nexus Menu. This will load the interface shown in <xref
linkend="fig-staging-rulesets" />. The Staging Ruleset panel is used to
define sets of rules that can be applied to Staging Profiles. <xref
linkend="fig-staging-rulesets" /> shows a ruleset which contains all
four predefined staging rules.

[[fig-staging-rulesets]]
.Creating a Staging Ruleset
image:figs/web/staging-rulesets.png[]

[[staging-sect-defining-rulesets]]
=== Defining Rulesets for Promotion

To define a ruleset to be used for promotion, click on
Staging in the Nexus menu and select a Staging Profile. Click on the
Configuration tab, and scroll down to the Promote Repository Staging
Rulesets section of the Staging Profile configuration as shown in <xref
linkend="fig-staging-associate-ruleset" />. The next time you attempt to
promote a staging repository that was created with this profile, Nexus
Professional will check that all of the rules in the associated rulesets
are being adhered to.

[[fig-staging-associate-ruleset]]
.Associating a Staging Ruleset with a Staging Profile
image:figs/web/staging-rulesets-associate.png[]

[[staging-sect-managing-staging]]
=== Managing Staging Repositories in Nexus

Once you complete the process outlined in <xref
linkend="staging-sect-deployment" />, you will then have an automatically
generated Staging Repository. In this section, you will walk through the
process of managing staging repositories. Once a staging repository has
been created, there are two steps in the lifecycle of a staging
repository. Once you have deployed a set of related artifacts, you must
"Close" the repository moving it from an "Open" to a "Closed" state. Once
a repository is in the "Closed" state it is added to a Repository Group
and is made available for testing purposes. Once testing is completed, a
Nexus administrator can either Promote or Drop a Closed repository. If the
repository is Dropped, the repository is discarded and removed from the
Repository Group. If the repository is Promoted, the Nexus administrator
can select a Hosted repository and publish the contents of the temporary
staging repository to a Hosted repository.

[[staging-sect-closing]]
=== Closing an Open Repository

Once you deploy an artifact that triggers a staging
profile, Nexus Staging Suite will create a repository that contains the
artifacts you deployed. A separate staging repository is created for
every combination of User ID, IP Address, and User Agent. This means
that you can perform more than one deployment to a single Staging
Repository as long as you perform the deployment from the same IP, with
the same deployment user, and the same installation of Maven. You can
perform multiple deployments to an "Open" staging repository, to see a
list of these temporary "Open" Staging repositories, select "Staging"
from the Nexus menu and click on the appropriate Staging Profile to
browse a list of staging repositories which correspond to a staging
profile.

.Listing Repositories Associated with a Staging Profile
image:figs/web/staging_close-repository.png[]

Once you are ready to start testing the staging repository, you
will need to transition the staging repository from the "Open" state to
the "Closed" state. This will close the temporary staging repository to
more deployments. To close a repository, right-click on the repository
in the Staging Repositories panel and select "Close". This will bring up
the following dialog for a staging deployer to describe the contents of
a staging repository. This description field can be used to pass
essential information to the person that needs to test a deployment. In
<xref linkend="fig-staging-close-description" />, the description field
is used to describe the release for the user that needs to certify and
promote a release.

[[fig-staging-close-description]]
.Confirmation and Description Dialog for Closing a Staging Repository
image:figs/web/staging_close-confirm.png[]

Confirming this state transition will close the repository and add
the repository to a repository group. Once a repository has been closed,
it will be listed as "Closed" in the Profile's Repositories tab.

.Closed Repository After Selecting Finish
image:figs/web/staging_closed-repository.png[]

[[staging-sect-using-repository]]
=== Using the Staging Repository

Once the Staging Repository has been closed, it will
automatically be added to the Repository Group that was specified in the
Staging Profile. <xref linkend="fig-staging-add-to-group" /> shows an
instance of a staging repository appended to the end of a group named
"Public Repositories". This has the effect of making the staged
artifacts available to everyone who is referencing this public group.
Developers who are referencing this public repository group can now test
and interact with the staged artifacts as if they were published to a
Hosted repository. While the artifacts are made available in a
repository group, the fact that they are held in a temporary staging
directory gives the administrator the option of promoting this set of
artifacts to a Hosted repository or dropping this temporary staging
repository if there are problems discovered during the testing and
certification process for a release.

[[fig-staging-add-to-group]]
.Staging Repository Added to the End of a Repository Group
image:figs/web/staging_staged-to-group.png[]

Once a staging repository is closed, you can also browse and
search the repository. To view Staging Repositories, click on Browse
Repositories and then select Nexus Managed Repositories as shown in
<xref linkend="fig-staging-selecting-nexus" />.

[[fig-staging-selecting-nexus]]
.Viewing Nexus Managed Repositories
image:figs/web/staging_select-nexus-managed.png[]

Once you've selected Nexus Managed Repositories, Nexus will then
show you all of the repositories that have been created by the Nexus
Staging Suite. You can select and browse this temporary Staging
Repository as you would any other repository.


.Browsing a Staging Repository
image:figs/web/staging_browsing-staged.png[]

You can browse the contents of a staging repository from the
Staging Repositories panel. Click on Staging Repositories in the Nexus
menu, click on a Staging Repository to browse the contents and perform
operations a staging repository.

.Browsing Repository via Staging Profiles
image:figs/web/staging_browsing-via-profiles.png[]

[[staging-sect-promoting]]
=== Releasing a Staging Repository

Once you are finished testing or certifying that the
contents of a Staging Repository are correct, you are ready to either
Release or Drop the Staging Repository. Dropping the Staging Repository
will delete the temporary staging repository from Nexus and remove any
reference to this repository from the groups it was associated with.
Releasing the Staging Repository allows you to publish the contents of
this temporary repository to a Hosted repository.

To release a Staging Repository select Staging from the Nexus menu
and then click on the appropriate Staging Profile. This will display a
list of Staging Repositories associated with that Staging Profile. To
release the contents of a repository, load the list of Staging
Repositories, check the box next to the staging repository you which to
promote and then click the Release button shown in <xref
linkend="fig-staging-promote" />.

[[fig-staging-promote]]
.Promoting a Staging Repository
image:figs/web/staging_promote-repository.png[]

Once you click Release, the Nexus Staging Suite will ask you to
supply a description for this release action.

.Selecting the Destination Repository for Staged Repository Promotion
image:figs/web/staging_promote-confirm.png[]

Supplying a description and clicking on Release will publish the
contents of a Staging Repository to a Hosted repository and delete the
Staging Repository from Nexus.

.Confirmation Dialog for Repository Promotion
image:figs/web/staging_success-promote.png[]

=== Promoting a Staging Repository

If you have a staging repository that you want to promote to a
Build Promotion profile, open the list of Staging Repositories by
selecting Staging Repositories from the Nexus menu, select the
repository you intend to promote, and click the Promote button as shown
in <xref linkend="fig-staging-promote-button" />.

[[fig-staging-promote-button]]
.Promoting a Staging Repository
image:figs/web/staging_promote-to-group-button.png[]

After clicking the Promote button the Promote Staging Repository
shown in <xref linkend="fig-staging-promote-stating" /> will be
displayed. In this dialog, you can choose the Build Promotion profile to
promote the staging repository to, and you can supply a short
description of the promotion. Clicking on the Promote button in this
dialog will promote the staging profile to a build promotion profile and
expose the contents of the selected staging repository through a group
associated with the build promotion profile.

[[fig-staging-promote-stating]]
.Multi-level Staging and Build Promotion
image:figs/web/staging_promote-to-group.png[]

After you promote a staging repository to a Build Promotion
profile the build promotion profile will create a temporary repository
which contains the contents of the promoted staging repository. The
staging repository will be a Group Member of the Build Promotion
repository. One or more staging repositories can be promoted to a
single Build Promotion profile, and you can browse the Group Member by
selecting the Build Promotion repository and viewing the Group Member
tab as shown in <xref linkend="fig-staging-group-members" />.

[[fig-staging-group-members]]
.Multi-level Staging and Build Promotion
image:figs/web/staging_browse-group-members.png[]

[[sect-staging-using-build]]
=== Releasing, Promoting, and Dropping Build Promotion Profiles

When you configure a Build Promotion profile and promote Staging
Repositories to promotion profiles, each Build Promotion profile creates
a repository which contains one or more Staging Repositories. Just like
you can promote the contents of a Staging Repository to a Build
Promotion profile, you can also promote the contents of a Build
Promotion profile to another Build Promotion profile. When you do this
you can create hierarchies of staging repositories and build promotion
profiles which can then be dropped or released together.

[[fig-staging-build-promo-agg]]
.Releasing, Promoting, and Dropping Build Promotion Profiles
image:figs/web/staging-promotion.png[]

When you promote a staging repository to a build promotion
profile, you make the contents of a staging repository available via a
repository group associated with a build promotion profile. For example,
if you staged a few artifacts to a QA Staging Repository and then
subsequently promoted that repository to a Closed Beta Build Promotion
group, the contents of the QA Staging Repository would initially be made
available via a QA Repository Group. After a build promotion, these
artifacts would also be available via a Closed Beta repository group.
You can take it one step further and promote the contents of the Closed
Beta Build Promotion profile to yet another Build Promotion profile. In
this way you can have an arbitrary number of intermediate steps between
the initial staging deployment and the final release.

If you drop the contents of a build promotion profile, you roll
back to the previous state. For example, if you decided to drop the
contents of the Closed Beta build promotion group, Nexus will revert the
status of the Staging Repository from promoted to closed, and make the
artifacts available via the QA Staging Repository. The effects of
promoting, dropping, and releasing artifacts through a series of Staging
Profiles and Build Promotion Profiles is shown in <xref
linkend="fig-staging-build-promo-agg" />.

When you perform a release on a Build Promotion profile, each
Staging Repository is going to release artifacts to the Release
Repository configured in <xref linkend="fig-staging-edit-profile" />.
Because a Build Repository can contain one or more promoted staging
repositories, this means that releasing a Build Promotion profile can
cause artifacts to be published to more than one Release Repository.
Build Promotion profiles are not directly related to release
repositories, only staging profiles are directly associated with target
release repositories. <xref linkend="fig-staging-multi-to-one" />
illustrates this behavior with two independent Staging Repositories each
configured with a separate Release Repository. Releasing the Build
Promotion profile causes Nexus to publish each Staging Repository to a
separate hosted repository.

[[fig-staging-multi-to-one]]
.Promoting Multiple Repositories to the Same Build Promotion Profile
image:figs/web/multiple-promotion-release.png[]

[[staging-sect-managing-plugin]]
=== Managing Staging Repositories with the Nexus Maven Plugin

You can do everything that was described in <xref
linkend="staging-sect-managing-staging" /> with the Nexus Maven Plugin.
Using the Nexus Maven Plugin you can:

* Close a Staging Repository
* Promote a Staging Repository
* Drop a Staging Repository
* List All Available Staging Repositories

[[staging-sect-running-nexus-plugin]]
=== Running the Nexus Maven Plugin

To invoke goals in the Nexus Maven plugin, you will want
to add the appropriate plugin group to your Maven settings file. Add the
org.sonatype.plugins groupId to <filename>~/.m2/settings.xml as shown in <xref
linkend="ex-staging-nexus-plugin-group" />.

[[ex-staging-nexus-plugin-group]]
.Adding org.sonatype.plugins to pluginGroups in Maven Settings
----
<settings>
  ...
  <pluginGroups>
    <pluginGroup>org.sonatype.plugins</pluginGroup>
  </pluginGroups>
  ...
</settings>
----

Adding the <varname>org.sonatype.plugins group
to your Maven Settings will allow you to run the following goals from
the Nexus Maven Plugin:

nexus:staging-close:: This goal will close a staging repository from
Maven. This goal in the Nexus Maven plugin corresponds to the
procedure described in <xref linkend="staging-sect-closing" />.

nexus:staging-list:: This goal will list all of the staging
repositories which are currently visible to a user.

nexus:staging-drop:: This goal allows you to drop a specific staging
repository. If no repositories are specified for this goal, this
plugin will present an interactive menu listing all of the closed
staging repositories currently eligible for a drop operation.

nexus:staging-promote:: This goal allows you to promote a specific
repository. If no repositories are specified for this goal, this
plugin will present an interactive menu listing all of the closed
staging repositories currently eligible for a promote operation.

Once you have configured the <sgmltag>pluginGroup in
your Maven Settings file, you can run the Nexus Maven plugin from the
command line. In order to access the staging suite in your Nexus
instance, the plugin must be told where Nexus is.

----
$ mvn nexus:staging-list
----

[[sect-staging-mvn-plugin]]
=== Configuring Nexus Maven Plugin for Staging

All of the Staging goals in the Nexus Maven plugin require
security credentials and a base URL for the Nexus server you are
attempting to manage. You can specify security credentials by supplying
a username and password or by supplying a server id that corresponds to
a server in your Maven Settings (~/.m2/settings.xml). The common
configuration parameters and security configuration properties
are:

nexusUrl:: Points to the Nexus server installation's base URL. If you
have installed Nexus on your local machine, this would be
http://localhost:8081/nexus/

username:: Username to use for authenticating to Nexus. Default value
is \${user.name}.

password:: Password to use for authenticating to Nexus

serverAuthId:: You should specify either username and password or the
serverAuthId. If you specify a value for serverAuthId, the Nexus Maven
plugin is going to look at the contents of your
<filename>~/.m2/settings.xml file and use the username and password
from a server definition.

In most cases a valid user login will be required to access your
staging information. By default, if you don't specify the nexusUrl and
password parameters, the plugin will prompt you for them. If you don't
specify the username parameter, the Java System property
<varname>\${user.name}

In addition to these security options, all of the staging goals
have a common configuration property which controls the logging
level.

verboseDebug:: If verboseDebug is set to true Maven will print out
debug messages that detail the plugin's interaction with Nexus.

==== Listing Your Open Staging Repositories

Once you've deployed one or more sets of artifacts as
release candidate to Nexus, you'll have one or more open staging
repositories. There are a variety of actions you can take with these
repositories, but maybe one of the most basic is to list them. This
gives you a pretty good view into the status of your release(s). The
basic command is:

----
$ <command>mvn nexus:staging-list
[...]
[INFO] Logging into Nexus: http://localhost:8082/nexus
[INFO] User: testuser
[INFO] 


[INFO] The following OPEN staging repositories were found: 

-  staging-003 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-003


[INFO] The following CLOSED staging repositories were found: 

-  staging-001 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-001
Description: This is a test repository

-  staging-002 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-002
Description: This is another test repository

You can find more information about this Mojo <ulink
url="http://plugins.sonatype.org/nexus-maven-plugin/usage-staging.html">here
----

==== Closing a Staging Repository

Before your team can run any tests against the set of
artifacts that constitute your release, you need to mark the open
staging repository as closed. This means that no additional artifacts
can be added to that specific staging repository, making the set of
artifacts it contains an immutable snapshot. When it is closed, the
repository will become available for artifact resolution. The basic
command is:

----
$ mvn nexus:staging-close
[INFO] 


Available Staging Repositories:


1: staging-002 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-002



Select a repository to close (1) 1: : 1

Repository Description: This is a test repository
[INFO] Finishing staging repository for: 'com.myco:my-project:1':

-  staging-002 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-002


[INFO] The following CLOSED staging repositories were found for: \
'com.myco:my-project:1':

-  staging-001 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-001
Description: This is a test repository

-  staging-002 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-002
Description: This is another test repository
----

The output above shows that the staging-close Mojo found an open
staging repository - staging-001 - for the current project, then told
Nexus to close it. Afterward, it displayed the list of closed staging
repositories, which included the one we just closed. If you don't have
an open staging repository, you'll see something like this
instead:

----
No open staging repositories found. Nothing to do!


[INFO] The following CLOSED staging repositories were found for: \
'com.myco:my-project:1':

-  staging-001 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-001
Description: This is a test repository

-  staging-002 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-002
Description: This is another test repository

You can find more information about this Mojo <ulink
url="http://plugins.sonatype.org/nexus-maven-plugin/staging-close-mojo.html">here
----

==== Dropping a Closed Staging Repository

In the unfortunate event that your project artifacts fail
during testing, you may need to drop the staging repository that houses
them, in order to avoid confusing them with newer candidate releases.
The basic command is:

----
$ mvn nexus:staging-drop
[INFO] 

Available Staging Repositories:

1: staging-006 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-006
Description: This is a test repository

Select a repository to drop (1) 1: : 1
[INFO] Dropping staged repository: 

-  staging-006 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-006
Description: This is a test repository
----

The Mojo will present you with a list of closed staging
repositories, with the first in the list selected as the default
response. If you simply hit the Enter key, the default will be used;
otherwise, the repository corresponding to the number you select will be
used. If you have no closed staging repositories, you'll see something
like this instead:

----
[INFO] 

No closed staging repositories found. Nothing to do!

You can find more information about this Mojo <ulink
url="http://plugins.sonatype.org/nexus-maven-plugin/staging-drop-mojo.html">here
----

==== Promoting a Closed Staging Repository

On the other hand, if your project artifacts pass all
tests, you will find that you need to promote the staging repository
that houses them, in order to finalize the release and make the
artifacts available for public consumption. The basic command is:

----
$ mvn nexus:staging-promote
[INFO] 

Available Staging Repositories:

1: staging-006 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-006
Description: This is a test repository

Select a repository to promote (1) 1: : 1
Target Repository ID: releases
[INFO] Promoting staging repository to: releases:

-  staging-006 (profile: Example Profile)
URL: http://localhost:8082/nexus/content/repositories/staging-006
Description: This is a test repository
----

The Mojo will present you with a list of closed staging
repositories, with the first in the list selected as the default
response. If you simply hit the Enter key, the default will be used;
otherwise, the repository corresponding to the number you select will be
used. If you have no closed staging repositories, you'll see something
like this instead:

----
[INFO] 

No closed staging repositories found. Nothing to do!

You can find more information about this Mojo <ulink
url="http://plugins.sonatype.org/nexus-maven-plugin/staging-promote-mojo.html">here
----


