<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="staging">
  <title>Nexus Staging Suite</title>

  <section id="staging-sect-intro">
    <title>Introduction</title>

    <para><indexterm>
        <primary>staging</primary>
      </indexterm><indexterm>
        <primary>Nexus plugin</primary>

        <secondary>staging plugin</secondary>
      </indexterm>If you release software, you will often need to test a
    release before deploying it to a production system or an externally
    accessible repository. For example, if you are developing a large,
    enterprise web application you may want to stage a release candidate to a
    production system and perform a series of rigorous tests before a release
    manager makes a decision to either return a system to development or
    deploy a system to production.</para>

    <para>The Nexus Staging Suite in Nexus Professional allows an organization
    to create a temporary staging repository and to manage the promotion of
    artifacts from a staging repository to a release repository. This ability
    to create an isolated, release candidate repository that can discarded or
    promoted makes it possible to support the decisions that go into
    certifying a release.</para>

    <section id="staging-sect-without">
      <title>Releasing Software with a Staging Repository</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>introduction to</secondary>
        </indexterm>Without the Staging Suite, when a developer deploys an
      artifact to a Hosted repository such as the Release repository, this
      artifact is published to a hosted repository and is immediately made
      available - there is no oversight, there is no approval or certification
      process. There is no chance to test the artifact before writing the
      artifact to a hosted repository. If there is a mistake in the release,
      often the only option available is to republish the artifacts to the
      release repository or deploy a new version of the artifacts.</para>

      <figure>
        <title>Without the Nexus Staging Suite</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_without_staging.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_without_staging.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>While this is acceptable for some users, organizations and
      enterprises with a QA cycle often need a temporary staging repository
      for potential release candidates: a staging repository. With the Nexus
      Staging Suite, an organization can automatically stage releases to a
      temporary repository which can then be used to test and certify a set of
      artifacts before they are published to a final release repository. This
      temporary repository can then be promoted as a whole or dropped
      depending on the results of testing.</para>
    </section>

    <section id="staging-sect-how">
      <title>How the Staging Suite Works</title>

      <para>Here's how staging works in Nexus Professional:</para>

      <orderedlist>
        <listitem>
          <para>A developer deploys an artfiact (or a set of artifacts) to
          Nexus Professional.</para>
        </listitem>

        <listitem>
          <para>The Staging Suite intercepts this deployment and matches the
          artifact's path against a set of Staging Profiles.</para>
        </listitem>

        <listitem>
          <para>If the path of the artifact activates a staging profile, a
          temporary staging repository is created and the artifacts are
          deployed to this repository.</para>
        </listitem>

        <listitem>
          <para>Once the developer has deployed a set of artifacts to Nexus,
          they will then "Close" the staging repository.</para>
        </listitem>

        <listitem>
          <para>The Staging Suite will then add this temporary staging
          repository to one or more Target Repository Groups.</para>
        </listitem>
      </orderedlist>

      <para>Once the staging repository is closed, and the staging repository
      has been added to a Target repository group, the artifacts in the
      staging repository are then made available to developers or testers via
      a repository group. Tests can be performed on the artifacts as if they
      were already published in a hosted repository. From this point, one of
      two things can happen to a staging repository:</para>

      <variablelist>
        <varlistentry>
          <term>Promote</term>

          <listitem>
            <para>A Nexus user can "promote" a staging repository and select a
            hosted repository to publish artifacts to. Promoting the
            repository publishes all artifacts from the staging repository to
            a hosted repository and deletes the temporary staging
            repository.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Drop</term>

          <listitem>
            <para>A Nexus user can "drop" a staging repository. Dropping a
            staging repository will remove it from any groups and delete the
            temporary staging repository.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <figure>
        <title>With Nexus Staging Suite</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_with_staging.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_with_staging.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section id="staging-sect-using">
    <title>Using the Nexus Staging Suite</title>

    <para><indexterm>
        <primary>staging</primary>

        <secondary>installation of</secondary>
      </indexterm>To use the Staging Suite in Nexus Professional, start Nexus
    and look for the Staging, Staging Ruleset, and Staging Upload options in
    the left-hand navigation menu of the Nexus interface. If you see these two
    links as shown in <xref linkend="fig-staging-links" />, the Staging Suite
    is available and ready to be configured.</para>

    <figure id="fig-staging-links">
      <title>Enterprise Menu after Staging Suite Installation</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/staging_install-screenshot.png" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/staging_install-screenshot.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="staging-sect-config">
    <title>Configuring Staging Profiles</title>

    <para><indexterm>
        <primary>staging</primary>

        <secondary>configuration of</secondary>
      </indexterm>Staging Profiles define the rules by which artifact
    deployments are staged in Staging Repositories. Staging Repositories are
    created as they are needed and are the primary mechanism by which Nexus
    users can promote or discard the contents of a staging repository to a
    hosted repository. A staging profile uses a Repository Target to match
    artifacts as they are deployed, if a matching artifact is deployed to
    Nexus, the Staging Suite will intercept this deployment and store the
    artifact in a staging repository.</para>

    <para>The process for configuring a new Staging Profile is as
    follows:</para>

    <orderedlist>
      <listitem>
        <para>Configure a Repository Target to match artifacts under the
        groupId you will be deploying artifacts to. If you are releasing all
        of your software under the groupId com.example, you would configure a
        target that matched the pattern ".*/com/example/.*".</para>
      </listitem>

      <listitem>
        <para>Create a new Staging Profile using the target defined in the
        previous step. When you configure this staging profile, you will be
        defining a target repository group. When the Staging Suite intercepts
        an artifact and places it in a staging repository, this staging
        repository will be added to the target group.</para>
      </listitem>

      <listitem>
        <para>Assign the appropriate Staging-specific roles to the appropriate
        users. When you create a Staging Profile, Nexus also creates two new
        roles that grant access and privileges to the repositories created by
        this Staging Profile.</para>
      </listitem>
    </orderedlist>

    <para>The following sections provide a more detailed look at the process
    of configuring a single staging profile in Nexus Professional.</para>

    <section id="staging-sect-define-target">
      <title>Configuring a Staging Target</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>configuring targets</secondary>
        </indexterm>The Staging Suite intercepts deployments to repository
      targets. For example, if you wanted to intercept all deployments to the
      com.sonatype.sample groupId, you would create a Repository Target call
      the "Sample Target" with a pattern expression of
      "<varname>.*/com/sonatype/sample/.*</varname>". Do this by clicking on
      "Repository Targets" in the left-hand navigation menu in Nexus and then
      clicking on the <guibutton>Add</guibutton> button.</para>

      <figure>
        <title>Adding a Repository Target for com.sonatype.sample</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_make-target.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_make-target.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section id="staging-sect-config-profile">
      <title>Configuring Staging Profiles</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>staging profiles</secondary>
        </indexterm>Staging profiles control the process by which artifacts
      are selected for staging. When you define a Staging profile, you are
      defining a set of rules which will control the way in which Nexus
      intercepts an artifact deployment. When you click on Staging Profiles in
      the Nexus menu, you will see a list of configured staging profiles.
      Clicking on Add will create a new Staging Profile and display the form
      shown in <xref linkend="fig-staging-edit-profile" />.</para>

      <para>In the following figure, you are creating a Staging Profile using
      the Repository Target defined in the previous section. This target will
      match all artifacts under the com.sonatype.sample groupId (or
      com/sonatype/sample path). This staging profile uses the "Maven2 Hosted
      Release Repository" as a template for newly created temporary staging
      repositories, and it will automatically add closed staging repositories
      to both the Public Repositories group and the Public Snapshot
      Repositories group.</para>

      <figure id="fig-staging-edit-profile">
        <title>Editing a Staging Profile</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_profile-edit.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_profile-edit.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>This form allows you to configure a profile. Every profile has a
      name, is associated with a Repository Target, and points to a template
      to use when creating a new staging repository. The Staging Profile
      configuration panel contains the following fields:</para>

      <variablelist>
        <varlistentry>
          <term>Profile Name</term>

          <listitem>
            <para>The Name of the Staging Profile. This can be an arbitrary
            value. It is simply a convenience for the Nexus Administrator, and
            it is also used to create Nexus roles that are used to grant
            permissions to view and manipulate staging repositories created by
            this profile.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Profile Repository Target</term>

          <listitem>
            <para>This is a reference to the target which we defined in <xref
            linkend="staging-sect-define-target" />. When a developer deploys
            an artifact to the Staging URL, the Staging Suite will check to
            see if the artifact matches the patterns defined in the Repository
            Target. The Target defines the "trigger" for the creation of a
            Staging Repository.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Staging Repository Type</term>

          <listitem>
            <para>Nexus can create staging repositories for repositories of
            type maven1, maven2, and Eclipse P2 repositories. This chapter
            only deals with maven2 repository types.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Staging Repository Template</term>

          <listitem>
            <para>Defines a template for the temporary staging repository. The
            current version of Nexus Professional only allows for a single
            option in this dropdown "Default Release Hosted Repository
            Template"</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Target Groups</term>

          <listitem>
            <para>When a Staging Repository is "Closed" and is made available
            to users and developers involved in the testing process, the
            temporary Staging Repository is added to a Repository Group. This
            field defines that group.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Close Repository Notification Roles</term>

          <listitem>
            <para>After a developer has deployed a set of related release
            artifacts, a staging repository is "closed". This means that no
            further artifacts can be deployed to the same staging repository.
            A repository would be closed when a developer is satisfied that a
            collection of staged artifacts is ready to be certified by a
            manager or a quality assurance resource. The Close Notification
            Role contains all Roles which should be notified of a staging
            repository being closed. All Nexus users in the specified Role
            will be notified via email that a staging repository has been
            closed.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Promotion Repository Notification Roles</term>

          <listitem>
            <para>Once a staging repository has been closed and certified by a
            whoever is responsible for testing and checking a staged release,
            it can then be promoted or discarded. This list of roles defines
            the roles that need to be notified that a repository has been
            promoted or discarded. All users with the roles specified in this
            list will be notified when a staged repository is either promoted
            or discarded.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Close Staging Repository Rulesets</term>

          <listitem>
            <para>This defines the rulesets which will be applied to a staging
            repository before it can be closed. If the repository does not
            pass the rules defined in the promotion rulesets, you will be
            unable to close a staging repository. For more information about
            rulesets, see <xref linkend="staging-sect-rulesets" />.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Promote Staging Repository Rulesets</term>

          <listitem>
            <para>This defines the rulesets which will be applied to a staging
            repository on promotion. If the repository does not pass the rules
            defined in the promotion rulesets, the promotion will fail with an
            error message supplied by the failing rule. For more information
            about rulesets, see <xref
            linkend="staging-sect-rulesets" />.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Once you've created a Staging Repository with the values shown in
      <xref linkend="fig-staging-edit-profile" />, you are ready to perform a
      test deployment to the Staging URL.</para>
    </section>

    <section id="staging-sect-deploy-role">
      <title>Adding the Staging Deployer Role</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>staging deployer role</secondary>
        </indexterm>To perform a staged deployment, the user deploying the
      artifact must have the "Staging: Deployer (admin)" role or a "Staging:
      Deployer" role for a specific Staging Profile.</para>

      <para>When you create a Staging Profile, Nexus will create two new Nexus
      roles that grant permissions specific to that staging profile. If you
      created the Staging profile from the previous section, Nexus would have
      created two roles:</para>

      <variablelist>
        <varlistentry>
          <term>"Staging: Repositories (Release Staging Profile)"</term>

          <listitem>
            <para>This role grants a user read and view access to the staging
            repositories created by a specific staging profile.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>"Staging: Deployer (Release Staging Profile)"</term>

          <listitem>
            <para>This role grants all of the privileges from the Staging:
            Repositories role and it grants the user permission to deploy
            artifacts, close a staging repository, and promote a staging
            repository.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>In addition to the profile-specific staging roles, the Staging
      Suite also defines two universal roles which grant read-only or deployer
      rights across all staging repositories. These roles are:</para>

      <variablelist>
        <varlistentry>
          <term>"Staging: Repositories (admin)"</term>

          <listitem>
            <para>This role grants a user read and view access to all staging
            repositories.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>"Staging: Deployer (admin)</term>

          <listitem>
            <para>This role grants a user all of the privileges from the
            Staging: Repositories role and it grants the user permission to
            deploy artifacts to any staging repository, close all staging
            repositories, and promote all staging repositories.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>To configure the deployment user with the appropriate staging
      role, click on Users under the Security menu in the Nexus menu. Once you
      see the Users panel, click on the deployment user to edit this user's
      roles. If the Staging Suite is installed, you should see the "Staging:
      Deployer (admin)" role listed in Available Roles. Select the "Staging:
      Deployer (admin)" role and then click the left arrow to add this role to
      the deployment user's list of assigned roles.</para>

      <figure id="fig-staging-assigning-role">
        <title>Assigning the Staging Deployer Role to the deployment
        user</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_deployer-role.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_deployer-role.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once the deployment user has the "Staging: Deployer (admin)" role,
      you can then use this user to deploy to the staging URL and trigger any
      Staging Profile. Without this permission, the deployment user would not
      be able to publish a staged artifact. If you need to add a specific
      permission to activate a single Staging Profile, you would select that
      specific role in the Available Roles list shown in <xref
      linkend="fig-staging-assigning-role" />. In this figure, note that there
      are two "Staging: Deployer" roles: one for general administrative
      permission to deploy to any staging profile, and another which targets a
      specific staging profile.</para>
    </section>
  </section>

  <section id="staging-sect-deployment">
    <title>Performing a Staged Deployment with Maven</title>

    <para><indexterm>
        <primary>staging</primary>

        <secondary>staged deployment</secondary>
      </indexterm>In the previous section, you created a Staging Profile which
    references the Repository Target created in <xref
    linkend="staging-sect-define-target" />. If the Staging Suite is
    configured correctly, any deployment to the staging URL under the groupId
    com.sonatype.sample should be intercepted by the Staging Suite and placed
    in a temporary staging repository. Once this repository has been closed,
    it will be made available in the Target Group you selected when you
    configured the Staging Profile in <xref
    linkend="staging-sect-config-profile" />.</para>

    <para>In this section, you will create a new project using the Maven
    Archetype plugin to test the Staging Profile you created in the previous
    section.</para>

    <section id="staging-sect-creating">
      <title>Creating a New Project</title>

      <para>To create a new project run <command>mvn
      archetype:generate</command>. Running this at the command line will
      bring up a list of archetypes, choose the default
      maven-archetype-quickstart or number 16, and use the identifier values
      listed in <xref linkend="tbl-staging-new-project" /> for the new
      project.</para>

      <table id="tbl-staging-new-project">
        <title>Identifiers for New Project</title>

        <tgroup cols="2">
          <thead>
            <row>
              <entry>Identifier</entry>

              <entry>Value</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>groupId</entry>

              <entry>com.sonatype.sample</entry>
            </row>

            <row>
              <entry>artifactId</entry>

              <entry>staging-test</entry>
            </row>

            <row>
              <entry>version</entry>

              <entry>1.0</entry>
            </row>

            <row>
              <entry>package</entry>

              <entry>com.sonatype.sample</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>If the archetype generate goal is executed successfully, you
      should have output which resembles the following screen listing:</para>

      <screen>$ <command>mvn archetype:generate</command>
...
[INFO] [archetype:generate]
[INFO] Generating project in Interactive mode
[INFO] No archetype defined. Using maven-archetype-quickstart \
       (org.apache.maven.archetypes:maven-archetype-quickstart:1.0)
Choose archetype:
1: internal -&gt; appfuse-basic-jsf (AppFuse archetype for creating a \
   web application with Hibernate, Spring and JSF)
...
41: internal -&gt; gmaven-archetype-mojo (Groovy mojo archetype)
Choose a number:  (1/.../41) 16: : <command>16</command>
Define value for groupId: : <command>com.sonatype.sample</command>
Define value for artifactId: : <command>staging-test</command>
Define value for version:  1.0-SNAPSHOT: : <command>1.0</command>
Define value for package:  com.sonatype.sample: : <command>com.sonatype.sample</command>
Confirm properties configuration:
groupId: com.sonatype.sample
artifactId: staging-test
version: 1.0
package: com.sonatype.sample
 Y: : 
[INFO] Parameter: groupId, Value: com.sonatype.sample
[INFO] Parameter: packageName, Value: com.sonatype.sample
[INFO] Parameter: basedir, Value: /private/tmp
[INFO] Parameter: package, Value: com.sonatype.sample
[INFO] Parameter: version, Value: 1.0
[INFO] Parameter: artifactId, Value: staging-test
...
[INFO] BUILD SUCCESSFUL
</screen>
    </section>

    <section id="staging-sect-update-pom">
      <title>Update the POM: Deployment Configuration</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>deployment URL</secondary>
        </indexterm><indexterm>
          <primary>Project Object Model (POM)</primary>

          <secondary>distributionManagement</secondary>
        </indexterm><indexterm>
          <primary>Apache Maven</primary>

          <secondary>distribution management</secondary>
        </indexterm>To deploy a staged released, a developer needs to deploy
      to the staging URL. To configure this new project to deploy to the
      Staging URL, add the a <sgmltag>distributionManagement</sgmltag> element
      to the stage-test project's POM.</para>

      <example id="ex-staging-dist-management">
        <title>Listing the Staging URL in distributionManagement</title>

        <programlisting>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                      http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;com.sonatype.sample&lt;/groupId&gt;
  &lt;artifactId&gt;staging-test&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;name&gt;staging-test&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;distributionManagement&gt;
    &lt;repository&gt;
      &lt;id&gt;nexus&lt;/id&gt;
      &lt;name&gt;Nexus Staging Repo&lt;/name&gt;
   &lt;url&gt;http://localhost:8081/nexus/service/local/staging/deploy/maven2/&lt;/url&gt;
    &lt;/repository&gt;
  &lt;/distributionManagement&gt;
&lt;/project&gt;
</programlisting>
      </example>

      <para>This configuration element, distributionManagement, defines the
      repository to which our deployment will be made. It references the
      Staging Suite's Staging URL: <ulink
      url="http://localhost:8081/nexus/service/local/staging/deploy/maven2">http://localhost:8081/nexus/service/local/staging/deploy/maven2</ulink>.
      This URL acts as a something of a virtual repository to be published to.
      If an artifact being published matches one of the Repository Targets in
      a Staging Profile, that Staging Profile is "activated" and a temporary
      Staging Repository is created for a specific client as defined by the
      combination of a client's IP address, Deployment User name, and
      User-Agent.</para>
    </section>

    <section id="staging-sect-deploy-credentials">
      <title>Update settings.xml with Deployment Credentials</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>settings.xml</secondary>
        </indexterm><indexterm>
          <primary>Apache Maven</primary>

          <secondary>settings.xml</secondary>
        </indexterm>To successfully deploy to your Nexus instance, you will
      need to update your Maven Settings with the credentials for the
      deployment user. These credentials are stored in the Maven Settings file
      in ~/.m2/settings.xml. To add these credentials, add the following
      element to the servers element in your ~/.m2/settings.xml file as shown
      in <xref linkend="ex-staging-deployment-credentials" />.</para>

      <example id="ex-staging-deployment-credentials">
        <title>Listing deployment credentials in Maven Settings</title>

        <programlisting>&lt;settings&gt;
  ...
  &lt;servers&gt;
     ...
     &lt;server&gt;
       &lt;id&gt;nexus&lt;/id&gt;
       &lt;username&gt;deployment&lt;/username&gt;
       &lt;password&gt;deployment123&lt;/password&gt;
     &lt;/server&gt;
  &lt;/servers&gt;
  ...
&lt;/settings&gt;</programlisting>
      </example>

      <para>Note that the server identifier listed in <xref
      linkend="ex-staging-deployment-credentials" /> matches the server
      identifier listed in <xref linkend="ex-staging-dist-management" />. The
      deployment credential listed in <xref
      linkend="ex-staging-deployment-credentials" /> contains the default
      password for the Nexus deployment user - deployment123. You should
      change this password to match the deployment password for your Nexus
      installation.</para>
    </section>

    <section id="staging-sect-deploy-staged">
      <title>Deploying to a Staged Repository</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>staged deployment</secondary>
        </indexterm>Once the sample project's
      <sgmltag>distributionManagement</sgmltag> has been set to point at the
      Nexus Staging URL and your deployment credentials are updated in your
      ~/.m2/settings.xml file, you can deploy to the Staging URL. To do this,
      run <command>mvn deploy</command>:</para>

      <screen>$ mvn deploy
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building staging-test
[INFO]    task-segment: [deploy]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [resources:testResources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:testCompile]
[INFO] Nothing to compile - all classes are up to date
[INFO] [surefire:test]
[INFO] Surefire report directory: /private/tmp/staging-test/target/surefire-reports

...
[INFO] [jar:jar]
[INFO] [install:install]
[INFO] Installing /private/tmp/staging-test/target/staging-test-1.0.jar to \
      ~/.m2/repository/com/sonatype/sample/staging-test/1.0/staging-test-1.0.jar
[INFO] [deploy:deploy]
altDeploymentRepository = null
Uploading: http://localhost:8081/nexus/service/local/staging/deploy/maven2/\
      com/sonatype/sample/staging-test/1.0/staging-test-1.0.jar
2K uploaded
[INFO] Uploading project information for staging-test 1.0
[INFO] Retrieving previous metadata from nexus
[INFO] repository metadata for: 'artifact com.sonatype.sample:staging-test' 
       could not be found on repository: nexus, so will be created
[INFO] Uploading repository metadata for: 'artifact com.sonatype.sample:staging-test'
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
</screen>
    </section>
  </section>

  <section id="staging-sect-uploading-staged">
    <title>Uploading a Staged Deployment in Nexus</title>

    <para><indexterm>
        <primary>artifact upload</primary>

        <secondary>staged upload</secondary>
      </indexterm><indexterm>
        <primary>staging</primary>

        <secondary>artifact upload</secondary>
      </indexterm>You can also upload a staged deployment via the Nexus
    interface. To upload a staged deployment, select Staging Upload from the
    Nexus menu. Clicking Staging Upload will show the panel shown in <xref
    linkend="fig-staging-artifact-upload" />.</para>

    <figure floatstyle="" id="fig-staging-artifact-upload">
      <title>Uploading a Staged Deployment in Nexus</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/staging_artifact-upload.png" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/staging_artifact-upload.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>To upload an artifact, click on Select Artifact(s) for Upload... and
    select one or more artifacts from the filesystem to upload. Once you have
    selected an artifact, you can modify the classifier and the extension
    before clicking on the Add Artifact button. Once you have clicked on the
    Add Artifact button, you can then configure the source of the Group,
    Artifact, Version (GAV) parameters.</para>

    <para>If the artifact you are uploading is a JAR file that was created by
    Maven it will already have POM information embedded in it, but if you are
    uploading a JAR from a vendor you will likely need to set the Group
    Identifier, Artifact Identifier, and Version manually. To do this, select
    GAV Parameters from the GAV Definition dropdown at the top of this form.
    Selecting GAV Parameters will expose a set of form fields which will let
    you set the Group, Artifact, Version, and Packaging of the artifacts being
    uploaded. If you would prefer to set the Group, Artifact, and Version from
    a POM file which was associated with the uploaded artifact, select From
    POM in the GAV Definition dropdown. Selecting From POM in this dropdown
    will expose a button labeled "Select POM to Upload". Once a POM file has
    been selected for upload, the name of the POM file will be displayed in
    the form field below this button.</para>

    <para>The Staging Upload panel supports multiple artifacts with the same
    Group, Artifact, and Version identifiers. For example, if you need to
    upload multiple artifacts with different classifiers, you may do so by
    clicking on Select Artifact(s) for Upload and Add Artifact multiple times.
    This interface also accepts an Artifact Bundle which is a JAR that
    contains more than one artifact, for more information about uploading
    Artifact Bundles, see <xref linkend="bundles-sect-uploading" />.</para>

    <para>Once a staging artifact upload has been completely configured, click
    on Upload Artifact(s) button to begin the upload process. Nexus will
    upload the artifacts to the Staging URL which will trigger any staging
    profiles that are activated by the upload. If a staging profile is
    activated, a new staging repository will be created and can be managed
    using the procedures outlined in <xref
    linkend="staging-sect-managing-staging" />.</para>
  </section>

  <section>
    <title>Managing Staging Rulesets</title>

    <para><indexterm>
        <primary>staging</primary>

        <secondary>rulesets</secondary>
      </indexterm><indexterm>
        <primary>staging ruleset</primary>
      </indexterm>Nexus Professional has the ability to define staging rules
    that must be satisfied before a staging repository can be promoted.</para>

    <section id="staging-sect-rulesets">
      <title>Managing Staging Rulesets</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>ruleset management</secondary>
        </indexterm>Staging Rulesets are groups of rules that are applied to a
      Staging repository at promotion time. A staging repository associated
      with a staging ruleset cannot be promoted until all of the rules
      associated with the rulesets have been satisfied. This feature allows
      you to set standards for your own hosted repositories, and it is the
      mechanism that is used to guarantee the consistency of artifacts stored
      in the Central Maven repository.</para>

      <para>Nexus Professional contains the following rules:</para>

      <variablelist>
        <varlistentry>
          <term>Staging Javadoc Validation</term>

          <listitem>
            <para><indexterm>
                <primary>staging ruleset</primary>

                <secondary>Javadoc validation</secondary>
              </indexterm>The Staging Javadoc Validation rule will verify that
            every project has an artifact with the javadoc classifier. If you
            attempt to promote a staging repository which contains artifacts
            not accompanied by "-javadoc.jar" artifacts, this validation rule
            will fail.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Staging POM Validation</term>

          <listitem>
            <para><indexterm>
                <primary>staging ruleset</primary>

                <secondary>POM validation</secondary>
              </indexterm>The Staging POM Validation rule will verify the
            following properties of all POMs to be promoted:</para>

            <itemizedlist>
              <listitem>
                <para>Project URL - <varname>project/url</varname></para>
              </listitem>

              <listitem>
                <para>Project Licenses -
                <varname>project/licenses</varname></para>
              </listitem>

              <listitem>
                <para>Project SCM Information -
                <varname>project/scm</varname></para>
              </listitem>
            </itemizedlist>

            <para>If any of these POM elements are missing or empty, this
            Staging Ruleset will cause a promotion to fail.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Staging Signature Validation</term>

          <listitem>
            <para><indexterm>
                <primary>staging ruleset</primary>

                <secondary>signature validation</secondary>
              </indexterm>The Staging Signature Validation rule verifies that
            every item in the repository has a valid PGP signature. If you
            attempt to promote a staging repository which contains artifacts
            not accompanied by valid PGP signature, this validation will
            fail.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Staging Sources Validation</term>

          <listitem>
            <para><indexterm>
                <primary>staging ruleset</primary>

                <secondary>sources validation</secondary>
              </indexterm>The Staging Sources Validation rule will verify that
            every project has an artifact with the sources classifier. If you
            attempt to promote a staging repository which contains artifacts
            not accompanied by "-sources.jar" artifacts, this validation rule
            will fail.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>To create a Staging Ruleset, click on the Staging Ruleset link in
      the Nexus Menu. This will load the interface shown in <xref
      linkend="fig-staging-rulesets" />. The Staging Ruleset panel is used to
      define sets of rules that can be applied to Staging Profiles. <xref
      linkend="fig-staging-rulesets" /> shows a ruleset which contains all
      four predefined staging rules.</para>

      <figure id="fig-staging-rulesets">
        <title>Creating a Staging Ruleset</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging-rulesets.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging-rulesets.pdf" scalefit="0"
                       width="100%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section id="staging-sect-defining-rulesets">
      <title>Defining Rulesets for Promotion</title>

      <para><indexterm>
          <primary>staging ruleset</primary>

          <secondary>definition of</secondary>
        </indexterm><indexterm>
          <primary>staging</primary>

          <secondary>defining rulesets</secondary>
        </indexterm>To define a ruleset to be used for promotion, click on
      Staging in the Nexus menu and select a Staging Profile. Click on the
      Configuration tab, and scroll down to the Promote Repository Staging
      Rulesets section of the Staging Profile configuration as shown in <xref
      linkend="fig-staging-associate-ruleset" />. The next time you attempt to
      promote a staging repository that was created with this profile, Nexus
      Professional will check that all of the rules in the associated rulesets
      are being adhered to.<figure id="fig-staging-associate-ruleset">
          <title>Associating a Staging Ruleset with a Staging Profile</title>

          <mediaobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/staging-rulesets-associate.png" />
            </imageobject>

            <imageobject role="print">
              <imagedata align="center"
                         fileref="figs/print/staging-rulesets-associate.pdf"
                         scalefit="0" width="100%" />
            </imageobject>
          </mediaobject>
        </figure></para>
    </section>
  </section>

  <section id="staging-sect-managing-staging">
    <title>Managing Staging Repositories in Nexus</title>

    <para><indexterm>
        <primary>Nexus repository</primary>

        <secondary>staging repository</secondary>
      </indexterm><indexterm>
        <primary>staging</primary>

        <secondary>management of</secondary>
      </indexterm>Once you complete the process outlined in <xref
    linkend="staging-sect-deployment" />, you will then have an automatically
    generated Staging Repository. In this section, you will walk through the
    process of managing staging repositories. Once a staging repository has
    been created, there are two steps in the lifecycle of a staging
    repository. Once you have deployed a set of related artifacts, you must
    "Close" the repository moving it from an "Open" to a "Closed" state. Once
    a repository is in the "Closed" state it is added to a Repository Group
    and is made available for testing purposes. Once testing is completed, a
    Nexus administrator can either Promote or Drop a Closed repository. If the
    repository is Dropped, the repository is discarded and removed from the
    Repository Group. If the repository is Promoted, the Nexus administrator
    can select a Hosted repository and publish the contents of the temporary
    staging repository to a Hosted repository.</para>

    <section id="staging-sect-closing">
      <title>Closing an Open Repository</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>closing a repository</secondary>
        </indexterm>Once you deploy an artifact that triggers a staging
      profile, Nexus Staging Suite will create a repository that contains the
      artifacts you deployed. A separate staging repository is created for
      every combination of User ID, IP Address, and User Agent. This means
      that you can perform more than one deployment to a single Staging
      Repository as long as you perform the deployment from the same IP, with
      the same deployment user, and the same installation of Maven. You can
      perform multiple deployments to an "Open" staging repository, to see a
      list of these temporary "Open" Staging repositories, select "Staging"
      from the Nexus menu and click on the appropriate Staging Profile to
      browse a list of staging repositories which correspond to a staging
      profile.</para>

      <figure>
        <title>Listing Repositories Associated with a Staging Profile</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_close-repository.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_close-repository.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once you are ready to start testing the staging repository, you
      will need to transition the staging repository from the "Open" state to
      the "Closed" state. This will close the temporary staging repository to
      more deployments. To close a repository, right-click on the repository
      in the Staging Repositories panel and select "Close". This will bring up
      the following dialog for a staging deployer to describe the contents of
      a staging repository. This description field can be used to pass
      essential information to the person that needs to test a deployment. In
      <xref linkend="fig-staging-close-description" />, the description field
      is used to describe the release for the user that needs to certify and
      promote a release.</para>

      <figure id="fig-staging-close-description">
        <title>Confirmation and Description Dialog for Closing a Staging
        Repository</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_close-confirm.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_close-confirm.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Confirming this state transition will close the repository and add
      the repository to a repository group. Once a repository has been closed,
      it will be listed as "Closed" in the Profile's Repositories tab.</para>

      <figure>
        <title>Closed Repository After Selecting Finish</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_closed-repository.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_closed-repository.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section id="staging-sect-using">
      <title>Using the Staging Repository</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>staged artifacts</secondary>
        </indexterm><indexterm>
          <primary>staging</primary>

          <secondary>repository group</secondary>
        </indexterm>Once the Staging Repository has been closed, it will
      automatically be added to the Repository Group that was specified in the
      Staging Profile. <xref linkend="fig-staging-add-to-group" /> shows an
      instance of a staging repository appended to the end of a group named
      "Public Repositories". This has the effect of making the staged
      artifacts available to everyone who is referencing this public group.
      Developers who are referencing this public repository group can now test
      and interact with the staged artifacts as if they were published to a
      Hosted repository. While the artifacts are made available in a
      repository group, the fact that they are held in a temporary staging
      directory gives the administrator the option of promoting this set of
      artifacts to a Hosted repository or dropping this temporary staging
      repository if there are problems discovered during the testing and
      certification process for a release.</para>

      <figure id="fig-staging-add-to-group">
        <title>Staging Repository Added to the End of a Repository
        Group</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_staged-to-group.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_staged-to-group.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once a staging repository is closed, you can also browse and
      search the repository. To view Staging Repositories, click on Browse
      Repositories and then select Nexus Managed Repositories as shown in
      <xref linkend="fig-staging-selecting-nexus" />.</para>

      <figure id="fig-staging-selecting-nexus">
        <title>Viewing Nexus Managed Repositories</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_select-nexus-managed.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_select-nexus-managed.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once you've selected Nexus Managed Repositories, Nexus will then
      show you all of the repositories that have been created by the Nexus
      Staging Suite. You can select and browse this temporary Staging
      Repository as you would any other repository.</para>

      <figure>
        <title>Browsing a Staging Repository</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_browsing-staged.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_browsing-staged.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>You can also browse the contents of a staging repository from the
      Staging panel. Click on Staging in the Enterprise menu, click on a
      profile and you will then see a list of staging repository instances.
      Clicking on one of these instances will bring up another way to browse
      the contents of a particular staging repository.</para>

      <figure>
        <title>Browsing Repository via Staging Profiles</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_browsing-via-profiles.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_browsing-via-profiles.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section id="staging-sect-promoting">
      <title>Promoting a Repository</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>promoting a repository</secondary>
        </indexterm>Once you are finished testing or certifying that the
      contents of a Staging Repository are correct, you are ready to either
      Promote or Drop the Staging Repository. Dropping the Staging Repository
      will delete the temporary staging repository from Nexus and remove any
      reference to this repository from the groups it was associated with.
      Promoting the Staging Repository allows you to publish the contents of
      this temporary repository to a Hosted repository.</para>

      <para>To promote a Staging Repository select Staging from the Nexus menu
      and then click on the appropriate Staging Profile. This will display a
      list of Staging Repositories associated with that Staging Profile. Find
      the repository you wish to promote and right-click on the repository
      row, this should display the context menu shown in <xref
      linkend="fig-staging-promote" />.</para>

      <figure id="fig-staging-promote">
        <title>Promoting a Staging Repository</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_promote-repository.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_promote-repository.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once you select Promote, the Nexus Staging Suite will ask you to
      choose a destination repository. You can choose any Hosted
      repository.</para>

      <figure>
        <title>Selecting the Destination Repository for Staged Repository
        Promotion</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_promote-confirm.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_promote-confirm.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Selecting a repository and clicking on Promote will publish the
      contents of a Staging Repository to a Hosted repository and delete the
      Staging Repository from Nexus.</para>

      <figure>
        <title>Confirmation Dialog for Repository Promotion</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/staging_success-promote.png" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/staging_success-promote.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section id="staging-sect-managing-plugin">
    <title>Managing Staging Repositories with the Nexus Maven Plugin</title>

    <para><indexterm>
        <primary>Apache Maven</primary>

        <secondary>Nexus Maven plugin</secondary>
      </indexterm><indexterm>
        <primary>Nexus Maven plugin</primary>
      </indexterm><indexterm>
        <primary>staging</primary>

        <secondary>Nexus Maven plugin</secondary>
      </indexterm>You can do everything that was described in <xref
    linkend="staging-sect-managing-staging" /> with the Nexus Maven Plugin.
    Using the Nexus Maven Plugin you can:</para>

    <itemizedlist>
      <listitem>
        <para>Close a Staging Repository</para>
      </listitem>

      <listitem>
        <para>Promote a Staging Repository</para>
      </listitem>

      <listitem>
        <para>Drop a Staging Repository</para>
      </listitem>

      <listitem>
        <para>List All Available Staging Repositories</para>
      </listitem>
    </itemizedlist>

    <section>
      <title>Running the Nexus Maven Plugin</title>

      <para><indexterm>
          <primary>Nexus Maven plugin</primary>

          <secondary>plugin group</secondary>
        </indexterm><indexterm>
          <primary>Nexus Maven Plugin</primary>

          <secondary>configuration</secondary>
        </indexterm><indexterm>
          <primary>staging</primary>

          <secondary>Maven plugin goals</secondary>
        </indexterm>To invoke goals in the Nexus Maven plugin, you will want
      to add the appropriate plugin group to your Maven settings file. Add the
      org.sonatype.plugins groupId to <indexterm>
          <primary>Apache Maven</primary>

          <secondary>settings.xml</secondary>
        </indexterm><filename>~/.m2/settings.xml</filename> as shown in <xref
      linkend="ex-staging-nexus-plugin-group" />.</para>

      <example id="ex-staging-nexus-plugin-group">
        <title>Adding org.sonatype.plugins to pluginGroups in Maven
        Settings</title>

        <programlisting>&lt;settings&gt;
  ...
  &lt;pluginGroups&gt;
    &lt;pluginGroup&gt;org.sonatype.plugins&lt;/pluginGroup&gt;
  &lt;/pluginGroups&gt;
  ...
&lt;/settings&gt;</programlisting>
      </example>

      <para><indexterm>
          <primary>Nexus Maven Plugin</primary>

          <secondary>goals</secondary>
        </indexterm>Adding the <varname>org.sonatype.plugins</varname> group
      to your Maven Settings will allow you to run the following goals from
      the Nexus Maven Plugin:</para>

      <variablelist>
        <varlistentry>
          <term>nexus:staging-finish</term>

          <listitem>
            <para><indexterm>
                <primary>Nexus Maven Plugin</primary>

                <secondary>staging-finish</secondary>
              </indexterm>This goal will close a staging repository from
            Maven. This goal in the Nexus Maven plugin corresponds to the
            procedure described in <xref
            linkend="staging-sect-closing" />.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>nexus:staging-list</term>

          <listitem>
            <para><indexterm>
                <primary>Nexus Maven Plugin</primary>

                <secondary>staging-list</secondary>
              </indexterm>This goal will list all of the staging repositories
            which are currently visible to a user.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>nexus:staging-drop</term>

          <listitem>
            <para><indexterm>
                <primary>Nexus Maven Plugin</primary>

                <secondary>staging-drop</secondary>
              </indexterm>This goal allows you to drop a specific staging
            repository. If no repositories are specified for this goal, this
            plugin will present an interactive menu listing all of the closed
            staging repositories currently eligible for a drop
            operation.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>nexus:staging-promote</term>

          <listitem>
            <para><indexterm>
                <primary>Nexus Maven Plugin</primary>

                <secondary>staging-promote</secondary>
              </indexterm>This goal allows you to promote a specific
            repository. If no repositories are specified for this goal, this
            plugin will present an interactive menu listing all of the closed
            staging repositories currently eligible for a promote
            operation.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Once you have configured the <sgmltag>pluginGroup</sgmltag> in
      your Maven Settings file, you can run the Nexus Maven plugin from the
      command line. In order to access the staging suite in your Nexus
      instance, the plugin must be told where Nexus is.</para>

      <screen>$ mvn nexus:staging-list
</screen>
    </section>

    <section id="sect-staging-mvn-plugin">
      <title>Configuring Nexus Maven Plugin for Staging</title>

      <para><indexterm>
          <primary>Nexus Maven Plugin</primary>

          <secondary>authentication configuration</secondary>
        </indexterm>All of the Staging goals in the Nexus Maven plugin require
      security credentials and a base URL for the Nexus server you are
      attempting to manage. You can specify security credentials by supplying
      a username and password or by supplying a server id that corresponds to
      a server in your Maven Settings (~/.m2/settings.xml). The common
      configuration parameters and security configuration properties
      are:</para>

      <variablelist>
        <varlistentry>
          <term>nexusUrl</term>

          <listitem>
            <para>Points to the Nexus server installation's base URL. If you
            have installed Nexus on your local machine, this would be
            http://localhost:8081/nexus/</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>username</term>

          <listitem>
            <para>Username to use for authenticating to Nexus. Default value
            is \${user.name}.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>password</term>

          <listitem>
            <para>Password to use for authenticating to Nexus</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>serverAuthId</term>

          <listitem>
            <para>You should specify either username and password or the
            serverAuthId. If you specify a value for serverAuthId, the Nexus
            Maven plugin is going to look at the contents of your
            <filename>~/.m2/settings.xml</filename> file and use the username
            and password from a server definition.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>In most cases a valid user login will be required to access your
      staging information. By default, if you don't specify the nexusUrl and
      password parameters, the plugin will prompt you for them. If you don't
      specify the username parameter, the Java System property
      <varname>\${user.name}</varname> will be used.</para>

      <para>In addition to these security options, all of the staging goals
      have a common configuration property which controls the logging
      level.</para>

      <variablelist>
        <varlistentry>
          <term>verboseDebug</term>

          <listitem>
            <para>If verboseDebug is set to true Maven will print out debug
            messages that detail the plugin's interaction with Nexus.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section>
      <title>Listing Your Open Staging Repositories</title>

      <para><indexterm>
          <primary>Nexus Maven Plugin</primary>

          <secondary>open staging repository list</secondary>
        </indexterm><indexterm>
          <primary>staging</primary>

          <secondary>listing repositories</secondary>
        </indexterm>Once you've deployed one or more sets of artifacts as
      release candidate to Nexus, you'll have one or more open staging
      repositories. There are a variety of actions you can take with these
      repositories, but maybe one of the most basic is to list them. This
      gives you a pretty good view into the status of your release(s). The
      basic command is:</para>

      <screen>$ <command>mvn nexus:staging-list</command>
[...]
[INFO] Logging into Nexus: http://localhost:8082/nexus
[INFO] User: testuser
[INFO] 


[INFO] The following OPEN staging repositories were found: 

-  staging-003 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-003


[INFO] The following CLOSED staging repositories were found: 

-  staging-001 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-001
   Description: This is a test repository
   
-  staging-002 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-002
   Description: This is another test repository</screen>

      <para>You can find more information about this Mojo <ulink
      url="http://plugins.sonatype.org/nexus-maven-plugin/usage-staging.html">here</ulink>.</para>
    </section>

    <section>
      <title>Closing a Staging Repository</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>closing repository</secondary>
        </indexterm><indexterm>
          <primary>Nexus Maven Plugin</primary>

          <secondary>closing repository</secondary>
        </indexterm>Before your team can run any tests against the set of
      artifacts that constitute your release, you need to mark the open
      staging repository as closed. This means that no additional artifacts
      can be added to that specific staging repository, making the set of
      artifacts it contains an immutable snapshot. When it is closed, the
      repository will become available for artifact resolution. The basic
      command is:</para>

      <screen>$ mvn nexus:staging-close
[INFO] 


Available Staging Repositories:


1: staging-002 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-002



Select a repository to close (1) 1: : 1

Repository Description: This is a test repository
[INFO] Finishing staging repository for: 'com.myco:my-project:1':

-  staging-002 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-002


[INFO] The following CLOSED staging repositories were found for: \
'com.myco:my-project:1':

-  staging-001 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-001
   Description: This is a test repository
   
-  staging-002 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-002
   Description: This is another test repository</screen>

      <para>The output above shows that the staging-close Mojo found an open
      staging repository - staging-001 - for the current project, then told
      Nexus to close it. Afterward, it displayed the list of closed staging
      repositories, which included the one we just closed. If you don't have
      an open staging repository, you'll see something like this
      instead:</para>

      <screen>No open staging repositories found. Nothing to do!


[INFO] The following CLOSED staging repositories were found for: \
'com.myco:my-project:1':

-  staging-001 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-001
   Description: This is a test repository
   
-  staging-002 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-002
   Description: This is another test repository</screen>

      <para>You can find more information about this Mojo <ulink
      url="http://plugins.sonatype.org/nexus-maven-plugin/staging-close-mojo.html">here</ulink>.</para>
    </section>

    <section>
      <title>Dropping a Closed Staging Repository</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>drop repository</secondary>
        </indexterm><indexterm>
          <primary>Nexus Maven plugin</primary>

          <secondary>drop repository</secondary>
        </indexterm>In the unfortunate event that your project artifacts fail
      during testing, you may need to drop the staging repository that houses
      them, in order to avoid confusing them with newer candidate releases.
      The basic command is:</para>

      <screen>$ mvn nexus:staging-drop
[INFO] 


Available Staging Repositories:


1: staging-006 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-006
   Description: This is a test repository



Select a repository to drop (1) 1: : 1
[INFO] Dropping staged repository: 

-  staging-006 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-006
   Description: This is a test repository</screen>

      <para>The Mojo will present you with a list of closed staging
      repositories, with the first in the list selected as the default
      response. If you simply hit the Enter key, the default will be used;
      otherwise, the repository corresponding to the number you select will be
      used. If you have no closed staging repositories, you'll see something
      like this instead:</para>

      <screen>[INFO] 

No closed staging repositories found. Nothing to do!</screen>

      <para>You can find more information about this Mojo <ulink
      url="http://plugins.sonatype.org/nexus-maven-plugin/staging-drop-mojo.html">here</ulink>.</para>
    </section>

    <section>
      <title>Promoting a Closed Staging Repository</title>

      <para><indexterm>
          <primary>staging</primary>

          <secondary>promote repository</secondary>
        </indexterm><indexterm>
          <primary>Nexus Maven plugin</primary>

          <secondary>promote repository</secondary>
        </indexterm>On the other hand, if your project artifacts pass all
      tests, you will find that you need to promote the staging repository
      that houses them, in order to finalize the release and make the
      artifacts available for public consumption. The basic command is:</para>

      <screen>$ mvn nexus:staging-promote
[INFO] 


Available Staging Repositories:


1: staging-006 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-006
   Description: This is a test repository



Select a repository to promote (1) 1: : 1
Target Repository ID: releases
[INFO] Promoting staging repository to: releases:

-  staging-006 (profile: Example Profile)
   URL: http://localhost:8082/nexus/content/repositories/staging-006
   Description: This is a test repository</screen>

      <para>The Mojo will present you with a list of closed staging
      repositories, with the first in the list selected as the default
      response. If you simply hit the Enter key, the default will be used;
      otherwise, the repository corresponding to the number you select will be
      used. If you have no closed staging repositories, you'll see something
      like this instead:</para>

      <screen>[INFO] 

No closed staging repositories found. Nothing to do!</screen>

      <para>You can find more information about this Mojo <ulink
      url="http://plugins.sonatype.org/nexus-maven-plugin/staging-promote-mojo.html">here</ulink>.</para>
    </section>
  </section>
</chapter>
